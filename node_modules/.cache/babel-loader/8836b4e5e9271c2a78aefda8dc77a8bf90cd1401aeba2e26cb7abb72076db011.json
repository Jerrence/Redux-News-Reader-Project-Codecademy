{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;\nvar _didYouMean = require('../../jsutils/didYouMean.js');\nvar _inspect = require('../../jsutils/inspect.js');\nvar _invariant = require('../../jsutils/invariant.js');\nvar _suggestionList = require('../../jsutils/suggestionList.js');\nvar _GraphQLError = require('../../error/GraphQLError.js');\nvar _kinds = require('../../language/kinds.js');\nvar _predicates = require('../../language/predicates.js');\nvar _definition = require('../../type/definition.js');\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nfunction PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n  for (const def of context.getDocument().definitions) {\n    if ((0, _predicates.isTypeDefinitionNode)(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension\n  };\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(new _GraphQLError.GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, {\n          nodes: defNode ? [defNode, node] : node\n        }));\n      }\n    } else {\n      const allTypeNames = Object.keys({\n        ...definedTypes,\n        ...(schema === null || schema === void 0 ? void 0 : schema.getTypeMap())\n      });\n      const suggestedTypes = (0, _suggestionList.suggestionList)(typeName, allTypeNames);\n      context.reportError(new _GraphQLError.GraphQLError(`Cannot extend type \"${typeName}\" because it is not defined.` + (0, _didYouMean.didYouMean)(suggestedTypes), {\n        nodes: node.name\n      }));\n    }\n  }\n}\nconst defKindToExtKind = {\n  [_kinds.Kind.SCALAR_TYPE_DEFINITION]: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n  [_kinds.Kind.OBJECT_TYPE_DEFINITION]: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n  [_kinds.Kind.INTERFACE_TYPE_DEFINITION]: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n  [_kinds.Kind.UNION_TYPE_DEFINITION]: _kinds.Kind.UNION_TYPE_EXTENSION,\n  [_kinds.Kind.ENUM_TYPE_DEFINITION]: _kinds.Kind.ENUM_TYPE_EXTENSION,\n  [_kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION]: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION\n};\nfunction typeToExtKind(type) {\n  if ((0, _definition.isScalarType)(type)) {\n    return _kinds.Kind.SCALAR_TYPE_EXTENSION;\n  }\n  if ((0, _definition.isObjectType)(type)) {\n    return _kinds.Kind.OBJECT_TYPE_EXTENSION;\n  }\n  if ((0, _definition.isInterfaceType)(type)) {\n    return _kinds.Kind.INTERFACE_TYPE_EXTENSION;\n  }\n  if ((0, _definition.isUnionType)(type)) {\n    return _kinds.Kind.UNION_TYPE_EXTENSION;\n  }\n  if ((0, _definition.isEnumType)(type)) {\n    return _kinds.Kind.ENUM_TYPE_EXTENSION;\n  }\n  if ((0, _definition.isInputObjectType)(type)) {\n    return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n  false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));\n}\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case _kinds.Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n    case _kinds.Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n    case _kinds.Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n    case _kinds.Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n    case _kinds.Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n    case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false || (0, _invariant.invariant)(false, 'Unexpected kind: ' + (0, _inspect.inspect)(kind));\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","PossibleTypeExtensionsRule","_didYouMean","require","_inspect","_invariant","_suggestionList","_GraphQLError","_kinds","_predicates","_definition","context","schema","getSchema","definedTypes","create","def","getDocument","definitions","isTypeDefinitionNode","name","ScalarTypeExtension","checkExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","node","typeName","defNode","existingType","getType","expectedKind","defKindToExtKind","kind","typeToExtKind","kindStr","extensionKindToTypeName","reportError","GraphQLError","nodes","allTypeNames","keys","getTypeMap","suggestedTypes","suggestionList","didYouMean","Kind","SCALAR_TYPE_DEFINITION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_DEFINITION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_DEFINITION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_DEFINITION","UNION_TYPE_EXTENSION","ENUM_TYPE_DEFINITION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_DEFINITION","INPUT_OBJECT_TYPE_EXTENSION","type","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","invariant","inspect"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;\n\nvar _didYouMean = require('../../jsutils/didYouMean.js');\n\nvar _inspect = require('../../jsutils/inspect.js');\n\nvar _invariant = require('../../jsutils/invariant.js');\n\nvar _suggestionList = require('../../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _predicates = require('../../language/predicates.js');\n\nvar _definition = require('../../type/definition.js');\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nfunction PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if ((0, _predicates.isTypeDefinitionNode)(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension,\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType =\n      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Cannot extend non-${kindStr} type \"${typeName}\".`,\n            {\n              nodes: defNode ? [defNode, node] : node,\n            },\n          ),\n        );\n      }\n    } else {\n      const allTypeNames = Object.keys({\n        ...definedTypes,\n        ...(schema === null || schema === void 0\n          ? void 0\n          : schema.getTypeMap()),\n      });\n      const suggestedTypes = (0, _suggestionList.suggestionList)(\n        typeName,\n        allTypeNames,\n      );\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `Cannot extend type \"${typeName}\" because it is not defined.` +\n            (0, _didYouMean.didYouMean)(suggestedTypes),\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n    }\n  }\n}\n\nconst defKindToExtKind = {\n  [_kinds.Kind.SCALAR_TYPE_DEFINITION]: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n  [_kinds.Kind.OBJECT_TYPE_DEFINITION]: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n  [_kinds.Kind.INTERFACE_TYPE_DEFINITION]: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n  [_kinds.Kind.UNION_TYPE_DEFINITION]: _kinds.Kind.UNION_TYPE_EXTENSION,\n  [_kinds.Kind.ENUM_TYPE_DEFINITION]: _kinds.Kind.ENUM_TYPE_EXTENSION,\n  [_kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION]:\n    _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n};\n\nfunction typeToExtKind(type) {\n  if ((0, _definition.isScalarType)(type)) {\n    return _kinds.Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if ((0, _definition.isObjectType)(type)) {\n    return _kinds.Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if ((0, _definition.isInterfaceType)(type)) {\n    return _kinds.Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if ((0, _definition.isUnionType)(type)) {\n    return _kinds.Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if ((0, _definition.isEnumType)(type)) {\n    return _kinds.Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n  false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected type: ' + (0, _inspect.inspect)(type),\n    );\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case _kinds.Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case _kinds.Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case _kinds.Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case _kinds.Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case _kinds.Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false ||\n        (0, _invariant.invariant)(\n          false,\n          'Unexpected kind: ' + (0, _inspect.inspect)(kind),\n        );\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,0BAA0B,GAAGA,0BAA0B;AAE/D,IAAIC,WAAW,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AAExD,IAAIC,QAAQ,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AAElD,IAAIE,UAAU,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AAEtD,IAAIG,eAAe,GAAGH,OAAO,CAAC,iCAAiC,CAAC;AAEhE,IAAII,aAAa,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;AAE1D,IAAIK,MAAM,GAAGL,OAAO,CAAC,yBAAyB,CAAC;AAE/C,IAAIM,WAAW,GAAGN,OAAO,CAAC,8BAA8B,CAAC;AAEzD,IAAIO,WAAW,GAAGP,OAAO,CAAC,0BAA0B,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA,SAASF,0BAA0B,CAACU,OAAO,EAAE;EAC3C,MAAMC,MAAM,GAAGD,OAAO,CAACE,SAAS,EAAE;EAClC,MAAMC,YAAY,GAAGjB,MAAM,CAACkB,MAAM,CAAC,IAAI,CAAC;EAExC,KAAK,MAAMC,GAAG,IAAIL,OAAO,CAACM,WAAW,EAAE,CAACC,WAAW,EAAE;IACnD,IAAI,CAAC,CAAC,EAAET,WAAW,CAACU,oBAAoB,EAAEH,GAAG,CAAC,EAAE;MAC9CF,YAAY,CAACE,GAAG,CAACI,IAAI,CAACpB,KAAK,CAAC,GAAGgB,GAAG;IACpC;EACF;EAEA,OAAO;IACLK,mBAAmB,EAAEC,cAAc;IACnCC,mBAAmB,EAAED,cAAc;IACnCE,sBAAsB,EAAEF,cAAc;IACtCG,kBAAkB,EAAEH,cAAc;IAClCI,iBAAiB,EAAEJ,cAAc;IACjCK,wBAAwB,EAAEL;EAC5B,CAAC;EAED,SAASA,cAAc,CAACM,IAAI,EAAE;IAC5B,MAAMC,QAAQ,GAAGD,IAAI,CAACR,IAAI,CAACpB,KAAK;IAChC,MAAM8B,OAAO,GAAGhB,YAAY,CAACe,QAAQ,CAAC;IACtC,MAAME,YAAY,GAChBnB,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACoB,OAAO,CAACH,QAAQ,CAAC;IAC1E,IAAII,YAAY;IAEhB,IAAIH,OAAO,EAAE;MACXG,YAAY,GAAGC,gBAAgB,CAACJ,OAAO,CAACK,IAAI,CAAC;IAC/C,CAAC,MAAM,IAAIJ,YAAY,EAAE;MACvBE,YAAY,GAAGG,aAAa,CAACL,YAAY,CAAC;IAC5C;IAEA,IAAIE,YAAY,EAAE;MAChB,IAAIA,YAAY,KAAKL,IAAI,CAACO,IAAI,EAAE;QAC9B,MAAME,OAAO,GAAGC,uBAAuB,CAACV,IAAI,CAACO,IAAI,CAAC;QAClDxB,OAAO,CAAC4B,WAAW,CACjB,IAAIhC,aAAa,CAACiC,YAAY,CAC3B,qBAAoBH,OAAQ,UAASR,QAAS,IAAG,EAClD;UACEY,KAAK,EAAEX,OAAO,GAAG,CAACA,OAAO,EAAEF,IAAI,CAAC,GAAGA;QACrC,CAAC,CACF,CACF;MACH;IACF,CAAC,MAAM;MACL,MAAMc,YAAY,GAAG7C,MAAM,CAAC8C,IAAI,CAAC;QAC/B,GAAG7B,YAAY;QACf,IAAIF,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GACpC,KAAK,CAAC,GACNA,MAAM,CAACgC,UAAU,EAAE;MACzB,CAAC,CAAC;MACF,MAAMC,cAAc,GAAG,CAAC,CAAC,EAAEvC,eAAe,CAACwC,cAAc,EACvDjB,QAAQ,EACRa,YAAY,CACb;MACD/B,OAAO,CAAC4B,WAAW,CACjB,IAAIhC,aAAa,CAACiC,YAAY,CAC3B,uBAAsBX,QAAS,8BAA6B,GAC3D,CAAC,CAAC,EAAE3B,WAAW,CAAC6C,UAAU,EAAEF,cAAc,CAAC,EAC7C;QACEJ,KAAK,EAAEb,IAAI,CAACR;MACd,CAAC,CACF,CACF;IACH;EACF;AACF;AAEA,MAAMc,gBAAgB,GAAG;EACvB,CAAC1B,MAAM,CAACwC,IAAI,CAACC,sBAAsB,GAAGzC,MAAM,CAACwC,IAAI,CAACE,qBAAqB;EACvE,CAAC1C,MAAM,CAACwC,IAAI,CAACG,sBAAsB,GAAG3C,MAAM,CAACwC,IAAI,CAACI,qBAAqB;EACvE,CAAC5C,MAAM,CAACwC,IAAI,CAACK,yBAAyB,GAAG7C,MAAM,CAACwC,IAAI,CAACM,wBAAwB;EAC7E,CAAC9C,MAAM,CAACwC,IAAI,CAACO,qBAAqB,GAAG/C,MAAM,CAACwC,IAAI,CAACQ,oBAAoB;EACrE,CAAChD,MAAM,CAACwC,IAAI,CAACS,oBAAoB,GAAGjD,MAAM,CAACwC,IAAI,CAACU,mBAAmB;EACnE,CAAClD,MAAM,CAACwC,IAAI,CAACW,4BAA4B,GACvCnD,MAAM,CAACwC,IAAI,CAACY;AAChB,CAAC;AAED,SAASxB,aAAa,CAACyB,IAAI,EAAE;EAC3B,IAAI,CAAC,CAAC,EAAEnD,WAAW,CAACoD,YAAY,EAAED,IAAI,CAAC,EAAE;IACvC,OAAOrD,MAAM,CAACwC,IAAI,CAACE,qBAAqB;EAC1C;EAEA,IAAI,CAAC,CAAC,EAAExC,WAAW,CAACqD,YAAY,EAAEF,IAAI,CAAC,EAAE;IACvC,OAAOrD,MAAM,CAACwC,IAAI,CAACI,qBAAqB;EAC1C;EAEA,IAAI,CAAC,CAAC,EAAE1C,WAAW,CAACsD,eAAe,EAAEH,IAAI,CAAC,EAAE;IAC1C,OAAOrD,MAAM,CAACwC,IAAI,CAACM,wBAAwB;EAC7C;EAEA,IAAI,CAAC,CAAC,EAAE5C,WAAW,CAACuD,WAAW,EAAEJ,IAAI,CAAC,EAAE;IACtC,OAAOrD,MAAM,CAACwC,IAAI,CAACQ,oBAAoB;EACzC;EAEA,IAAI,CAAC,CAAC,EAAE9C,WAAW,CAACwD,UAAU,EAAEL,IAAI,CAAC,EAAE;IACrC,OAAOrD,MAAM,CAACwC,IAAI,CAACU,mBAAmB;EACxC;EAEA,IAAI,CAAC,CAAC,EAAEhD,WAAW,CAACyD,iBAAiB,EAAEN,IAAI,CAAC,EAAE;IAC5C,OAAOrD,MAAM,CAACwC,IAAI,CAACY,2BAA2B;EAChD;EACA;EACA;;EAEA,KAAK,IACH,CAAC,CAAC,EAAEvD,UAAU,CAAC+D,SAAS,EACtB,KAAK,EACL,mBAAmB,GAAG,CAAC,CAAC,EAAEhE,QAAQ,CAACiE,OAAO,EAAER,IAAI,CAAC,CAClD;AACL;AAEA,SAASvB,uBAAuB,CAACH,IAAI,EAAE;EACrC,QAAQA,IAAI;IACV,KAAK3B,MAAM,CAACwC,IAAI,CAACE,qBAAqB;MACpC,OAAO,QAAQ;IAEjB,KAAK1C,MAAM,CAACwC,IAAI,CAACI,qBAAqB;MACpC,OAAO,QAAQ;IAEjB,KAAK5C,MAAM,CAACwC,IAAI,CAACM,wBAAwB;MACvC,OAAO,WAAW;IAEpB,KAAK9C,MAAM,CAACwC,IAAI,CAACQ,oBAAoB;MACnC,OAAO,OAAO;IAEhB,KAAKhD,MAAM,CAACwC,IAAI,CAACU,mBAAmB;MAClC,OAAO,MAAM;IAEf,KAAKlD,MAAM,CAACwC,IAAI,CAACY,2BAA2B;MAC1C,OAAO,cAAc;IACvB;;IAEA;;IAEA;MACE,KAAK,IACH,CAAC,CAAC,EAAEvD,UAAU,CAAC+D,SAAS,EACtB,KAAK,EACL,mBAAmB,GAAG,CAAC,CAAC,EAAEhE,QAAQ,CAACiE,OAAO,EAAElC,IAAI,CAAC,CAClD;EAAC;AAEV"},"metadata":{},"sourceType":"script","externalDependencies":[]}