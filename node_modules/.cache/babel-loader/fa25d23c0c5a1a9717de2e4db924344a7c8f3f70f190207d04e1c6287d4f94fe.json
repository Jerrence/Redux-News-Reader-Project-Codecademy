{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.astFromValue = astFromValue;\nvar _inspect = require('../jsutils/inspect.js');\nvar _invariant = require('../jsutils/invariant.js');\nvar _isIterableObject = require('../jsutils/isIterableObject.js');\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\nvar _kinds = require('../language/kinds.js');\nvar _definition = require('../type/definition.js');\nvar _scalars = require('../type/scalars.js');\n\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\nfunction astFromValue(value, type) {\n  if ((0, _definition.isNonNullType)(type)) {\n    const astValue = astFromValue(value, type.ofType);\n    if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === _kinds.Kind.NULL) {\n      return null;\n    }\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: _kinds.Kind.NULL\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if ((0, _definition.isListType)(type)) {\n    const itemType = type.ofType;\n    if ((0, _isIterableObject.isIterableObject)(value)) {\n      const valuesNodes = [];\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n      return {\n        kind: _kinds.Kind.LIST,\n        values: valuesNodes\n      };\n    }\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (!(0, _isObjectLike.isObjectLike)(value)) {\n      return null;\n    }\n    const fieldNodes = [];\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: _kinds.Kind.OBJECT_FIELD,\n          name: {\n            kind: _kinds.Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    }\n    return {\n      kind: _kinds.Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n  if ((0, _definition.isLeafType)(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: _kinds.Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: _kinds.Kind.INT,\n        value: stringNum\n      } : {\n        kind: _kinds.Kind.FLOAT,\n        value: stringNum\n      };\n    }\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if ((0, _definition.isEnumType)(type)) {\n        return {\n          kind: _kinds.Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n      if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: _kinds.Kind.INT,\n          value: serialized\n        };\n      }\n      return {\n        kind: _kinds.Kind.STRING,\n        value: serialized\n      };\n    }\n    throw new TypeError(`Cannot convert value to AST: ${(0, _inspect.inspect)(serialized)}.`);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || (0, _invariant.invariant)(false, 'Unexpected input type: ' + (0, _inspect.inspect)(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;","map":{"version":3,"names":["Object","defineProperty","exports","value","astFromValue","_inspect","require","_invariant","_isIterableObject","_isObjectLike","_kinds","_definition","_scalars","type","isNonNullType","astValue","ofType","kind","Kind","NULL","undefined","isListType","itemType","isIterableObject","valuesNodes","item","itemNode","push","LIST","values","isInputObjectType","isObjectLike","fieldNodes","field","getFields","fieldValue","name","OBJECT_FIELD","NAME","OBJECT","fields","isLeafType","serialized","serialize","BOOLEAN","Number","isFinite","stringNum","String","integerStringRegExp","test","INT","FLOAT","isEnumType","ENUM","GraphQLID","STRING","TypeError","inspect","invariant"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/utilities/astFromValue.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.astFromValue = astFromValue;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _isIterableObject = require('../jsutils/isIterableObject.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _definition = require('../type/definition.js');\n\nvar _scalars = require('../type/scalars.js');\n\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\nfunction astFromValue(value, type) {\n  if ((0, _definition.isNonNullType)(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (\n      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===\n      _kinds.Kind.NULL\n    ) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: _kinds.Kind.NULL,\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if ((0, _definition.isListType)(type)) {\n    const itemType = type.ofType;\n\n    if ((0, _isIterableObject.isIterableObject)(value)) {\n      const valuesNodes = [];\n\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: _kinds.Kind.LIST,\n        values: valuesNodes,\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (!(0, _isObjectLike.isObjectLike)(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: _kinds.Kind.OBJECT_FIELD,\n          name: {\n            kind: _kinds.Kind.NAME,\n            value: field.name,\n          },\n          value: fieldValue,\n        });\n      }\n    }\n\n    return {\n      kind: _kinds.Kind.OBJECT,\n      fields: fieldNodes,\n    };\n  }\n\n  if ((0, _definition.isLeafType)(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: _kinds.Kind.BOOLEAN,\n        value: serialized,\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum)\n        ? {\n            kind: _kinds.Kind.INT,\n            value: stringNum,\n          }\n        : {\n            kind: _kinds.Kind.FLOAT,\n            value: stringNum,\n          };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if ((0, _definition.isEnumType)(type)) {\n        return {\n          kind: _kinds.Kind.ENUM,\n          value: serialized,\n        };\n      } // ID types can use Int literals.\n\n      if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: _kinds.Kind.INT,\n          value: serialized,\n        };\n      }\n\n      return {\n        kind: _kinds.Kind.STRING,\n        value: serialized,\n      };\n    }\n\n    throw new TypeError(\n      `Cannot convert value to AST: ${(0, _inspect.inspect)(serialized)}.`,\n    );\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected input type: ' + (0, _inspect.inspect)(type),\n    );\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}