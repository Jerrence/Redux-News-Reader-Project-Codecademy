{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueTypeNamesRule = UniqueTypeNamesRule;\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nfunction UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(new _GraphQLError.GraphQLError(`Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`, {\n        nodes: node.name\n      }));\n      return;\n    }\n    if (knownTypeNames[typeName]) {\n      context.reportError(new _GraphQLError.GraphQLError(`There can be only one type named \"${typeName}\".`, {\n        nodes: [knownTypeNames[typeName], node.name]\n      }));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","UniqueTypeNamesRule","_GraphQLError","require","context","knownTypeNames","create","schema","getSchema","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","node","typeName","name","getType","reportError","GraphQLError","nodes"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/UniqueTypeNamesRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueTypeNamesRule = UniqueTypeNamesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nfunction UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName,\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`,\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `There can be only one type named \"${typeName}\".`,\n          {\n            nodes: [knownTypeNames[typeName], node.name],\n          },\n        ),\n      );\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB;AAEjD,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAA6B,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA,SAASF,mBAAmB,CAACG,OAAO,EAAE;EACpC,MAAMC,cAAc,GAAGR,MAAM,CAACS,MAAM,CAAC,IAAI,CAAC;EAC1C,MAAMC,MAAM,GAAGH,OAAO,CAACI,SAAS,EAAE;EAClC,OAAO;IACLC,oBAAoB,EAAEC,aAAa;IACnCC,oBAAoB,EAAED,aAAa;IACnCE,uBAAuB,EAAEF,aAAa;IACtCG,mBAAmB,EAAEH,aAAa;IAClCI,kBAAkB,EAAEJ,aAAa;IACjCK,yBAAyB,EAAEL;EAC7B,CAAC;EAED,SAASA,aAAa,CAACM,IAAI,EAAE;IAC3B,MAAMC,QAAQ,GAAGD,IAAI,CAACE,IAAI,CAAClB,KAAK;IAEhC,IAAIO,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,IAAIA,MAAM,CAACY,OAAO,CAACF,QAAQ,CAAC,EAAE;MACpEb,OAAO,CAACgB,WAAW,CACjB,IAAIlB,aAAa,CAACmB,YAAY,CAC3B,SAAQJ,QAAS,oFAAmF,EACrG;QACEK,KAAK,EAAEN,IAAI,CAACE;MACd,CAAC,CACF,CACF;MACD;IACF;IAEA,IAAIb,cAAc,CAACY,QAAQ,CAAC,EAAE;MAC5Bb,OAAO,CAACgB,WAAW,CACjB,IAAIlB,aAAa,CAACmB,YAAY,CAC3B,qCAAoCJ,QAAS,IAAG,EACjD;QACEK,KAAK,EAAE,CAACjB,cAAc,CAACY,QAAQ,CAAC,EAAED,IAAI,CAACE,IAAI;MAC7C,CAAC,CACF,CACF;IACH,CAAC,MAAM;MACLb,cAAc,CAACY,QAAQ,CAAC,GAAGD,IAAI,CAACE,IAAI;IACtC;IAEA,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}