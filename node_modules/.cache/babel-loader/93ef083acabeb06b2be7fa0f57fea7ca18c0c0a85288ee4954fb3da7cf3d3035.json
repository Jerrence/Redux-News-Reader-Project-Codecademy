{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.lexicographicSortSchema = lexicographicSortSchema;\nvar _inspect = require('../jsutils/inspect.js');\nvar _invariant = require('../jsutils/invariant.js');\nvar _keyValMap = require('../jsutils/keyValMap.js');\nvar _naturalCompare = require('../jsutils/naturalCompare.js');\nvar _definition = require('../type/definition.js');\nvar _directives = require('../type/directives.js');\nvar _introspection = require('../type/introspection.js');\nvar _schema = require('../type/schema.js');\n\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\nfunction lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = (0, _keyValMap.keyValMap)(sortByName(schemaConfig.types), type => type.name, sortNamedType);\n  return new _schema.GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription)\n  });\n  function replaceType(type) {\n    if ((0, _definition.isListType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLList(replaceType(type.ofType));\n    } else if ((0, _definition.isNonNullType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new _directives.GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, x => x),\n      args: sortArgs(config.args)\n    });\n  }\n  function sortArgs(args) {\n    return sortObjMap(args, arg => ({\n      ...arg,\n      type: replaceType(arg.type)\n    }));\n  }\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, field => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args)\n    }));\n  }\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, field => ({\n      ...field,\n      type: replaceType(field.type)\n    }));\n  }\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n  function sortNamedType(type) {\n    if ((0, _definition.isScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {\n      return type;\n    }\n    if ((0, _definition.isObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields)\n      });\n    }\n    if ((0, _definition.isInterfaceType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields)\n      });\n    }\n    if ((0, _definition.isUnionType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types)\n      });\n    }\n    if ((0, _definition.isEnumType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, value => value)\n      });\n    }\n    if ((0, _definition.isInputObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields)\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n    false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));\n  }\n}\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n  for (const key of Object.keys(map).sort(_naturalCompare.naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n  return sortedMap;\n}\nfunction sortByName(array) {\n  return sortBy(array, obj => obj.name);\n}\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return (0, _naturalCompare.naturalCompare)(key1, key2);\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","lexicographicSortSchema","_inspect","require","_invariant","_keyValMap","_naturalCompare","_definition","_directives","_introspection","_schema","schema","schemaConfig","toConfig","typeMap","keyValMap","sortByName","types","type","name","sortNamedType","GraphQLSchema","values","directives","map","sortDirective","query","replaceMaybeType","mutation","subscription","replaceType","isListType","GraphQLList","ofType","isNonNullType","GraphQLNonNull","replaceNamedType","maybeType","directive","config","GraphQLDirective","locations","sortBy","x","args","sortArgs","sortObjMap","arg","sortFields","fieldsMap","field","sortInputFields","sortTypes","array","isScalarType","isIntrospectionType","isObjectType","GraphQLObjectType","interfaces","fields","isInterfaceType","GraphQLInterfaceType","isUnionType","GraphQLUnionType","isEnumType","GraphQLEnumType","isInputObjectType","GraphQLInputObjectType","invariant","inspect","sortValueFn","sortedMap","create","key","keys","sort","naturalCompare","obj","mapToKey","slice","obj1","obj2","key1","key2"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/utilities/lexicographicSortSchema.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.lexicographicSortSchema = lexicographicSortSchema;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _keyValMap = require('../jsutils/keyValMap.js');\n\nvar _naturalCompare = require('../jsutils/naturalCompare.js');\n\nvar _definition = require('../type/definition.js');\n\nvar _directives = require('../type/directives.js');\n\nvar _introspection = require('../type/introspection.js');\n\nvar _schema = require('../type/schema.js');\n\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\nfunction lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = (0, _keyValMap.keyValMap)(\n    sortByName(schemaConfig.types),\n    (type) => type.name,\n    sortNamedType,\n  );\n  return new _schema.GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType(type) {\n    if ((0, _definition.isListType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLList(replaceType(type.ofType));\n    } else if ((0, _definition.isNonNullType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new _directives.GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (\n      (0, _definition.isScalarType)(type) ||\n      (0, _introspection.isIntrospectionType)(type)\n    ) {\n      return type;\n    }\n\n    if ((0, _definition.isObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if ((0, _definition.isInterfaceType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if ((0, _definition.isUnionType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n\n    if ((0, _definition.isEnumType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    }\n\n    if ((0, _definition.isInputObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n    false ||\n      (0, _invariant.invariant)(\n        false,\n        'Unexpected type: ' + (0, _inspect.inspect)(type),\n      );\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(_naturalCompare.naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return (0, _naturalCompare.naturalCompare)(key1, key2);\n  });\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB;AAEzD,IAAIC,QAAQ,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAE/C,IAAIC,UAAU,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAEnD,IAAIE,UAAU,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AAEnD,IAAIG,eAAe,GAAGH,OAAO,CAAC,8BAA8B,CAAC;AAE7D,IAAII,WAAW,GAAGJ,OAAO,CAAC,uBAAuB,CAAC;AAElD,IAAIK,WAAW,GAAGL,OAAO,CAAC,uBAAuB,CAAC;AAElD,IAAIM,cAAc,GAAGN,OAAO,CAAC,0BAA0B,CAAC;AAExD,IAAIO,OAAO,GAAGP,OAAO,CAAC,mBAAmB,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA,SAASF,uBAAuB,CAACU,MAAM,EAAE;EACvC,MAAMC,YAAY,GAAGD,MAAM,CAACE,QAAQ,EAAE;EACtC,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAET,UAAU,CAACU,SAAS,EACtCC,UAAU,CAACJ,YAAY,CAACK,KAAK,CAAC,EAC7BC,IAAI,IAAKA,IAAI,CAACC,IAAI,EACnBC,aAAa,CACd;EACD,OAAO,IAAIV,OAAO,CAACW,aAAa,CAAC;IAC/B,GAAGT,YAAY;IACfK,KAAK,EAAEpB,MAAM,CAACyB,MAAM,CAACR,OAAO,CAAC;IAC7BS,UAAU,EAAEP,UAAU,CAACJ,YAAY,CAACW,UAAU,CAAC,CAACC,GAAG,CAACC,aAAa,CAAC;IAClEC,KAAK,EAAEC,gBAAgB,CAACf,YAAY,CAACc,KAAK,CAAC;IAC3CE,QAAQ,EAAED,gBAAgB,CAACf,YAAY,CAACgB,QAAQ,CAAC;IACjDC,YAAY,EAAEF,gBAAgB,CAACf,YAAY,CAACiB,YAAY;EAC1D,CAAC,CAAC;EAEF,SAASC,WAAW,CAACZ,IAAI,EAAE;IACzB,IAAI,CAAC,CAAC,EAAEX,WAAW,CAACwB,UAAU,EAAEb,IAAI,CAAC,EAAE;MACrC;MACA,OAAO,IAAIX,WAAW,CAACyB,WAAW,CAACF,WAAW,CAACZ,IAAI,CAACe,MAAM,CAAC,CAAC;IAC9D,CAAC,MAAM,IAAI,CAAC,CAAC,EAAE1B,WAAW,CAAC2B,aAAa,EAAEhB,IAAI,CAAC,EAAE;MAC/C;MACA,OAAO,IAAIX,WAAW,CAAC4B,cAAc,CAACL,WAAW,CAACZ,IAAI,CAACe,MAAM,CAAC,CAAC;IACjE,CAAC,CAAC;;IAEF,OAAOG,gBAAgB,CAAClB,IAAI,CAAC;EAC/B;EAEA,SAASkB,gBAAgB,CAAClB,IAAI,EAAE;IAC9B,OAAOJ,OAAO,CAACI,IAAI,CAACC,IAAI,CAAC;EAC3B;EAEA,SAASQ,gBAAgB,CAACU,SAAS,EAAE;IACnC,OAAOA,SAAS,IAAID,gBAAgB,CAACC,SAAS,CAAC;EACjD;EAEA,SAASZ,aAAa,CAACa,SAAS,EAAE;IAChC,MAAMC,MAAM,GAAGD,SAAS,CAACzB,QAAQ,EAAE;IACnC,OAAO,IAAIL,WAAW,CAACgC,gBAAgB,CAAC;MACtC,GAAGD,MAAM;MACTE,SAAS,EAAEC,MAAM,CAACH,MAAM,CAACE,SAAS,EAAGE,CAAC,IAAKA,CAAC,CAAC;MAC7CC,IAAI,EAAEC,QAAQ,CAACN,MAAM,CAACK,IAAI;IAC5B,CAAC,CAAC;EACJ;EAEA,SAASC,QAAQ,CAACD,IAAI,EAAE;IACtB,OAAOE,UAAU,CAACF,IAAI,EAAGG,GAAG,KAAM;MAAE,GAAGA,GAAG;MAAE7B,IAAI,EAAEY,WAAW,CAACiB,GAAG,CAAC7B,IAAI;IAAE,CAAC,CAAC,CAAC;EAC7E;EAEA,SAAS8B,UAAU,CAACC,SAAS,EAAE;IAC7B,OAAOH,UAAU,CAACG,SAAS,EAAGC,KAAK,KAAM;MACvC,GAAGA,KAAK;MACRhC,IAAI,EAAEY,WAAW,CAACoB,KAAK,CAAChC,IAAI,CAAC;MAC7B0B,IAAI,EAAEM,KAAK,CAACN,IAAI,IAAIC,QAAQ,CAACK,KAAK,CAACN,IAAI;IACzC,CAAC,CAAC,CAAC;EACL;EAEA,SAASO,eAAe,CAACF,SAAS,EAAE;IAClC,OAAOH,UAAU,CAACG,SAAS,EAAGC,KAAK,KAAM;MACvC,GAAGA,KAAK;MACRhC,IAAI,EAAEY,WAAW,CAACoB,KAAK,CAAChC,IAAI;IAC9B,CAAC,CAAC,CAAC;EACL;EAEA,SAASkC,SAAS,CAACC,KAAK,EAAE;IACxB,OAAOrC,UAAU,CAACqC,KAAK,CAAC,CAAC7B,GAAG,CAACY,gBAAgB,CAAC;EAChD;EAEA,SAAShB,aAAa,CAACF,IAAI,EAAE;IAC3B,IACE,CAAC,CAAC,EAAEX,WAAW,CAAC+C,YAAY,EAAEpC,IAAI,CAAC,IACnC,CAAC,CAAC,EAAET,cAAc,CAAC8C,mBAAmB,EAAErC,IAAI,CAAC,EAC7C;MACA,OAAOA,IAAI;IACb;IAEA,IAAI,CAAC,CAAC,EAAEX,WAAW,CAACiD,YAAY,EAAEtC,IAAI,CAAC,EAAE;MACvC,MAAMqB,MAAM,GAAGrB,IAAI,CAACL,QAAQ,EAAE;MAC9B,OAAO,IAAIN,WAAW,CAACkD,iBAAiB,CAAC;QACvC,GAAGlB,MAAM;QACTmB,UAAU,EAAE,MAAMN,SAAS,CAACb,MAAM,CAACmB,UAAU,CAAC;QAC9CC,MAAM,EAAE,MAAMX,UAAU,CAACT,MAAM,CAACoB,MAAM;MACxC,CAAC,CAAC;IACJ;IAEA,IAAI,CAAC,CAAC,EAAEpD,WAAW,CAACqD,eAAe,EAAE1C,IAAI,CAAC,EAAE;MAC1C,MAAMqB,MAAM,GAAGrB,IAAI,CAACL,QAAQ,EAAE;MAC9B,OAAO,IAAIN,WAAW,CAACsD,oBAAoB,CAAC;QAC1C,GAAGtB,MAAM;QACTmB,UAAU,EAAE,MAAMN,SAAS,CAACb,MAAM,CAACmB,UAAU,CAAC;QAC9CC,MAAM,EAAE,MAAMX,UAAU,CAACT,MAAM,CAACoB,MAAM;MACxC,CAAC,CAAC;IACJ;IAEA,IAAI,CAAC,CAAC,EAAEpD,WAAW,CAACuD,WAAW,EAAE5C,IAAI,CAAC,EAAE;MACtC,MAAMqB,MAAM,GAAGrB,IAAI,CAACL,QAAQ,EAAE;MAC9B,OAAO,IAAIN,WAAW,CAACwD,gBAAgB,CAAC;QACtC,GAAGxB,MAAM;QACTtB,KAAK,EAAE,MAAMmC,SAAS,CAACb,MAAM,CAACtB,KAAK;MACrC,CAAC,CAAC;IACJ;IAEA,IAAI,CAAC,CAAC,EAAEV,WAAW,CAACyD,UAAU,EAAE9C,IAAI,CAAC,EAAE;MACrC,MAAMqB,MAAM,GAAGrB,IAAI,CAACL,QAAQ,EAAE;MAC9B,OAAO,IAAIN,WAAW,CAAC0D,eAAe,CAAC;QACrC,GAAG1B,MAAM;QACTjB,MAAM,EAAEwB,UAAU,CAACP,MAAM,CAACjB,MAAM,EAAGtB,KAAK,IAAKA,KAAK;MACpD,CAAC,CAAC;IACJ;IAEA,IAAI,CAAC,CAAC,EAAEO,WAAW,CAAC2D,iBAAiB,EAAEhD,IAAI,CAAC,EAAE;MAC5C,MAAMqB,MAAM,GAAGrB,IAAI,CAACL,QAAQ,EAAE;MAC9B,OAAO,IAAIN,WAAW,CAAC4D,sBAAsB,CAAC;QAC5C,GAAG5B,MAAM;QACToB,MAAM,EAAE,MAAMR,eAAe,CAACZ,MAAM,CAACoB,MAAM;MAC7C,CAAC,CAAC;IACJ;IACA;IACA;;IAEA,KAAK,IACH,CAAC,CAAC,EAAEvD,UAAU,CAACgE,SAAS,EACtB,KAAK,EACL,mBAAmB,GAAG,CAAC,CAAC,EAAElE,QAAQ,CAACmE,OAAO,EAAEnD,IAAI,CAAC,CAClD;EACL;AACF;AAEA,SAAS4B,UAAU,CAACtB,GAAG,EAAE8C,WAAW,EAAE;EACpC,MAAMC,SAAS,GAAG1E,MAAM,CAAC2E,MAAM,CAAC,IAAI,CAAC;EAErC,KAAK,MAAMC,GAAG,IAAI5E,MAAM,CAAC6E,IAAI,CAAClD,GAAG,CAAC,CAACmD,IAAI,CAACrE,eAAe,CAACsE,cAAc,CAAC,EAAE;IACvEL,SAAS,CAACE,GAAG,CAAC,GAAGH,WAAW,CAAC9C,GAAG,CAACiD,GAAG,CAAC,CAAC;EACxC;EAEA,OAAOF,SAAS;AAClB;AAEA,SAASvD,UAAU,CAACqC,KAAK,EAAE;EACzB,OAAOX,MAAM,CAACW,KAAK,EAAGwB,GAAG,IAAKA,GAAG,CAAC1D,IAAI,CAAC;AACzC;AAEA,SAASuB,MAAM,CAACW,KAAK,EAAEyB,QAAQ,EAAE;EAC/B,OAAOzB,KAAK,CAAC0B,KAAK,EAAE,CAACJ,IAAI,CAAC,CAACK,IAAI,EAAEC,IAAI,KAAK;IACxC,MAAMC,IAAI,GAAGJ,QAAQ,CAACE,IAAI,CAAC;IAC3B,MAAMG,IAAI,GAAGL,QAAQ,CAACG,IAAI,CAAC;IAC3B,OAAO,CAAC,CAAC,EAAE3E,eAAe,CAACsE,cAAc,EAAEM,IAAI,EAAEC,IAAI,CAAC;EACxD,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}