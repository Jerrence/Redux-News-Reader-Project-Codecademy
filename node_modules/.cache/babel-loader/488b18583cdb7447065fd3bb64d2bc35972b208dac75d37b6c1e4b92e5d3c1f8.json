{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueArgumentDefinitionNamesRule = UniqueArgumentDefinitionNamesRule;\nvar _groupBy = require('../../jsutils/groupBy.js');\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nfunction UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField\n  };\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n    return false;\n  }\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = (0, _groupBy.groupBy)(argumentNodes, arg => arg.name.value);\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(new _GraphQLError.GraphQLError(`Argument \"${parentName}(${argName}:)\" can only be defined once.`, {\n          nodes: argNodes.map(node => node.name)\n        }));\n      }\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","UniqueArgumentDefinitionNamesRule","_groupBy","require","_GraphQLError","context","DirectiveDefinition","directiveNode","_directiveNode$argume","argumentNodes","arguments","checkArgUniqueness","name","InterfaceTypeDefinition","checkArgUniquenessPerField","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","typeNode","_typeNode$fields","typeName","fieldNodes","fields","fieldDef","_fieldDef$arguments","fieldName","parentName","seenArgs","groupBy","arg","argName","argNodes","length","reportError","GraphQLError","nodes","map","node"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueArgumentDefinitionNamesRule = UniqueArgumentDefinitionNamesRule;\n\nvar _groupBy = require('../../jsutils/groupBy.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nfunction UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = (0, _groupBy.groupBy)(\n      argumentNodes,\n      (arg) => arg.name.value,\n    );\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,iCAAiC,GAAGA,iCAAiC;AAE7E,IAAIC,QAAQ,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AAElD,IAAIC,aAAa,GAAGD,OAAO,CAAC,6BAA6B,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,iCAAiC,CAACI,OAAO,EAAE;EAClD,OAAO;IACLC,mBAAmB,CAACC,aAAa,EAAE;MACjC,IAAIC,qBAAqB;;MAEzB;;MAEA;MACA,MAAMC,aAAa,GACjB,CAACD,qBAAqB,GAAGD,aAAa,CAACG,SAAS,MAAM,IAAI,IAC1DF,qBAAqB,KAAK,KAAK,CAAC,GAC5BA,qBAAqB,GACrB,EAAE;MACR,OAAOG,kBAAkB,CAAE,IAAGJ,aAAa,CAACK,IAAI,CAACZ,KAAM,EAAC,EAAES,aAAa,CAAC;IAC1E,CAAC;IAEDI,uBAAuB,EAAEC,0BAA0B;IACnDC,sBAAsB,EAAED,0BAA0B;IAClDE,oBAAoB,EAAEF,0BAA0B;IAChDG,mBAAmB,EAAEH;EACvB,CAAC;EAED,SAASA,0BAA0B,CAACI,QAAQ,EAAE;IAC5C,IAAIC,gBAAgB;IAEpB,MAAMC,QAAQ,GAAGF,QAAQ,CAACN,IAAI,CAACZ,KAAK,CAAC,CAAC;;IAEtC;;IAEA,MAAMqB,UAAU,GACd,CAACF,gBAAgB,GAAGD,QAAQ,CAACI,MAAM,MAAM,IAAI,IAC7CH,gBAAgB,KAAK,KAAK,CAAC,GACvBA,gBAAgB,GAChB,EAAE;IAER,KAAK,MAAMI,QAAQ,IAAIF,UAAU,EAAE;MACjC,IAAIG,mBAAmB;MAEvB,MAAMC,SAAS,GAAGF,QAAQ,CAACX,IAAI,CAACZ,KAAK,CAAC,CAAC;;MAEvC;;MAEA,MAAMS,aAAa,GACjB,CAACe,mBAAmB,GAAGD,QAAQ,CAACb,SAAS,MAAM,IAAI,IACnDc,mBAAmB,KAAK,KAAK,CAAC,GAC1BA,mBAAmB,GACnB,EAAE;MACRb,kBAAkB,CAAE,GAAES,QAAS,IAAGK,SAAU,EAAC,EAAEhB,aAAa,CAAC;IAC/D;IAEA,OAAO,KAAK;EACd;EAEA,SAASE,kBAAkB,CAACe,UAAU,EAAEjB,aAAa,EAAE;IACrD,MAAMkB,QAAQ,GAAG,CAAC,CAAC,EAAEzB,QAAQ,CAAC0B,OAAO,EACnCnB,aAAa,EACZoB,GAAG,IAAKA,GAAG,CAACjB,IAAI,CAACZ,KAAK,CACxB;IAED,KAAK,MAAM,CAAC8B,OAAO,EAAEC,QAAQ,CAAC,IAAIJ,QAAQ,EAAE;MAC1C,IAAII,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;QACvB3B,OAAO,CAAC4B,WAAW,CACjB,IAAI7B,aAAa,CAAC8B,YAAY,CAC3B,aAAYR,UAAW,IAAGI,OAAQ,+BAA8B,EACjE;UACEK,KAAK,EAAEJ,QAAQ,CAACK,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACzB,IAAI;QACzC,CAAC,CACF,CACF;MACH;IACF;IAEA,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}