{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.Parser = void 0;\nexports.parse = parse;\nexports.parseConstValue = parseConstValue;\nexports.parseType = parseType;\nexports.parseValue = parseValue;\nvar _syntaxError = require('../error/syntaxError.js');\nvar _ast = require('./ast.js');\nvar _directiveLocation = require('./directiveLocation.js');\nvar _kinds = require('./kinds.js');\nvar _lexer = require('./lexer.js');\nvar _source = require('./source.js');\nvar _tokenKind = require('./tokenKind.js');\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nfunction parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nfunction parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind.TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(_tokenKind.TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nfunction parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind.TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(_tokenKind.TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nfunction parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind.TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(_tokenKind.TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nclass Parser {\n  constructor(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);\n    this._lexer = new _lexer.Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(_tokenKind.TokenKind.NAME);\n    return this.node(token, {\n      kind: _kinds.Kind.NAME,\n      value: token.value\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.DOCUMENT,\n      definitions: this.many(_tokenKind.TokenKind.SOF, this.parseDefinition, _tokenKind.TokenKind.EOF)\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(_tokenKind.TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;\n    if (keywordToken.kind === _tokenKind.TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n        case 'type':\n          return this.parseObjectTypeDefinition();\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n        case 'union':\n          return this.parseUnionTypeDefinition();\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n      if (hasDescription) {\n        throw (0, _syntaxError.syntaxError)(this._lexer.source, this._lexer.token.start, 'Unexpected description, descriptions are supported only on type definitions.');\n      }\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n        case 'fragment':\n          return this.parseFragmentDefinition();\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n    if (this.peek(_tokenKind.TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: _kinds.Kind.OPERATION_DEFINITION,\n        operation: _ast.OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    const operation = this.parseOperationType();\n    let name;\n    if (this.peek(_tokenKind.TokenKind.NAME)) {\n      name = this.parseName();\n    }\n    return this.node(start, {\n      kind: _kinds.Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet()\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(_tokenKind.TokenKind.NAME);\n    switch (operationToken.value) {\n      case 'query':\n        return _ast.OperationTypeNode.QUERY;\n      case 'mutation':\n        return _ast.OperationTypeNode.MUTATION;\n      case 'subscription':\n        return _ast.OperationTypeNode.SUBSCRIPTION;\n    }\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKind.TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.parseConstValueLiteral() : undefined,\n      directives: this.parseConstDirectives()\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind.TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: _kinds.Kind.VARIABLE,\n      name: this.parseName()\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.SELECTION_SET,\n      selections: this.many(_tokenKind.TokenKind.BRACE_L, this.parseSelection, _tokenKind.TokenKind.BRACE_R)\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(_tokenKind.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n    if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n    return this.node(start, {\n      kind: _kinds.Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(_tokenKind.TokenKind.PAREN_L, item, _tokenKind.TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument() {\n    let isConst = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    return this.node(start, {\n      kind: _kinds.Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst)\n    });\n  }\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind.TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n    if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {\n      return this.node(start, {\n        kind: _kinds.Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false)\n      });\n    }\n    return this.node(start, {\n      kind: _kinds.Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet()\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: _kinds.Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    return this.node(start, {\n      kind: _kinds.Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet()\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n    switch (token.kind) {\n      case _tokenKind.TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n      case _tokenKind.TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n      case _tokenKind.TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: _kinds.Kind.INT,\n          value: token.value\n        });\n      case _tokenKind.TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: _kinds.Kind.FLOAT,\n          value: token.value\n        });\n      case _tokenKind.TokenKind.STRING:\n      case _tokenKind.TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n      case _tokenKind.TokenKind.NAME:\n        this.advanceLexer();\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: _kinds.Kind.BOOLEAN,\n              value: true\n            });\n          case 'false':\n            return this.node(token, {\n              kind: _kinds.Kind.BOOLEAN,\n              value: false\n            });\n          case 'null':\n            return this.node(token, {\n              kind: _kinds.Kind.NULL\n            });\n          default:\n            return this.node(token, {\n              kind: _kinds.Kind.ENUM,\n              value: token.value\n            });\n        }\n      case _tokenKind.TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(_tokenKind.TokenKind.DOLLAR);\n          if (this._lexer.token.kind === _tokenKind.TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Unexpected variable \"$${varName}\" in constant value.`);\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n        return this.parseVariable();\n      default:\n        throw this.unexpected();\n    }\n  }\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: _kinds.Kind.STRING,\n      value: token.value,\n      block: token.kind === _tokenKind.TokenKind.BLOCK_STRING\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.LIST,\n      values: this.any(_tokenKind.TokenKind.BRACKET_L, item, _tokenKind.TokenKind.BRACKET_R)\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.OBJECT,\n      fields: this.any(_tokenKind.TokenKind.BRACE_L, item, _tokenKind.TokenKind.BRACE_R)\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    return this.node(start, {\n      kind: _kinds.Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst)\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n    while (this.peek(_tokenKind.TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n    return directives;\n  }\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind.TokenKind.AT);\n    return this.node(start, {\n      kind: _kinds.Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst)\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n    if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(_tokenKind.TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: _kinds.Kind.LIST_TYPE,\n        type: innerType\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n    if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {\n      return this.node(start, {\n        kind: _kinds.Kind.NON_NULL_TYPE,\n        type\n      });\n    }\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.NAMED_TYPE,\n      name: this.parseName()\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(_tokenKind.TokenKind.STRING) || this.peek(_tokenKind.TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);\n    return this.node(start, {\n      kind: _kinds.Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements') ? this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType) : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKind.TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKind.TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n    if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: _kinds.Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType) : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKind.TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (this._lexer.token.value === 'true' || this._lexer.token.value === 'false' || this._lexer.token.value === 'null') {\n      throw (0, _syntaxError.syntaxError)(this._lexer.source, this._lexer.token.start, `${getTokenDesc(this._lexer.token)} is reserved and cannot be used for an enum value.`);\n    }\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKind.TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n    if (keywordToken.kind === _tokenKind.TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n        case 'type':\n          return this.parseObjectTypeExtension();\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n        case 'union':\n          return this.parseUnionTypeExtension();\n        case 'enum':\n          return this.parseEnumTypeExtension();\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: _kinds.Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: _kinds.Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: _kinds.Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(_tokenKind.TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: _kinds.Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    if (Object.prototype.hasOwnProperty.call(_directiveLocation.DirectiveLocation, name.value)) {\n      return name;\n    }\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new _ast.Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n    throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`);\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n    if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Expected \"${value}\", found ${getTokenDesc(token)}.`);\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n    if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Unexpected ${getTokenDesc(token)}.`);\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n      return nodes;\n    }\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n    return nodes;\n  }\n  advanceLexer() {\n    const {\n      maxTokens\n    } = this._options;\n    const token = this._lexer.advance();\n    if (maxTokens !== undefined && token.kind !== _tokenKind.TokenKind.EOF) {\n      ++this._tokenCounter;\n      if (this._tokenCounter > maxTokens) {\n        throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Document contains more that ${maxTokens} tokens. Parsing aborted.`);\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nexports.Parser = Parser;\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return (0, _lexer.isPunctuatorTokenKind)(kind) ? `\"${kind}\"` : kind;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Parser","parse","parseConstValue","parseType","parseValue","_syntaxError","require","_ast","_directiveLocation","_kinds","_lexer","_source","_tokenKind","source","options","parser","parseDocument","expectToken","TokenKind","SOF","parseValueLiteral","EOF","parseConstValueLiteral","type","parseTypeReference","constructor","sourceObj","isSource","Source","Lexer","_options","_tokenCounter","parseName","token","NAME","node","kind","Kind","DOCUMENT","definitions","many","parseDefinition","peek","BRACE_L","parseOperationDefinition","hasDescription","peekDescription","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","syntaxError","start","parseFragmentDefinition","parseTypeSystemExtension","unexpected","OPERATION_DEFINITION","operation","OperationTypeNode","QUERY","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","MUTATION","SUBSCRIPTION","optionalMany","PAREN_L","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","expectOptionalToken","EQUALS","parseConstDirectives","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","expectKeyword","allowLegacyFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","advanceLexer","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","varName","block","LIST","values","any","BRACKET_R","parseObjectField","OBJECT","fields","OBJECT_FIELD","AT","push","parseDirective","DIRECTIVE","innerType","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","parseDescription","description","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","delimitedMany","AMP","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","types","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","parseEnumValueName","ENUM_VALUE_DEFINITION","getTokenDesc","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","prototype","hasOwnProperty","call","DirectiveLocation","startToken","noLocation","loc","Location","lastToken","getTokenKindDesc","atToken","openKind","parseFn","closeKind","nodes","delimiterKind","maxTokens","advance","isPunctuatorTokenKind"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/language/parser.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.Parser = void 0;\nexports.parse = parse;\nexports.parseConstValue = parseConstValue;\nexports.parseType = parseType;\nexports.parseValue = parseValue;\n\nvar _syntaxError = require('../error/syntaxError.js');\n\nvar _ast = require('./ast.js');\n\nvar _directiveLocation = require('./directiveLocation.js');\n\nvar _kinds = require('./kinds.js');\n\nvar _lexer = require('./lexer.js');\n\nvar _source = require('./source.js');\n\nvar _tokenKind = require('./tokenKind.js');\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nfunction parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nfunction parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind.TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(_tokenKind.TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nfunction parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind.TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(_tokenKind.TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nfunction parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind.TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(_tokenKind.TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nclass Parser {\n  constructor(source, options = {}) {\n    const sourceObj = (0, _source.isSource)(source)\n      ? source\n      : new _source.Source(source);\n    this._lexer = new _lexer.Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(_tokenKind.TokenKind.NAME);\n    return this.node(token, {\n      kind: _kinds.Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.DOCUMENT,\n      definitions: this.many(\n        _tokenKind.TokenKind.SOF,\n        this.parseDefinition,\n        _tokenKind.TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(_tokenKind.TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === _tokenKind.TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw (0, _syntaxError.syntaxError)(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(_tokenKind.TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: _kinds.Kind.OPERATION_DEFINITION,\n        operation: _ast.OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(_tokenKind.TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(_tokenKind.TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return _ast.OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return _ast.OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return _ast.OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      _tokenKind.TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      _tokenKind.TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type:\n        (this.expectToken(_tokenKind.TokenKind.COLON),\n        this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind.TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: _kinds.Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.SELECTION_SET,\n      selections: this.many(\n        _tokenKind.TokenKind.BRACE_L,\n        this.parseSelection,\n        _tokenKind.TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(_tokenKind.TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(\n      _tokenKind.TokenKind.PAREN_L,\n      item,\n      _tokenKind.TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    return this.node(start, {\n      kind: _kinds.Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind.TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {\n      return this.node(start, {\n        kind: _kinds.Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: _kinds.Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case _tokenKind.TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case _tokenKind.TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case _tokenKind.TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: _kinds.Kind.INT,\n          value: token.value,\n        });\n\n      case _tokenKind.TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: _kinds.Kind.FLOAT,\n          value: token.value,\n        });\n\n      case _tokenKind.TokenKind.STRING:\n      case _tokenKind.TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case _tokenKind.TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: _kinds.Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: _kinds.Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: _kinds.Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: _kinds.Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case _tokenKind.TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(_tokenKind.TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === _tokenKind.TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw (0, _syntaxError.syntaxError)(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: _kinds.Kind.STRING,\n      value: token.value,\n      block: token.kind === _tokenKind.TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.LIST,\n      values: this.any(\n        _tokenKind.TokenKind.BRACKET_L,\n        item,\n        _tokenKind.TokenKind.BRACKET_R,\n      ),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.OBJECT,\n      fields: this.any(\n        _tokenKind.TokenKind.BRACE_L,\n        item,\n        _tokenKind.TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    return this.node(start, {\n      kind: _kinds.Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(_tokenKind.TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind.TokenKind.AT);\n    return this.node(start, {\n      kind: _kinds.Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(_tokenKind.TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: _kinds.Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {\n      return this.node(start, {\n        kind: _kinds.Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: _kinds.Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return (\n      this.peek(_tokenKind.TokenKind.STRING) ||\n      this.peek(_tokenKind.TokenKind.BLOCK_STRING)\n    );\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      _tokenKind.TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      _tokenKind.TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: _kinds.Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      _tokenKind.TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      _tokenKind.TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      _tokenKind.TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      _tokenKind.TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(_tokenKind.TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: _kinds.Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)\n      ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      _tokenKind.TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      _tokenKind.TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds.Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw (0, _syntaxError.syntaxError)(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      _tokenKind.TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      _tokenKind.TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === _tokenKind.TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      _tokenKind.TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      _tokenKind.TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(_tokenKind.TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: _kinds.Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(\n      _tokenKind.TokenKind.PIPE,\n      this.parseDirectiveLocation,\n    );\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (\n      Object.prototype.hasOwnProperty.call(\n        _directiveLocation.DirectiveLocation,\n        name.value,\n      )\n    ) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new _ast.Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw (0, _syntaxError.syntaxError)(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw (0, _syntaxError.syntaxError)(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return (0, _syntaxError.syntaxError)(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== _tokenKind.TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw (0, _syntaxError.syntaxError)(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nexports.Parser = Parser;\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return (0, _lexer.isPunctuatorTokenKind)(kind) ? `\"${kind}\"` : kind;\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,MAAM,GAAG,KAAK,CAAC;AACvBF,OAAO,CAACG,KAAK,GAAGA,KAAK;AACrBH,OAAO,CAACI,eAAe,GAAGA,eAAe;AACzCJ,OAAO,CAACK,SAAS,GAAGA,SAAS;AAC7BL,OAAO,CAACM,UAAU,GAAGA,UAAU;AAE/B,IAAIC,YAAY,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAErD,IAAIC,IAAI,GAAGD,OAAO,CAAC,UAAU,CAAC;AAE9B,IAAIE,kBAAkB,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAE1D,IAAIG,MAAM,GAAGH,OAAO,CAAC,YAAY,CAAC;AAElC,IAAII,MAAM,GAAGJ,OAAO,CAAC,YAAY,CAAC;AAElC,IAAIK,OAAO,GAAGL,OAAO,CAAC,aAAa,CAAC;AAEpC,IAAIM,UAAU,GAAGN,OAAO,CAAC,gBAAgB,CAAC;;AAE1C;AACA;AACA;AACA;AACA,SAASL,KAAK,CAACY,MAAM,EAAEC,OAAO,EAAE;EAC9B,MAAMC,MAAM,GAAG,IAAIf,MAAM,CAACa,MAAM,EAAEC,OAAO,CAAC;EAC1C,OAAOC,MAAM,CAACC,aAAa,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASZ,UAAU,CAACS,MAAM,EAAEC,OAAO,EAAE;EACnC,MAAMC,MAAM,GAAG,IAAIf,MAAM,CAACa,MAAM,EAAEC,OAAO,CAAC;EAC1CC,MAAM,CAACE,WAAW,CAACL,UAAU,CAACM,SAAS,CAACC,GAAG,CAAC;EAC5C,MAAMpB,KAAK,GAAGgB,MAAM,CAACK,iBAAiB,CAAC,KAAK,CAAC;EAC7CL,MAAM,CAACE,WAAW,CAACL,UAAU,CAACM,SAAS,CAACG,GAAG,CAAC;EAC5C,OAAOtB,KAAK;AACd;AACA;AACA;AACA;AACA;;AAEA,SAASG,eAAe,CAACW,MAAM,EAAEC,OAAO,EAAE;EACxC,MAAMC,MAAM,GAAG,IAAIf,MAAM,CAACa,MAAM,EAAEC,OAAO,CAAC;EAC1CC,MAAM,CAACE,WAAW,CAACL,UAAU,CAACM,SAAS,CAACC,GAAG,CAAC;EAC5C,MAAMpB,KAAK,GAAGgB,MAAM,CAACO,sBAAsB,EAAE;EAC7CP,MAAM,CAACE,WAAW,CAACL,UAAU,CAACM,SAAS,CAACG,GAAG,CAAC;EAC5C,OAAOtB,KAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASI,SAAS,CAACU,MAAM,EAAEC,OAAO,EAAE;EAClC,MAAMC,MAAM,GAAG,IAAIf,MAAM,CAACa,MAAM,EAAEC,OAAO,CAAC;EAC1CC,MAAM,CAACE,WAAW,CAACL,UAAU,CAACM,SAAS,CAACC,GAAG,CAAC;EAC5C,MAAMI,IAAI,GAAGR,MAAM,CAACS,kBAAkB,EAAE;EACxCT,MAAM,CAACE,WAAW,CAACL,UAAU,CAACM,SAAS,CAACG,GAAG,CAAC;EAC5C,OAAOE,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMvB,MAAM,CAAC;EACXyB,WAAW,CAACZ,MAAM,EAAgB;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAC9B,MAAMY,SAAS,GAAG,CAAC,CAAC,EAAEf,OAAO,CAACgB,QAAQ,EAAEd,MAAM,CAAC,GAC3CA,MAAM,GACN,IAAIF,OAAO,CAACiB,MAAM,CAACf,MAAM,CAAC;IAC9B,IAAI,CAACH,MAAM,GAAG,IAAIA,MAAM,CAACmB,KAAK,CAACH,SAAS,CAAC;IACzC,IAAI,CAACI,QAAQ,GAAGhB,OAAO;IACvB,IAAI,CAACiB,aAAa,GAAG,CAAC;EACxB;EACA;AACF;AACA;;EAEEC,SAAS,GAAG;IACV,MAAMC,KAAK,GAAG,IAAI,CAAChB,WAAW,CAACL,UAAU,CAACM,SAAS,CAACgB,IAAI,CAAC;IACzD,OAAO,IAAI,CAACC,IAAI,CAACF,KAAK,EAAE;MACtBG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACH,IAAI;MACtBnC,KAAK,EAAEkC,KAAK,CAAClC;IACf,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;AACF;AACA;;EAEEiB,aAAa,GAAG;IACd,OAAO,IAAI,CAACmB,IAAI,CAAC,IAAI,CAACzB,MAAM,CAACuB,KAAK,EAAE;MAClCG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACC,QAAQ;MAC1BC,WAAW,EAAE,IAAI,CAACC,IAAI,CACpB5B,UAAU,CAACM,SAAS,CAACC,GAAG,EACxB,IAAI,CAACsB,eAAe,EACpB7B,UAAU,CAACM,SAAS,CAACG,GAAG;IAE5B,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEoB,eAAe,GAAG;IAChB,IAAI,IAAI,CAACC,IAAI,CAAC9B,UAAU,CAACM,SAAS,CAACyB,OAAO,CAAC,EAAE;MAC3C,OAAO,IAAI,CAACC,wBAAwB,EAAE;IACxC,CAAC,CAAC;;IAEF,MAAMC,cAAc,GAAG,IAAI,CAACC,eAAe,EAAE;IAC7C,MAAMC,YAAY,GAAGF,cAAc,GAC/B,IAAI,CAACnC,MAAM,CAACsC,SAAS,EAAE,GACvB,IAAI,CAACtC,MAAM,CAACuB,KAAK;IAErB,IAAIc,YAAY,CAACX,IAAI,KAAKxB,UAAU,CAACM,SAAS,CAACgB,IAAI,EAAE;MACnD,QAAQa,YAAY,CAAChD,KAAK;QACxB,KAAK,QAAQ;UACX,OAAO,IAAI,CAACkD,qBAAqB,EAAE;QAErC,KAAK,QAAQ;UACX,OAAO,IAAI,CAACC,yBAAyB,EAAE;QAEzC,KAAK,MAAM;UACT,OAAO,IAAI,CAACC,yBAAyB,EAAE;QAEzC,KAAK,WAAW;UACd,OAAO,IAAI,CAACC,4BAA4B,EAAE;QAE5C,KAAK,OAAO;UACV,OAAO,IAAI,CAACC,wBAAwB,EAAE;QAExC,KAAK,MAAM;UACT,OAAO,IAAI,CAACC,uBAAuB,EAAE;QAEvC,KAAK,OAAO;UACV,OAAO,IAAI,CAACC,8BAA8B,EAAE;QAE9C,KAAK,WAAW;UACd,OAAO,IAAI,CAACC,wBAAwB,EAAE;MAAC;MAG3C,IAAIX,cAAc,EAAE;QAClB,MAAM,CAAC,CAAC,EAAExC,YAAY,CAACoD,WAAW,EAChC,IAAI,CAAC/C,MAAM,CAACG,MAAM,EAClB,IAAI,CAACH,MAAM,CAACuB,KAAK,CAACyB,KAAK,EACvB,8EAA8E,CAC/E;MACH;MAEA,QAAQX,YAAY,CAAChD,KAAK;QACxB,KAAK,OAAO;QACZ,KAAK,UAAU;QACf,KAAK,cAAc;UACjB,OAAO,IAAI,CAAC6C,wBAAwB,EAAE;QAExC,KAAK,UAAU;UACb,OAAO,IAAI,CAACe,uBAAuB,EAAE;QAEvC,KAAK,QAAQ;UACX,OAAO,IAAI,CAACC,wBAAwB,EAAE;MAAC;IAE7C;IAEA,MAAM,IAAI,CAACC,UAAU,CAACd,YAAY,CAAC;EACrC,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;;EAEEH,wBAAwB,GAAG;IACzB,MAAMc,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAE/B,IAAI,IAAI,CAACS,IAAI,CAAC9B,UAAU,CAACM,SAAS,CAACyB,OAAO,CAAC,EAAE;MAC3C,OAAO,IAAI,CAACR,IAAI,CAACuB,KAAK,EAAE;QACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACyB,oBAAoB;QACtCC,SAAS,EAAExD,IAAI,CAACyD,iBAAiB,CAACC,KAAK;QACvCC,IAAI,EAAEC,SAAS;QACfC,mBAAmB,EAAE,EAAE;QACvBC,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,IAAI,CAACC,iBAAiB;MACtC,CAAC,CAAC;IACJ;IAEA,MAAMR,SAAS,GAAG,IAAI,CAACS,kBAAkB,EAAE;IAC3C,IAAIN,IAAI;IAER,IAAI,IAAI,CAACxB,IAAI,CAAC9B,UAAU,CAACM,SAAS,CAACgB,IAAI,CAAC,EAAE;MACxCgC,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IACzB;IAEA,OAAO,IAAI,CAACG,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACyB,oBAAoB;MACtCC,SAAS;MACTG,IAAI;MACJE,mBAAmB,EAAE,IAAI,CAACK,wBAAwB,EAAE;MACpDJ,UAAU,EAAE,IAAI,CAACK,eAAe,CAAC,KAAK,CAAC;MACvCJ,YAAY,EAAE,IAAI,CAACC,iBAAiB;IACtC,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAEEC,kBAAkB,GAAG;IACnB,MAAMG,cAAc,GAAG,IAAI,CAAC1D,WAAW,CAACL,UAAU,CAACM,SAAS,CAACgB,IAAI,CAAC;IAElE,QAAQyC,cAAc,CAAC5E,KAAK;MAC1B,KAAK,OAAO;QACV,OAAOQ,IAAI,CAACyD,iBAAiB,CAACC,KAAK;MAErC,KAAK,UAAU;QACb,OAAO1D,IAAI,CAACyD,iBAAiB,CAACY,QAAQ;MAExC,KAAK,cAAc;QACjB,OAAOrE,IAAI,CAACyD,iBAAiB,CAACa,YAAY;IAAC;IAG/C,MAAM,IAAI,CAAChB,UAAU,CAACc,cAAc,CAAC;EACvC;EACA;AACF;AACA;;EAEEF,wBAAwB,GAAG;IACzB,OAAO,IAAI,CAACK,YAAY,CACtBlE,UAAU,CAACM,SAAS,CAAC6D,OAAO,EAC5B,IAAI,CAACC,uBAAuB,EAC5BpE,UAAU,CAACM,SAAS,CAAC+D,OAAO,CAC7B;EACH;EACA;AACF;AACA;;EAEED,uBAAuB,GAAG;IACxB,OAAO,IAAI,CAAC7C,IAAI,CAAC,IAAI,CAACzB,MAAM,CAACuB,KAAK,EAAE;MAClCG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC6C,mBAAmB;MACrCC,QAAQ,EAAE,IAAI,CAACC,aAAa,EAAE;MAC9B7D,IAAI,GACD,IAAI,CAACN,WAAW,CAACL,UAAU,CAACM,SAAS,CAACmE,KAAK,CAAC,EAC7C,IAAI,CAAC7D,kBAAkB,EAAE,CAAC;MAC5B8D,YAAY,EAAE,IAAI,CAACC,mBAAmB,CAAC3E,UAAU,CAACM,SAAS,CAACsE,MAAM,CAAC,GAC/D,IAAI,CAAClE,sBAAsB,EAAE,GAC7B6C,SAAS;MACbE,UAAU,EAAE,IAAI,CAACoB,oBAAoB;IACvC,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAEEL,aAAa,GAAG;IACd,MAAM1B,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAAChB,WAAW,CAACL,UAAU,CAACM,SAAS,CAACwE,MAAM,CAAC;IAC7C,OAAO,IAAI,CAACvD,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACsD,QAAQ;MAC1BzB,IAAI,EAAE,IAAI,CAAClC,SAAS;IACtB,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAEEuC,iBAAiB,GAAG;IAClB,OAAO,IAAI,CAACpC,IAAI,CAAC,IAAI,CAACzB,MAAM,CAACuB,KAAK,EAAE;MAClCG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACuD,aAAa;MAC/BC,UAAU,EAAE,IAAI,CAACrD,IAAI,CACnB5B,UAAU,CAACM,SAAS,CAACyB,OAAO,EAC5B,IAAI,CAACmD,cAAc,EACnBlF,UAAU,CAACM,SAAS,CAAC6E,OAAO;IAEhC,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;;EAEED,cAAc,GAAG;IACf,OAAO,IAAI,CAACpD,IAAI,CAAC9B,UAAU,CAACM,SAAS,CAAC8E,MAAM,CAAC,GACzC,IAAI,CAACC,aAAa,EAAE,GACpB,IAAI,CAACC,UAAU,EAAE;EACvB;EACA;AACF;AACA;AACA;AACA;;EAEEA,UAAU,GAAG;IACX,MAAMxC,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMkE,WAAW,GAAG,IAAI,CAACnE,SAAS,EAAE;IACpC,IAAIoE,KAAK;IACT,IAAIlC,IAAI;IAER,IAAI,IAAI,CAACqB,mBAAmB,CAAC3E,UAAU,CAACM,SAAS,CAACmE,KAAK,CAAC,EAAE;MACxDe,KAAK,GAAGD,WAAW;MACnBjC,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IACzB,CAAC,MAAM;MACLkC,IAAI,GAAGiC,WAAW;IACpB;IAEA,OAAO,IAAI,CAAChE,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACgE,KAAK;MACvBD,KAAK;MACLlC,IAAI;MACJoC,SAAS,EAAE,IAAI,CAACC,cAAc,CAAC,KAAK,CAAC;MACrClC,UAAU,EAAE,IAAI,CAACK,eAAe,CAAC,KAAK,CAAC;MACvCJ,YAAY,EAAE,IAAI,CAAC5B,IAAI,CAAC9B,UAAU,CAACM,SAAS,CAACyB,OAAO,CAAC,GACjD,IAAI,CAAC4B,iBAAiB,EAAE,GACxBJ;IACN,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAEEoC,cAAc,CAACC,OAAO,EAAE;IACtB,MAAMC,IAAI,GAAGD,OAAO,GAAG,IAAI,CAACE,kBAAkB,GAAG,IAAI,CAACC,aAAa;IACnE,OAAO,IAAI,CAAC7B,YAAY,CACtBlE,UAAU,CAACM,SAAS,CAAC6D,OAAO,EAC5B0B,IAAI,EACJ7F,UAAU,CAACM,SAAS,CAAC+D,OAAO,CAC7B;EACH;EACA;AACF;AACA;;EAEE0B,aAAa,GAAkB;IAAA,IAAjBH,OAAO,uEAAG,KAAK;IAC3B,MAAM9C,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMiC,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,IAAI,CAACf,WAAW,CAACL,UAAU,CAACM,SAAS,CAACmE,KAAK,CAAC;IAC5C,OAAO,IAAI,CAAClD,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACuE,QAAQ;MAC1B1C,IAAI;MACJnE,KAAK,EAAE,IAAI,CAACqB,iBAAiB,CAACoF,OAAO;IACvC,CAAC,CAAC;EACJ;EAEAE,kBAAkB,GAAG;IACnB,OAAO,IAAI,CAACC,aAAa,CAAC,IAAI,CAAC;EACjC,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;;EAEEV,aAAa,GAAG;IACd,MAAMvC,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAAChB,WAAW,CAACL,UAAU,CAACM,SAAS,CAAC8E,MAAM,CAAC;IAC7C,MAAMa,gBAAgB,GAAG,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAAC;IAEzD,IAAI,CAACD,gBAAgB,IAAI,IAAI,CAACnE,IAAI,CAAC9B,UAAU,CAACM,SAAS,CAACgB,IAAI,CAAC,EAAE;MAC7D,OAAO,IAAI,CAACC,IAAI,CAACuB,KAAK,EAAE;QACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC0E,eAAe;QACjC7C,IAAI,EAAE,IAAI,CAAC8C,iBAAiB,EAAE;QAC9B3C,UAAU,EAAE,IAAI,CAACK,eAAe,CAAC,KAAK;MACxC,CAAC,CAAC;IACJ;IAEA,OAAO,IAAI,CAACvC,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC4E,eAAe;MACjCC,aAAa,EAAEL,gBAAgB,GAAG,IAAI,CAACM,cAAc,EAAE,GAAGhD,SAAS;MACnEE,UAAU,EAAE,IAAI,CAACK,eAAe,CAAC,KAAK,CAAC;MACvCJ,YAAY,EAAE,IAAI,CAACC,iBAAiB;IACtC,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;;EAEEZ,uBAAuB,GAAG;IACxB,MAAMD,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAACmF,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;IAChC;IACA;;IAEA,IAAI,IAAI,CAACtF,QAAQ,CAACuF,4BAA4B,KAAK,IAAI,EAAE;MACvD,OAAO,IAAI,CAAClF,IAAI,CAACuB,KAAK,EAAE;QACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACiF,mBAAmB;QACrCpD,IAAI,EAAE,IAAI,CAAC8C,iBAAiB,EAAE;QAC9B5C,mBAAmB,EAAE,IAAI,CAACK,wBAAwB,EAAE;QACpDyC,aAAa,GAAG,IAAI,CAACE,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,CAACD,cAAc,EAAE,CAAC;QAChE9C,UAAU,EAAE,IAAI,CAACK,eAAe,CAAC,KAAK,CAAC;QACvCJ,YAAY,EAAE,IAAI,CAACC,iBAAiB;MACtC,CAAC,CAAC;IACJ;IAEA,OAAO,IAAI,CAACpC,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACiF,mBAAmB;MACrCpD,IAAI,EAAE,IAAI,CAAC8C,iBAAiB,EAAE;MAC9BE,aAAa,GAAG,IAAI,CAACE,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,CAACD,cAAc,EAAE,CAAC;MAChE9C,UAAU,EAAE,IAAI,CAACK,eAAe,CAAC,KAAK,CAAC;MACvCJ,YAAY,EAAE,IAAI,CAACC,iBAAiB;IACtC,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAEEyC,iBAAiB,GAAG;IAClB,IAAI,IAAI,CAACtG,MAAM,CAACuB,KAAK,CAAClC,KAAK,KAAK,IAAI,EAAE;MACpC,MAAM,IAAI,CAAC8D,UAAU,EAAE;IACzB;IAEA,OAAO,IAAI,CAAC7B,SAAS,EAAE;EACzB,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEZ,iBAAiB,CAACoF,OAAO,EAAE;IACzB,MAAMvE,KAAK,GAAG,IAAI,CAACvB,MAAM,CAACuB,KAAK;IAE/B,QAAQA,KAAK,CAACG,IAAI;MAChB,KAAKxB,UAAU,CAACM,SAAS,CAACqG,SAAS;QACjC,OAAO,IAAI,CAACC,SAAS,CAAChB,OAAO,CAAC;MAEhC,KAAK5F,UAAU,CAACM,SAAS,CAACyB,OAAO;QAC/B,OAAO,IAAI,CAAC8E,WAAW,CAACjB,OAAO,CAAC;MAElC,KAAK5F,UAAU,CAACM,SAAS,CAACwG,GAAG;QAC3B,IAAI,CAACC,YAAY,EAAE;QACnB,OAAO,IAAI,CAACxF,IAAI,CAACF,KAAK,EAAE;UACtBG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACqF,GAAG;UACrB3H,KAAK,EAAEkC,KAAK,CAAClC;QACf,CAAC,CAAC;MAEJ,KAAKa,UAAU,CAACM,SAAS,CAAC0G,KAAK;QAC7B,IAAI,CAACD,YAAY,EAAE;QACnB,OAAO,IAAI,CAACxF,IAAI,CAACF,KAAK,EAAE;UACtBG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACuF,KAAK;UACvB7H,KAAK,EAAEkC,KAAK,CAAClC;QACf,CAAC,CAAC;MAEJ,KAAKa,UAAU,CAACM,SAAS,CAAC2G,MAAM;MAChC,KAAKjH,UAAU,CAACM,SAAS,CAAC4G,YAAY;QACpC,OAAO,IAAI,CAACC,kBAAkB,EAAE;MAElC,KAAKnH,UAAU,CAACM,SAAS,CAACgB,IAAI;QAC5B,IAAI,CAACyF,YAAY,EAAE;QAEnB,QAAQ1F,KAAK,CAAClC,KAAK;UACjB,KAAK,MAAM;YACT,OAAO,IAAI,CAACoC,IAAI,CAACF,KAAK,EAAE;cACtBG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC2F,OAAO;cACzBjI,KAAK,EAAE;YACT,CAAC,CAAC;UAEJ,KAAK,OAAO;YACV,OAAO,IAAI,CAACoC,IAAI,CAACF,KAAK,EAAE;cACtBG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC2F,OAAO;cACzBjI,KAAK,EAAE;YACT,CAAC,CAAC;UAEJ,KAAK,MAAM;YACT,OAAO,IAAI,CAACoC,IAAI,CAACF,KAAK,EAAE;cACtBG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC4F;YACpB,CAAC,CAAC;UAEJ;YACE,OAAO,IAAI,CAAC9F,IAAI,CAACF,KAAK,EAAE;cACtBG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC6F,IAAI;cACtBnI,KAAK,EAAEkC,KAAK,CAAClC;YACf,CAAC,CAAC;QAAC;MAGT,KAAKa,UAAU,CAACM,SAAS,CAACwE,MAAM;QAC9B,IAAIc,OAAO,EAAE;UACX,IAAI,CAACvF,WAAW,CAACL,UAAU,CAACM,SAAS,CAACwE,MAAM,CAAC;UAE7C,IAAI,IAAI,CAAChF,MAAM,CAACuB,KAAK,CAACG,IAAI,KAAKxB,UAAU,CAACM,SAAS,CAACgB,IAAI,EAAE;YACxD,MAAMiG,OAAO,GAAG,IAAI,CAACzH,MAAM,CAACuB,KAAK,CAAClC,KAAK;YACvC,MAAM,CAAC,CAAC,EAAEM,YAAY,CAACoD,WAAW,EAChC,IAAI,CAAC/C,MAAM,CAACG,MAAM,EAClBoB,KAAK,CAACyB,KAAK,EACV,yBAAwByE,OAAQ,sBAAqB,CACvD;UACH,CAAC,MAAM;YACL,MAAM,IAAI,CAACtE,UAAU,CAAC5B,KAAK,CAAC;UAC9B;QACF;QAEA,OAAO,IAAI,CAACmD,aAAa,EAAE;MAE7B;QACE,MAAM,IAAI,CAACvB,UAAU,EAAE;IAAC;EAE9B;EAEAvC,sBAAsB,GAAG;IACvB,OAAO,IAAI,CAACF,iBAAiB,CAAC,IAAI,CAAC;EACrC;EAEA2G,kBAAkB,GAAG;IACnB,MAAM9F,KAAK,GAAG,IAAI,CAACvB,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAAC0F,YAAY,EAAE;IACnB,OAAO,IAAI,CAACxF,IAAI,CAACF,KAAK,EAAE;MACtBG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACwF,MAAM;MACxB9H,KAAK,EAAEkC,KAAK,CAAClC,KAAK;MAClBqI,KAAK,EAAEnG,KAAK,CAACG,IAAI,KAAKxB,UAAU,CAACM,SAAS,CAAC4G;IAC7C,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAEEN,SAAS,CAAChB,OAAO,EAAE;IACjB,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACrF,iBAAiB,CAACoF,OAAO,CAAC;IAElD,OAAO,IAAI,CAACrE,IAAI,CAAC,IAAI,CAACzB,MAAM,CAACuB,KAAK,EAAE;MAClCG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACgG,IAAI;MACtBC,MAAM,EAAE,IAAI,CAACC,GAAG,CACd3H,UAAU,CAACM,SAAS,CAACqG,SAAS,EAC9Bd,IAAI,EACJ7F,UAAU,CAACM,SAAS,CAACsH,SAAS;IAElC,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEEf,WAAW,CAACjB,OAAO,EAAE;IACnB,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACgC,gBAAgB,CAACjC,OAAO,CAAC;IAEjD,OAAO,IAAI,CAACrE,IAAI,CAAC,IAAI,CAACzB,MAAM,CAACuB,KAAK,EAAE;MAClCG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACqG,MAAM;MACxBC,MAAM,EAAE,IAAI,CAACJ,GAAG,CACd3H,UAAU,CAACM,SAAS,CAACyB,OAAO,EAC5B8D,IAAI,EACJ7F,UAAU,CAACM,SAAS,CAAC6E,OAAO;IAEhC,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAEE0C,gBAAgB,CAACjC,OAAO,EAAE;IACxB,MAAM9C,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMiC,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,IAAI,CAACf,WAAW,CAACL,UAAU,CAACM,SAAS,CAACmE,KAAK,CAAC;IAC5C,OAAO,IAAI,CAAClD,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACuG,YAAY;MAC9B1E,IAAI;MACJnE,KAAK,EAAE,IAAI,CAACqB,iBAAiB,CAACoF,OAAO;IACvC,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;AACF;AACA;;EAEE9B,eAAe,CAAC8B,OAAO,EAAE;IACvB,MAAMnC,UAAU,GAAG,EAAE;IAErB,OAAO,IAAI,CAAC3B,IAAI,CAAC9B,UAAU,CAACM,SAAS,CAAC2H,EAAE,CAAC,EAAE;MACzCxE,UAAU,CAACyE,IAAI,CAAC,IAAI,CAACC,cAAc,CAACvC,OAAO,CAAC,CAAC;IAC/C;IAEA,OAAOnC,UAAU;EACnB;EAEAoB,oBAAoB,GAAG;IACrB,OAAO,IAAI,CAACf,eAAe,CAAC,IAAI,CAAC;EACnC;EACA;AACF;AACA;AACA;AACA;;EAEEqE,cAAc,CAACvC,OAAO,EAAE;IACtB,MAAM9C,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAAChB,WAAW,CAACL,UAAU,CAACM,SAAS,CAAC2H,EAAE,CAAC;IACzC,OAAO,IAAI,CAAC1G,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC2G,SAAS;MAC3B9E,IAAI,EAAE,IAAI,CAAClC,SAAS,EAAE;MACtBsE,SAAS,EAAE,IAAI,CAACC,cAAc,CAACC,OAAO;IACxC,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;;EAEEhF,kBAAkB,GAAG;IACnB,MAAMkC,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAIV,IAAI;IAER,IAAI,IAAI,CAACgE,mBAAmB,CAAC3E,UAAU,CAACM,SAAS,CAACqG,SAAS,CAAC,EAAE;MAC5D,MAAM0B,SAAS,GAAG,IAAI,CAACzH,kBAAkB,EAAE;MAC3C,IAAI,CAACP,WAAW,CAACL,UAAU,CAACM,SAAS,CAACsH,SAAS,CAAC;MAChDjH,IAAI,GAAG,IAAI,CAACY,IAAI,CAACuB,KAAK,EAAE;QACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC6G,SAAS;QAC3B3H,IAAI,EAAE0H;MACR,CAAC,CAAC;IACJ,CAAC,MAAM;MACL1H,IAAI,GAAG,IAAI,CAAC4F,cAAc,EAAE;IAC9B;IAEA,IAAI,IAAI,CAAC5B,mBAAmB,CAAC3E,UAAU,CAACM,SAAS,CAACiI,IAAI,CAAC,EAAE;MACvD,OAAO,IAAI,CAAChH,IAAI,CAACuB,KAAK,EAAE;QACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC+G,aAAa;QAC/B7H;MACF,CAAC,CAAC;IACJ;IAEA,OAAOA,IAAI;EACb;EACA;AACF;AACA;;EAEE4F,cAAc,GAAG;IACf,OAAO,IAAI,CAAChF,IAAI,CAAC,IAAI,CAACzB,MAAM,CAACuB,KAAK,EAAE;MAClCG,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACgH,UAAU;MAC5BnF,IAAI,EAAE,IAAI,CAAClC,SAAS;IACtB,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEFc,eAAe,GAAG;IAChB,OACE,IAAI,CAACJ,IAAI,CAAC9B,UAAU,CAACM,SAAS,CAAC2G,MAAM,CAAC,IACtC,IAAI,CAACnF,IAAI,CAAC9B,UAAU,CAACM,SAAS,CAAC4G,YAAY,CAAC;EAEhD;EACA;AACF;AACA;;EAEEwB,gBAAgB,GAAG;IACjB,IAAI,IAAI,CAACxG,eAAe,EAAE,EAAE;MAC1B,OAAO,IAAI,CAACiF,kBAAkB,EAAE;IAClC;EACF;EACA;AACF;AACA;AACA;AACA;;EAEE9E,qBAAqB,GAAG;IACtB,MAAMS,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMsH,WAAW,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAC3C,IAAI,CAAClC,aAAa,CAAC,QAAQ,CAAC;IAC5B,MAAM/C,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAM+D,cAAc,GAAG,IAAI,CAAChH,IAAI,CAC9B5B,UAAU,CAACM,SAAS,CAACyB,OAAO,EAC5B,IAAI,CAAC8G,4BAA4B,EACjC7I,UAAU,CAACM,SAAS,CAAC6E,OAAO,CAC7B;IACD,OAAO,IAAI,CAAC5D,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACqH,iBAAiB;MACnCH,WAAW;MACXlF,UAAU;MACVmF;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAEEC,4BAA4B,GAAG;IAC7B,MAAM/F,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAM8B,SAAS,GAAG,IAAI,CAACS,kBAAkB,EAAE;IAC3C,IAAI,CAACvD,WAAW,CAACL,UAAU,CAACM,SAAS,CAACmE,KAAK,CAAC;IAC5C,MAAM9D,IAAI,GAAG,IAAI,CAAC4F,cAAc,EAAE;IAClC,OAAO,IAAI,CAAChF,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACsH,yBAAyB;MAC3C5F,SAAS;MACTxC;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAEE2B,yBAAyB,GAAG;IAC1B,MAAMQ,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMsH,WAAW,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAC3C,IAAI,CAAClC,aAAa,CAAC,QAAQ,CAAC;IAC5B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAMqC,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,OAAO,IAAI,CAACtD,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACuH,sBAAsB;MACxCL,WAAW;MACXrF,IAAI;MACJG;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAEElB,yBAAyB,GAAG;IAC1B,MAAMO,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMsH,WAAW,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAC3C,IAAI,CAAClC,aAAa,CAAC,MAAM,CAAC;IAC1B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAM6H,UAAU,GAAG,IAAI,CAACC,yBAAyB,EAAE;IACnD,MAAMzF,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAMkD,MAAM,GAAG,IAAI,CAACoB,qBAAqB,EAAE;IAC3C,OAAO,IAAI,CAAC5H,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC2H,sBAAsB;MACxCT,WAAW;MACXrF,IAAI;MACJ2F,UAAU;MACVxF,UAAU;MACVsE;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAEEmB,yBAAyB,GAAG;IAC1B,OAAO,IAAI,CAAChD,qBAAqB,CAAC,YAAY,CAAC,GAC3C,IAAI,CAACmD,aAAa,CAACrJ,UAAU,CAACM,SAAS,CAACgJ,GAAG,EAAE,IAAI,CAAC/C,cAAc,CAAC,GACjE,EAAE;EACR;EACA;AACF;AACA;AACA;AACA;;EAEE4C,qBAAqB,GAAG;IACtB,OAAO,IAAI,CAACjF,YAAY,CACtBlE,UAAU,CAACM,SAAS,CAACyB,OAAO,EAC5B,IAAI,CAACwH,oBAAoB,EACzBvJ,UAAU,CAACM,SAAS,CAAC6E,OAAO,CAC7B;EACH;EACA;AACF;AACA;AACA;;EAEEoE,oBAAoB,GAAG;IACrB,MAAMzG,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMsH,WAAW,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAC3C,MAAMpF,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAMoI,IAAI,GAAG,IAAI,CAACC,iBAAiB,EAAE;IACrC,IAAI,CAACpJ,WAAW,CAACL,UAAU,CAACM,SAAS,CAACmE,KAAK,CAAC;IAC5C,MAAM9D,IAAI,GAAG,IAAI,CAACC,kBAAkB,EAAE;IACtC,MAAM6C,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,OAAO,IAAI,CAACtD,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACiI,gBAAgB;MAClCf,WAAW;MACXrF,IAAI;MACJoC,SAAS,EAAE8D,IAAI;MACf7I,IAAI;MACJ8C;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAEEgG,iBAAiB,GAAG;IAClB,OAAO,IAAI,CAACvF,YAAY,CACtBlE,UAAU,CAACM,SAAS,CAAC6D,OAAO,EAC5B,IAAI,CAACwF,kBAAkB,EACvB3J,UAAU,CAACM,SAAS,CAAC+D,OAAO,CAC7B;EACH;EACA;AACF;AACA;AACA;;EAEEsF,kBAAkB,GAAG;IACnB,MAAM7G,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMsH,WAAW,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAC3C,MAAMpF,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,IAAI,CAACf,WAAW,CAACL,UAAU,CAACM,SAAS,CAACmE,KAAK,CAAC;IAC5C,MAAM9D,IAAI,GAAG,IAAI,CAACC,kBAAkB,EAAE;IACtC,IAAI8D,YAAY;IAEhB,IAAI,IAAI,CAACC,mBAAmB,CAAC3E,UAAU,CAACM,SAAS,CAACsE,MAAM,CAAC,EAAE;MACzDF,YAAY,GAAG,IAAI,CAAChE,sBAAsB,EAAE;IAC9C;IAEA,MAAM+C,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,OAAO,IAAI,CAACtD,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACmI,sBAAsB;MACxCjB,WAAW;MACXrF,IAAI;MACJ3C,IAAI;MACJ+D,YAAY;MACZjB;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;;EAEEjB,4BAA4B,GAAG;IAC7B,MAAMM,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMsH,WAAW,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAC3C,IAAI,CAAClC,aAAa,CAAC,WAAW,CAAC;IAC/B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAM6H,UAAU,GAAG,IAAI,CAACC,yBAAyB,EAAE;IACnD,MAAMzF,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAMkD,MAAM,GAAG,IAAI,CAACoB,qBAAqB,EAAE;IAC3C,OAAO,IAAI,CAAC5H,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACoI,yBAAyB;MAC3ClB,WAAW;MACXrF,IAAI;MACJ2F,UAAU;MACVxF,UAAU;MACVsE;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;;EAEEtF,wBAAwB,GAAG;IACzB,MAAMK,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMsH,WAAW,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAC3C,IAAI,CAAClC,aAAa,CAAC,OAAO,CAAC;IAC3B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAMqC,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAMiF,KAAK,GAAG,IAAI,CAACC,qBAAqB,EAAE;IAC1C,OAAO,IAAI,CAACxI,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACuI,qBAAqB;MACvCrB,WAAW;MACXrF,IAAI;MACJG,UAAU;MACVqG;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAEEC,qBAAqB,GAAG;IACtB,OAAO,IAAI,CAACpF,mBAAmB,CAAC3E,UAAU,CAACM,SAAS,CAACsE,MAAM,CAAC,GACxD,IAAI,CAACyE,aAAa,CAACrJ,UAAU,CAACM,SAAS,CAAC2J,IAAI,EAAE,IAAI,CAAC1D,cAAc,CAAC,GAClE,EAAE;EACR;EACA;AACF;AACA;AACA;;EAEE7D,uBAAuB,GAAG;IACxB,MAAMI,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMsH,WAAW,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAC3C,IAAI,CAAClC,aAAa,CAAC,MAAM,CAAC;IAC1B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAMqC,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAM6C,MAAM,GAAG,IAAI,CAACwC,yBAAyB,EAAE;IAC/C,OAAO,IAAI,CAAC3I,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC0I,oBAAoB;MACtCxB,WAAW;MACXrF,IAAI;MACJG,UAAU;MACViE;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAEEwC,yBAAyB,GAAG;IAC1B,OAAO,IAAI,CAAChG,YAAY,CACtBlE,UAAU,CAACM,SAAS,CAACyB,OAAO,EAC5B,IAAI,CAACqI,wBAAwB,EAC7BpK,UAAU,CAACM,SAAS,CAAC6E,OAAO,CAC7B;EACH;EACA;AACF;AACA;;EAEEiF,wBAAwB,GAAG;IACzB,MAAMtH,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMsH,WAAW,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAC3C,MAAMpF,IAAI,GAAG,IAAI,CAAC+G,kBAAkB,EAAE;IACtC,MAAM5G,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,OAAO,IAAI,CAACtD,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC6I,qBAAqB;MACvC3B,WAAW;MACXrF,IAAI;MACJG;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAEE4G,kBAAkB,GAAG;IACnB,IACE,IAAI,CAACvK,MAAM,CAACuB,KAAK,CAAClC,KAAK,KAAK,MAAM,IAClC,IAAI,CAACW,MAAM,CAACuB,KAAK,CAAClC,KAAK,KAAK,OAAO,IACnC,IAAI,CAACW,MAAM,CAACuB,KAAK,CAAClC,KAAK,KAAK,MAAM,EAClC;MACA,MAAM,CAAC,CAAC,EAAEM,YAAY,CAACoD,WAAW,EAChC,IAAI,CAAC/C,MAAM,CAACG,MAAM,EAClB,IAAI,CAACH,MAAM,CAACuB,KAAK,CAACyB,KAAK,EACtB,GAAEyH,YAAY,CACb,IAAI,CAACzK,MAAM,CAACuB,KAAK,CACjB,oDAAmD,CACtD;IACH;IAEA,OAAO,IAAI,CAACD,SAAS,EAAE;EACzB;EACA;AACF;AACA;AACA;;EAEEuB,8BAA8B,GAAG;IAC/B,MAAMG,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMsH,WAAW,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAC3C,IAAI,CAAClC,aAAa,CAAC,OAAO,CAAC;IAC3B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAMqC,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAMkD,MAAM,GAAG,IAAI,CAACyC,0BAA0B,EAAE;IAChD,OAAO,IAAI,CAACjJ,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACgJ,4BAA4B;MAC9C9B,WAAW;MACXrF,IAAI;MACJG,UAAU;MACVsE;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAEEyC,0BAA0B,GAAG;IAC3B,OAAO,IAAI,CAACtG,YAAY,CACtBlE,UAAU,CAACM,SAAS,CAACyB,OAAO,EAC5B,IAAI,CAAC4H,kBAAkB,EACvB3J,UAAU,CAACM,SAAS,CAAC6E,OAAO,CAC7B;EACH;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEnC,wBAAwB,GAAG;IACzB,MAAMb,YAAY,GAAG,IAAI,CAACrC,MAAM,CAACsC,SAAS,EAAE;IAE5C,IAAID,YAAY,CAACX,IAAI,KAAKxB,UAAU,CAACM,SAAS,CAACgB,IAAI,EAAE;MACnD,QAAQa,YAAY,CAAChD,KAAK;QACxB,KAAK,QAAQ;UACX,OAAO,IAAI,CAACuL,oBAAoB,EAAE;QAEpC,KAAK,QAAQ;UACX,OAAO,IAAI,CAACC,wBAAwB,EAAE;QAExC,KAAK,MAAM;UACT,OAAO,IAAI,CAACC,wBAAwB,EAAE;QAExC,KAAK,WAAW;UACd,OAAO,IAAI,CAACC,2BAA2B,EAAE;QAE3C,KAAK,OAAO;UACV,OAAO,IAAI,CAACC,uBAAuB,EAAE;QAEvC,KAAK,MAAM;UACT,OAAO,IAAI,CAACC,sBAAsB,EAAE;QAEtC,KAAK,OAAO;UACV,OAAO,IAAI,CAACC,6BAA6B,EAAE;MAAC;IAElD;IAEA,MAAM,IAAI,CAAC/H,UAAU,CAACd,YAAY,CAAC;EACrC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEEuI,oBAAoB,GAAG;IACrB,MAAM5H,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAACmF,aAAa,CAAC,QAAQ,CAAC;IAC5B,IAAI,CAACA,aAAa,CAAC,QAAQ,CAAC;IAC5B,MAAM/C,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAM+D,cAAc,GAAG,IAAI,CAAC1E,YAAY,CACtClE,UAAU,CAACM,SAAS,CAACyB,OAAO,EAC5B,IAAI,CAAC8G,4BAA4B,EACjC7I,UAAU,CAACM,SAAS,CAAC6E,OAAO,CAC7B;IAED,IAAI1B,UAAU,CAACwH,MAAM,KAAK,CAAC,IAAIrC,cAAc,CAACqC,MAAM,KAAK,CAAC,EAAE;MAC1D,MAAM,IAAI,CAAChI,UAAU,EAAE;IACzB;IAEA,OAAO,IAAI,CAAC1B,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACyJ,gBAAgB;MAClCzH,UAAU;MACVmF;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;;EAEE+B,wBAAwB,GAAG;IACzB,MAAM7H,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAACmF,aAAa,CAAC,QAAQ,CAAC;IAC5B,IAAI,CAACA,aAAa,CAAC,QAAQ,CAAC;IAC5B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAMqC,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAE9C,IAAIpB,UAAU,CAACwH,MAAM,KAAK,CAAC,EAAE;MAC3B,MAAM,IAAI,CAAChI,UAAU,EAAE;IACzB;IAEA,OAAO,IAAI,CAAC1B,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC0J,qBAAqB;MACvC7H,IAAI;MACJG;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;;EAEEmH,wBAAwB,GAAG;IACzB,MAAM9H,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAACmF,aAAa,CAAC,QAAQ,CAAC;IAC5B,IAAI,CAACA,aAAa,CAAC,MAAM,CAAC;IAC1B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAM6H,UAAU,GAAG,IAAI,CAACC,yBAAyB,EAAE;IACnD,MAAMzF,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAMkD,MAAM,GAAG,IAAI,CAACoB,qBAAqB,EAAE;IAE3C,IACEF,UAAU,CAACgC,MAAM,KAAK,CAAC,IACvBxH,UAAU,CAACwH,MAAM,KAAK,CAAC,IACvBlD,MAAM,CAACkD,MAAM,KAAK,CAAC,EACnB;MACA,MAAM,IAAI,CAAChI,UAAU,EAAE;IACzB;IAEA,OAAO,IAAI,CAAC1B,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC2J,qBAAqB;MACvC9H,IAAI;MACJ2F,UAAU;MACVxF,UAAU;MACVsE;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;;EAEE8C,2BAA2B,GAAG;IAC5B,MAAM/H,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAACmF,aAAa,CAAC,QAAQ,CAAC;IAC5B,IAAI,CAACA,aAAa,CAAC,WAAW,CAAC;IAC/B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAM6H,UAAU,GAAG,IAAI,CAACC,yBAAyB,EAAE;IACnD,MAAMzF,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAMkD,MAAM,GAAG,IAAI,CAACoB,qBAAqB,EAAE;IAE3C,IACEF,UAAU,CAACgC,MAAM,KAAK,CAAC,IACvBxH,UAAU,CAACwH,MAAM,KAAK,CAAC,IACvBlD,MAAM,CAACkD,MAAM,KAAK,CAAC,EACnB;MACA,MAAM,IAAI,CAAChI,UAAU,EAAE;IACzB;IAEA,OAAO,IAAI,CAAC1B,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC4J,wBAAwB;MAC1C/H,IAAI;MACJ2F,UAAU;MACVxF,UAAU;MACVsE;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAEE+C,uBAAuB,GAAG;IACxB,MAAMhI,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAACmF,aAAa,CAAC,QAAQ,CAAC;IAC5B,IAAI,CAACA,aAAa,CAAC,OAAO,CAAC;IAC3B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAMqC,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAMiF,KAAK,GAAG,IAAI,CAACC,qBAAqB,EAAE;IAE1C,IAAItG,UAAU,CAACwH,MAAM,KAAK,CAAC,IAAInB,KAAK,CAACmB,MAAM,KAAK,CAAC,EAAE;MACjD,MAAM,IAAI,CAAChI,UAAU,EAAE;IACzB;IAEA,OAAO,IAAI,CAAC1B,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC6J,oBAAoB;MACtChI,IAAI;MACJG,UAAU;MACVqG;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAEEiB,sBAAsB,GAAG;IACvB,MAAMjI,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAACmF,aAAa,CAAC,QAAQ,CAAC;IAC5B,IAAI,CAACA,aAAa,CAAC,MAAM,CAAC;IAC1B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAMqC,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAM6C,MAAM,GAAG,IAAI,CAACwC,yBAAyB,EAAE;IAE/C,IAAIzG,UAAU,CAACwH,MAAM,KAAK,CAAC,IAAIvD,MAAM,CAACuD,MAAM,KAAK,CAAC,EAAE;MAClD,MAAM,IAAI,CAAChI,UAAU,EAAE;IACzB;IAEA,OAAO,IAAI,CAAC1B,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC8J,mBAAmB;MACrCjI,IAAI;MACJG,UAAU;MACViE;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAEEsD,6BAA6B,GAAG;IAC9B,MAAMlI,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,IAAI,CAACmF,aAAa,CAAC,QAAQ,CAAC;IAC5B,IAAI,CAACA,aAAa,CAAC,OAAO,CAAC;IAC3B,MAAMlD,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAMqC,UAAU,GAAG,IAAI,CAACoB,oBAAoB,EAAE;IAC9C,MAAMkD,MAAM,GAAG,IAAI,CAACyC,0BAA0B,EAAE;IAEhD,IAAI/G,UAAU,CAACwH,MAAM,KAAK,CAAC,IAAIlD,MAAM,CAACkD,MAAM,KAAK,CAAC,EAAE;MAClD,MAAM,IAAI,CAAChI,UAAU,EAAE;IACzB;IAEA,OAAO,IAAI,CAAC1B,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAAC+J,2BAA2B;MAC7ClI,IAAI;MACJG,UAAU;MACVsE;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;;EAEEnF,wBAAwB,GAAG;IACzB,MAAME,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMsH,WAAW,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAC3C,IAAI,CAAClC,aAAa,CAAC,WAAW,CAAC;IAC/B,IAAI,CAACnG,WAAW,CAACL,UAAU,CAACM,SAAS,CAAC2H,EAAE,CAAC;IACzC,MAAM3E,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAC7B,MAAMoI,IAAI,GAAG,IAAI,CAACC,iBAAiB,EAAE;IACrC,MAAMgC,UAAU,GAAG,IAAI,CAACvF,qBAAqB,CAAC,YAAY,CAAC;IAC3D,IAAI,CAACM,aAAa,CAAC,IAAI,CAAC;IACxB,MAAMkF,SAAS,GAAG,IAAI,CAACC,uBAAuB,EAAE;IAChD,OAAO,IAAI,CAACpK,IAAI,CAACuB,KAAK,EAAE;MACtBtB,IAAI,EAAE3B,MAAM,CAAC4B,IAAI,CAACmK,oBAAoB;MACtCjD,WAAW;MACXrF,IAAI;MACJoC,SAAS,EAAE8D,IAAI;MACfiC,UAAU;MACVC;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;;EAEEC,uBAAuB,GAAG;IACxB,OAAO,IAAI,CAACtC,aAAa,CACvBrJ,UAAU,CAACM,SAAS,CAAC2J,IAAI,EACzB,IAAI,CAAC4B,sBAAsB,CAC5B;EACH;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEA,sBAAsB,GAAG;IACvB,MAAM/I,KAAK,GAAG,IAAI,CAAChD,MAAM,CAACuB,KAAK;IAC/B,MAAMiC,IAAI,GAAG,IAAI,CAAClC,SAAS,EAAE;IAE7B,IACEpC,MAAM,CAAC8M,SAAS,CAACC,cAAc,CAACC,IAAI,CAClCpM,kBAAkB,CAACqM,iBAAiB,EACpC3I,IAAI,CAACnE,KAAK,CACX,EACD;MACA,OAAOmE,IAAI;IACb;IAEA,MAAM,IAAI,CAACL,UAAU,CAACH,KAAK,CAAC;EAC9B,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;;EAEEvB,IAAI,CAAC2K,UAAU,EAAE3K,IAAI,EAAE;IACrB,IAAI,IAAI,CAACL,QAAQ,CAACiL,UAAU,KAAK,IAAI,EAAE;MACrC5K,IAAI,CAAC6K,GAAG,GAAG,IAAIzM,IAAI,CAAC0M,QAAQ,CAC1BH,UAAU,EACV,IAAI,CAACpM,MAAM,CAACwM,SAAS,EACrB,IAAI,CAACxM,MAAM,CAACG,MAAM,CACnB;IACH;IAEA,OAAOsB,IAAI;EACb;EACA;AACF;AACA;;EAEEO,IAAI,CAACN,IAAI,EAAE;IACT,OAAO,IAAI,CAAC1B,MAAM,CAACuB,KAAK,CAACG,IAAI,KAAKA,IAAI;EACxC;EACA;AACF;AACA;AACA;;EAEEnB,WAAW,CAACmB,IAAI,EAAE;IAChB,MAAMH,KAAK,GAAG,IAAI,CAACvB,MAAM,CAACuB,KAAK;IAE/B,IAAIA,KAAK,CAACG,IAAI,KAAKA,IAAI,EAAE;MACvB,IAAI,CAACuF,YAAY,EAAE;MACnB,OAAO1F,KAAK;IACd;IAEA,MAAM,CAAC,CAAC,EAAE5B,YAAY,CAACoD,WAAW,EAChC,IAAI,CAAC/C,MAAM,CAACG,MAAM,EAClBoB,KAAK,CAACyB,KAAK,EACV,YAAWyJ,gBAAgB,CAAC/K,IAAI,CAAE,WAAU+I,YAAY,CAAClJ,KAAK,CAAE,GAAE,CACpE;EACH;EACA;AACF;AACA;AACA;;EAEEsD,mBAAmB,CAACnD,IAAI,EAAE;IACxB,MAAMH,KAAK,GAAG,IAAI,CAACvB,MAAM,CAACuB,KAAK;IAE/B,IAAIA,KAAK,CAACG,IAAI,KAAKA,IAAI,EAAE;MACvB,IAAI,CAACuF,YAAY,EAAE;MACnB,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EACA;AACF;AACA;AACA;;EAEEP,aAAa,CAACrH,KAAK,EAAE;IACnB,MAAMkC,KAAK,GAAG,IAAI,CAACvB,MAAM,CAACuB,KAAK;IAE/B,IAAIA,KAAK,CAACG,IAAI,KAAKxB,UAAU,CAACM,SAAS,CAACgB,IAAI,IAAID,KAAK,CAAClC,KAAK,KAAKA,KAAK,EAAE;MACrE,IAAI,CAAC4H,YAAY,EAAE;IACrB,CAAC,MAAM;MACL,MAAM,CAAC,CAAC,EAAEtH,YAAY,CAACoD,WAAW,EAChC,IAAI,CAAC/C,MAAM,CAACG,MAAM,EAClBoB,KAAK,CAACyB,KAAK,EACV,aAAY3D,KAAM,YAAWoL,YAAY,CAAClJ,KAAK,CAAE,GAAE,CACrD;IACH;EACF;EACA;AACF;AACA;AACA;;EAEE6E,qBAAqB,CAAC/G,KAAK,EAAE;IAC3B,MAAMkC,KAAK,GAAG,IAAI,CAACvB,MAAM,CAACuB,KAAK;IAE/B,IAAIA,KAAK,CAACG,IAAI,KAAKxB,UAAU,CAACM,SAAS,CAACgB,IAAI,IAAID,KAAK,CAAClC,KAAK,KAAKA,KAAK,EAAE;MACrE,IAAI,CAAC4H,YAAY,EAAE;MACnB,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EACA;AACF;AACA;;EAEE9D,UAAU,CAACuJ,OAAO,EAAE;IAClB,MAAMnL,KAAK,GACTmL,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAGA,OAAO,GAAG,IAAI,CAAC1M,MAAM,CAACuB,KAAK;IACtE,OAAO,CAAC,CAAC,EAAE5B,YAAY,CAACoD,WAAW,EACjC,IAAI,CAAC/C,MAAM,CAACG,MAAM,EAClBoB,KAAK,CAACyB,KAAK,EACV,cAAayH,YAAY,CAAClJ,KAAK,CAAE,GAAE,CACrC;EACH;EACA;AACF;AACA;AACA;AACA;;EAEEsG,GAAG,CAAC8E,QAAQ,EAAEC,OAAO,EAAEC,SAAS,EAAE;IAChC,IAAI,CAACtM,WAAW,CAACoM,QAAQ,CAAC;IAC1B,MAAMG,KAAK,GAAG,EAAE;IAEhB,OAAO,CAAC,IAAI,CAACjI,mBAAmB,CAACgI,SAAS,CAAC,EAAE;MAC3CC,KAAK,CAAC1E,IAAI,CAACwE,OAAO,CAACV,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC;IAEA,OAAOY,KAAK;EACd;EACA;AACF;AACA;AACA;AACA;AACA;;EAEE1I,YAAY,CAACuI,QAAQ,EAAEC,OAAO,EAAEC,SAAS,EAAE;IACzC,IAAI,IAAI,CAAChI,mBAAmB,CAAC8H,QAAQ,CAAC,EAAE;MACtC,MAAMG,KAAK,GAAG,EAAE;MAEhB,GAAG;QACDA,KAAK,CAAC1E,IAAI,CAACwE,OAAO,CAACV,IAAI,CAAC,IAAI,CAAC,CAAC;MAChC,CAAC,QAAQ,CAAC,IAAI,CAACrH,mBAAmB,CAACgI,SAAS,CAAC;MAE7C,OAAOC,KAAK;IACd;IAEA,OAAO,EAAE;EACX;EACA;AACF;AACA;AACA;AACA;;EAEEhL,IAAI,CAAC6K,QAAQ,EAAEC,OAAO,EAAEC,SAAS,EAAE;IACjC,IAAI,CAACtM,WAAW,CAACoM,QAAQ,CAAC;IAC1B,MAAMG,KAAK,GAAG,EAAE;IAEhB,GAAG;MACDA,KAAK,CAAC1E,IAAI,CAACwE,OAAO,CAACV,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC,QAAQ,CAAC,IAAI,CAACrH,mBAAmB,CAACgI,SAAS,CAAC;IAE7C,OAAOC,KAAK;EACd;EACA;AACF;AACA;AACA;AACA;;EAEEvD,aAAa,CAACwD,aAAa,EAAEH,OAAO,EAAE;IACpC,IAAI,CAAC/H,mBAAmB,CAACkI,aAAa,CAAC;IACvC,MAAMD,KAAK,GAAG,EAAE;IAEhB,GAAG;MACDA,KAAK,CAAC1E,IAAI,CAACwE,OAAO,CAACV,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC,QAAQ,IAAI,CAACrH,mBAAmB,CAACkI,aAAa,CAAC;IAEhD,OAAOD,KAAK;EACd;EAEA7F,YAAY,GAAG;IACb,MAAM;MAAE+F;IAAU,CAAC,GAAG,IAAI,CAAC5L,QAAQ;IAEnC,MAAMG,KAAK,GAAG,IAAI,CAACvB,MAAM,CAACiN,OAAO,EAAE;IAEnC,IAAID,SAAS,KAAKvJ,SAAS,IAAIlC,KAAK,CAACG,IAAI,KAAKxB,UAAU,CAACM,SAAS,CAACG,GAAG,EAAE;MACtE,EAAE,IAAI,CAACU,aAAa;MAEpB,IAAI,IAAI,CAACA,aAAa,GAAG2L,SAAS,EAAE;QAClC,MAAM,CAAC,CAAC,EAAErN,YAAY,CAACoD,WAAW,EAChC,IAAI,CAAC/C,MAAM,CAACG,MAAM,EAClBoB,KAAK,CAACyB,KAAK,EACV,+BAA8BgK,SAAU,2BAA0B,CACpE;MACH;IACF;EACF;AACF;AACA;AACA;AACA;;AAEA5N,OAAO,CAACE,MAAM,GAAGA,MAAM;AAEvB,SAASmL,YAAY,CAAClJ,KAAK,EAAE;EAC3B,MAAMlC,KAAK,GAAGkC,KAAK,CAAClC,KAAK;EACzB,OAAOoN,gBAAgB,CAAClL,KAAK,CAACG,IAAI,CAAC,IAAIrC,KAAK,IAAI,IAAI,GAAI,KAAIA,KAAM,GAAE,GAAG,EAAE,CAAC;AAC5E;AACA;AACA;AACA;;AAEA,SAASoN,gBAAgB,CAAC/K,IAAI,EAAE;EAC9B,OAAO,CAAC,CAAC,EAAE1B,MAAM,CAACkN,qBAAqB,EAAExL,IAAI,CAAC,GAAI,IAAGA,IAAK,GAAE,GAAGA,IAAI;AACrE"},"metadata":{},"sourceType":"script","externalDependencies":[]}