{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;\nvar _GraphQLError = require('../../../error/GraphQLError.js');\nvar _definition = require('../../../type/definition.js');\nvar _introspection = require('../../../type/introspection.js');\n\n/**\n * Prohibit introspection queries\n *\n * A GraphQL document is only valid if all fields selected are not fields that\n * return an introspection type.\n *\n * Note: This rule is optional and is not part of the Validation section of the\n * GraphQL Specification. This rule effectively disables introspection, which\n * does not reflect best practices and should only be done if absolutely necessary.\n */\nfunction NoSchemaIntrospectionCustomRule(context) {\n  return {\n    Field(node) {\n      const type = (0, _definition.getNamedType)(context.getType());\n      if (type && (0, _introspection.isIntrospectionType)(type)) {\n        context.reportError(new _GraphQLError.GraphQLError(`GraphQL introspection has been disabled, but the requested query contained the field \"${node.name.value}\".`, {\n          nodes: node\n        }));\n      }\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","NoSchemaIntrospectionCustomRule","_GraphQLError","require","_definition","_introspection","context","Field","node","type","getNamedType","getType","isIntrospectionType","reportError","GraphQLError","name","nodes"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;\n\nvar _GraphQLError = require('../../../error/GraphQLError.js');\n\nvar _definition = require('../../../type/definition.js');\n\nvar _introspection = require('../../../type/introspection.js');\n\n/**\n * Prohibit introspection queries\n *\n * A GraphQL document is only valid if all fields selected are not fields that\n * return an introspection type.\n *\n * Note: This rule is optional and is not part of the Validation section of the\n * GraphQL Specification. This rule effectively disables introspection, which\n * does not reflect best practices and should only be done if absolutely necessary.\n */\nfunction NoSchemaIntrospectionCustomRule(context) {\n  return {\n    Field(node) {\n      const type = (0, _definition.getNamedType)(context.getType());\n\n      if (type && (0, _introspection.isIntrospectionType)(type)) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `GraphQL introspection has been disabled, but the requested query contained the field \"${node.name.value}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,+BAA+B,GAAGA,+BAA+B;AAEzE,IAAIC,aAAa,GAAGC,OAAO,CAAC,gCAAgC,CAAC;AAE7D,IAAIC,WAAW,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAExD,IAAIE,cAAc,GAAGF,OAAO,CAAC,gCAAgC,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,+BAA+B,CAACK,OAAO,EAAE;EAChD,OAAO;IACLC,KAAK,CAACC,IAAI,EAAE;MACV,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAEL,WAAW,CAACM,YAAY,EAAEJ,OAAO,CAACK,OAAO,EAAE,CAAC;MAE7D,IAAIF,IAAI,IAAI,CAAC,CAAC,EAAEJ,cAAc,CAACO,mBAAmB,EAAEH,IAAI,CAAC,EAAE;QACzDH,OAAO,CAACO,WAAW,CACjB,IAAIX,aAAa,CAACY,YAAY,CAC3B,yFAAwFN,IAAI,CAACO,IAAI,CAACf,KAAM,IAAG,EAC5G;UACEgB,KAAK,EAAER;QACT,CAAC,CACF,CACF;MACH;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}