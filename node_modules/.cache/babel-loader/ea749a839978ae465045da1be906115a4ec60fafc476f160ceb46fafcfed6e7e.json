{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;\nvar _GraphQLError = require('../../error/GraphQLError.js');\nvar _kinds = require('../../language/kinds.js');\nvar _collectFields = require('../../execution/collectFields.js');\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nfunction SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n          for (const definition of document.definitions) {\n            if (definition.kind === _kinds.Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n          const fields = (0, _collectFields.collectFields)(schema, fragments, variableValues, subscriptionType, node.selectionSet);\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(new _GraphQLError.GraphQLError(operationName != null ? `Subscription \"${operationName}\" must select only one top level field.` : 'Anonymous Subscription must select only one top level field.', {\n              nodes: extraFieldSelections\n            }));\n          }\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n            if (fieldName.startsWith('__')) {\n              context.reportError(new _GraphQLError.GraphQLError(operationName != null ? `Subscription \"${operationName}\" must not select an introspection top level field.` : 'Anonymous Subscription must not select an introspection top level field.', {\n                nodes: fieldNodes\n              }));\n            }\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","SingleFieldSubscriptionsRule","_GraphQLError","require","_kinds","_collectFields","context","OperationDefinition","node","operation","schema","getSchema","subscriptionType","getSubscriptionType","operationName","name","variableValues","create","document","getDocument","fragments","definition","definitions","kind","Kind","FRAGMENT_DEFINITION","fields","collectFields","selectionSet","size","fieldSelectionLists","values","extraFieldSelectionLists","slice","extraFieldSelections","flat","reportError","GraphQLError","nodes","fieldNodes","field","fieldName","startsWith"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _collectFields = require('../../execution/collectFields.js');\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nfunction SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === _kinds.Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = (0, _collectFields.collectFields)(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new _GraphQLError.GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,4BAA4B,GAAGA,4BAA4B;AAEnE,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AAE1D,IAAIC,MAAM,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAE/C,IAAIE,cAAc,GAAGF,OAAO,CAAC,kCAAkC,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,4BAA4B,CAACK,OAAO,EAAE;EAC7C,OAAO;IACLC,mBAAmB,CAACC,IAAI,EAAE;MACxB,IAAIA,IAAI,CAACC,SAAS,KAAK,cAAc,EAAE;QACrC,MAAMC,MAAM,GAAGJ,OAAO,CAACK,SAAS,EAAE;QAClC,MAAMC,gBAAgB,GAAGF,MAAM,CAACG,mBAAmB,EAAE;QAErD,IAAID,gBAAgB,EAAE;UACpB,MAAME,aAAa,GAAGN,IAAI,CAACO,IAAI,GAAGP,IAAI,CAACO,IAAI,CAACf,KAAK,GAAG,IAAI;UACxD,MAAMgB,cAAc,GAAGnB,MAAM,CAACoB,MAAM,CAAC,IAAI,CAAC;UAC1C,MAAMC,QAAQ,GAAGZ,OAAO,CAACa,WAAW,EAAE;UACtC,MAAMC,SAAS,GAAGvB,MAAM,CAACoB,MAAM,CAAC,IAAI,CAAC;UAErC,KAAK,MAAMI,UAAU,IAAIH,QAAQ,CAACI,WAAW,EAAE;YAC7C,IAAID,UAAU,CAACE,IAAI,KAAKnB,MAAM,CAACoB,IAAI,CAACC,mBAAmB,EAAE;cACvDL,SAAS,CAACC,UAAU,CAACN,IAAI,CAACf,KAAK,CAAC,GAAGqB,UAAU;YAC/C;UACF;UAEA,MAAMK,MAAM,GAAG,CAAC,CAAC,EAAErB,cAAc,CAACsB,aAAa,EAC7CjB,MAAM,EACNU,SAAS,EACTJ,cAAc,EACdJ,gBAAgB,EAChBJ,IAAI,CAACoB,YAAY,CAClB;UAED,IAAIF,MAAM,CAACG,IAAI,GAAG,CAAC,EAAE;YACnB,MAAMC,mBAAmB,GAAG,CAAC,GAAGJ,MAAM,CAACK,MAAM,EAAE,CAAC;YAChD,MAAMC,wBAAwB,GAAGF,mBAAmB,CAACG,KAAK,CAAC,CAAC,CAAC;YAC7D,MAAMC,oBAAoB,GAAGF,wBAAwB,CAACG,IAAI,EAAE;YAC5D7B,OAAO,CAAC8B,WAAW,CACjB,IAAIlC,aAAa,CAACmC,YAAY,CAC5BvB,aAAa,IAAI,IAAI,GAChB,iBAAgBA,aAAc,yCAAwC,GACvE,8DAA8D,EAClE;cACEwB,KAAK,EAAEJ;YACT,CAAC,CACF,CACF;UACH;UAEA,KAAK,MAAMK,UAAU,IAAIb,MAAM,CAACK,MAAM,EAAE,EAAE;YACxC,MAAMS,KAAK,GAAGD,UAAU,CAAC,CAAC,CAAC;YAC3B,MAAME,SAAS,GAAGD,KAAK,CAACzB,IAAI,CAACf,KAAK;YAElC,IAAIyC,SAAS,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;cAC9BpC,OAAO,CAAC8B,WAAW,CACjB,IAAIlC,aAAa,CAACmC,YAAY,CAC5BvB,aAAa,IAAI,IAAI,GAChB,iBAAgBA,aAAc,qDAAoD,GACnF,0EAA0E,EAC9E;gBACEwB,KAAK,EAAEC;cACT,CAAC,CACF,CACF;YACH;UACF;QACF;MACF;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}