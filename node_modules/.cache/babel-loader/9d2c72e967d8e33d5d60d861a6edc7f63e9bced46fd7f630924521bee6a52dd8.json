{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;\nvar _inspect = require('../../jsutils/inspect.js');\nvar _GraphQLError = require('../../error/GraphQLError.js');\nvar _kinds = require('../../language/kinds.js');\nvar _printer = require('../../language/printer.js');\nvar _definition = require('../../type/definition.js');\nvar _sortValueNode = require('../../utilities/sortValueNode.js');\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(_ref => {\n      let [responseName, subReason] = _ref;\n      return `subfields \"${responseName}\" conflict because ` + reasonMessage(subReason);\n    }).join(' and ');\n  }\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\n */\n\nfunction OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(new _GraphQLError.GraphQLError(`Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`, {\n          nodes: fields1.concat(fields2)\n        }));\n      }\n    }\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  const fragment = context.getFragment(fragmentName);\n  if (!fragment) {\n    return;\n  }\n  const [fieldMap2, referencedFragmentNames] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (const referencedFragmentName of referencedFragmentNames) {\n    // Memoize so two fragments are not compared for conflicts more than once.\n    if (comparedFragmentPairs.has(referencedFragmentName, fragmentName, areMutuallyExclusive)) {\n      continue;\n    }\n    comparedFragmentPairs.add(referencedFragmentName, fragmentName, areMutuallyExclusive);\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, referencedFragmentName);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n  const [fieldMap1, referencedFragmentNames1] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1);\n  const [fieldMap2, referencedFragmentNames2] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, referencedFragmentName2);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, referencedFragmentName1, fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1);\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  for (const fragmentName2 of fragmentNames2) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentName2);\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n  for (const fragmentName1 of fragmentNames1) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentName1);\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n  for (const fragmentName1 of fragmentNames1) {\n    for (const fragmentName2 of fragmentNames2) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2);\n    }\n  }\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false,\n          // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n    if (fields2) {\n      for (const field1 of fields1) {\n        for (const field2 of fields2) {\n          const conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2);\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition.isObjectType)(parentType1) && (0, _definition.isObjectType)(parentType2);\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n    if (name1 !== name2) {\n      return [[responseName, `\"${name1}\" and \"${name2}\" are different fields`], [node1], [node2]];\n    } // Two field calls must have the same arguments.\n\n    if (stringifyArguments(node1) !== stringifyArguments(node2)) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  } // The return type for each field.\n\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, `they return conflicting types \"${(0, _inspect.inspect)(type1)}\" and \"${(0, _inspect.inspect)(type2)}\"`], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\nfunction stringifyArguments(fieldNode) {\n  var _fieldNode$arguments;\n\n  // FIXME https://github.com/graphql/graphql-js/issues/2203\n  const args = /* c8 ignore next */\n  (_fieldNode$arguments = fieldNode.arguments) !== null && _fieldNode$arguments !== void 0 ? _fieldNode$arguments : [];\n  const inputObjectWithArgs = {\n    kind: _kinds.Kind.OBJECT,\n    fields: args.map(argNode => ({\n      kind: _kinds.Kind.OBJECT_FIELD,\n      name: argNode.name,\n      value: argNode.value\n    }))\n  };\n  return (0, _printer.print)((0, _sortValueNode.sortValueNode)(inputObjectWithArgs));\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\nfunction doTypesConflict(type1, type2) {\n  if ((0, _definition.isListType)(type1)) {\n    return (0, _definition.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if ((0, _definition.isListType)(type2)) {\n    return true;\n  }\n  if ((0, _definition.isNonNullType)(type1)) {\n    return (0, _definition.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n  if ((0, _definition.isNonNullType)(type2)) {\n    return true;\n  }\n  if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {\n    return type1 !== type2;\n  }\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\n  if (cached) {\n    return cached;\n  }\n  const nodeAndDefs = Object.create(null);\n  const fragmentNames = Object.create(null);\n  _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\n  return result;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n  if (cached) {\n    return cached;\n  }\n  const fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case _kinds.Kind.FIELD:\n        {\n          const fieldName = selection.name.value;\n          let fieldDef;\n          if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {\n            fieldDef = parentType.getFields()[fieldName];\n          }\n          const responseName = selection.alias ? selection.alias.value : fieldName;\n          if (!nodeAndDefs[responseName]) {\n            nodeAndDefs[responseName] = [];\n          }\n          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n          break;\n        }\n      case _kinds.Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n      case _kinds.Kind.INLINE_FRAGMENT:\n        {\n          const typeCondition = selection.typeCondition;\n          const inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;\n          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n          break;\n        }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(_ref2 => {\n      let [reason] = _ref2;\n      return reason;\n    })], [node1, ...conflicts.map(_ref3 => {\n      let [, fields1] = _ref3;\n      return fields1;\n    }).flat()], [node2, ...conflicts.map(_ref4 => {\n      let [,, fields2] = _ref4;\n      return fields2;\n    }).flat()]];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does not matter.\n */\n\nclass PairSet {\n  constructor() {\n    this._data = new Map();\n  }\n  has(a, b, areMutuallyExclusive) {\n    var _this$_data$get;\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n    const result = (_this$_data$get = this._data.get(key1)) === null || _this$_data$get === void 0 ? void 0 : _this$_data$get.get(key2);\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true, hence if\n    // we want to know if this PairSet \"has\" these two with no exclusivity,\n    // we have to ensure it was added as such.\n\n    return areMutuallyExclusive ? true : areMutuallyExclusive === result;\n  }\n  add(a, b, areMutuallyExclusive) {\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n    const map = this._data.get(key1);\n    if (map === undefined) {\n      this._data.set(key1, new Map([[key2, areMutuallyExclusive]]));\n    } else {\n      map.set(key2, areMutuallyExclusive);\n    }\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","OverlappingFieldsCanBeMergedRule","_inspect","require","_GraphQLError","_kinds","_printer","_definition","_sortValueNode","_typeFromAST","reasonMessage","reason","Array","isArray","map","responseName","subReason","join","context","comparedFragmentPairs","PairSet","cachedFieldsAndFragmentNames","Map","SelectionSet","selectionSet","conflicts","findConflictsWithinSelectionSet","getParentType","fields1","fields2","reasonMsg","reportError","GraphQLError","nodes","concat","parentType","fieldMap","fragmentNames","getFieldsAndFragmentNames","collectConflictsWithin","length","i","collectConflictsBetweenFieldsAndFragment","j","collectConflictsBetweenFragments","areMutuallyExclusive","fragmentName","fragment","getFragment","fieldMap2","referencedFragmentNames","getReferencedFieldsAndFragmentNames","collectConflictsBetween","referencedFragmentName","has","add","fragmentName1","fragmentName2","fragment1","fragment2","fieldMap1","referencedFragmentNames1","referencedFragmentNames2","referencedFragmentName2","referencedFragmentName1","findConflictsBetweenSubSelectionSets","parentType1","selectionSet1","parentType2","selectionSet2","fragmentNames1","fragmentNames2","fields","entries","conflict","findConflict","push","parentFieldsAreMutuallyExclusive","field1","field2","node1","def1","node2","def2","isObjectType","name1","name","name2","stringifyArguments","type1","type","type2","doTypesConflict","inspect","getNamedType","subfieldConflicts","fieldNode","_fieldNode$arguments","args","arguments","inputObjectWithArgs","kind","Kind","OBJECT","argNode","OBJECT_FIELD","print","sortValueNode","isListType","ofType","isNonNullType","isLeafType","cached","get","nodeAndDefs","create","_collectFieldsAndFragmentNames","result","keys","set","fragmentType","typeFromAST","getSchema","typeCondition","selection","selections","FIELD","fieldName","fieldDef","isInterfaceType","getFields","alias","FRAGMENT_SPREAD","INLINE_FRAGMENT","inlineFragmentType","flat","constructor","_data","a","b","_this$_data$get","key1","key2","undefined"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;\n\nvar _inspect = require('../../jsutils/inspect.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _printer = require('../../language/printer.js');\n\nvar _definition = require('../../type/definition.js');\n\nvar _sortValueNode = require('../../utilities/sortValueNode.js');\n\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason\n      .map(\n        ([responseName, subReason]) =>\n          `subfields \"${responseName}\" conflict because ` +\n          reasonMessage(subReason),\n      )\n      .join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\n */\n\nfunction OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(\n        context,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        context.getParentType(),\n        selectionSet,\n      );\n\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,\n            {\n              nodes: fields1.concat(fields2),\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentType,\n  selectionSet,\n) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType,\n    selectionSet,\n  ); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    fieldMap,\n  );\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        false,\n        fieldMap,\n        fragmentNames[i],\n      ); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(\n          context,\n          conflicts,\n          cachedFieldsAndFragmentNames,\n          comparedFragmentPairs,\n          false,\n          fragmentNames[i],\n          fragmentNames[j],\n        );\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\nfunction collectConflictsBetweenFieldsAndFragment(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fieldMap,\n  fragmentName,\n) {\n  const fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  const [fieldMap2, referencedFragmentNames] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment,\n    ); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap,\n    fieldMap2,\n  ); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (const referencedFragmentName of referencedFragmentNames) {\n    // Memoize so two fragments are not compared for conflicts more than once.\n    if (\n      comparedFragmentPairs.has(\n        referencedFragmentName,\n        fragmentName,\n        areMutuallyExclusive,\n      )\n    ) {\n      continue;\n    }\n\n    comparedFragmentPairs.add(\n      referencedFragmentName,\n      fragmentName,\n      areMutuallyExclusive,\n    );\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap,\n      referencedFragmentName,\n    );\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\nfunction collectConflictsBetweenFragments(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fragmentName1,\n  fragmentName2,\n) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n  if (\n    comparedFragmentPairs.has(\n      fragmentName1,\n      fragmentName2,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  const [fieldMap1, referencedFragmentNames1] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment1,\n    );\n  const [fieldMap2, referencedFragmentNames2] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment2,\n    ); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fragmentName1,\n      referencedFragmentName2,\n    );\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      referencedFragmentName1,\n      fragmentName2,\n    );\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\nfunction findConflictsBetweenSubSelectionSets(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  parentType1,\n  selectionSet1,\n  parentType2,\n  selectionSet2,\n) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType1,\n    selectionSet1,\n  );\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType2,\n    selectionSet2,\n  ); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  for (const fragmentName2 of fragmentNames2) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap1,\n      fragmentName2,\n    );\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n  for (const fragmentName1 of fragmentNames1) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap2,\n      fragmentName1,\n    );\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n  for (const fragmentName1 of fragmentNames1) {\n    for (const fragmentName2 of fragmentNames2) {\n      collectConflictsBetweenFragments(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        areMutuallyExclusive,\n        fragmentName1,\n        fragmentName2,\n      );\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\nfunction collectConflictsWithin(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  fieldMap,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFragmentPairs,\n            false, // within one collection is never mutually exclusive\n            responseName,\n            fields[i],\n            fields[j],\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\nfunction collectConflictsBetween(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  fieldMap1,\n  fieldMap2,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      for (const field1 of fields1) {\n        for (const field2 of fields2) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFragmentPairs,\n            parentFieldsAreMutuallyExclusive,\n            responseName,\n            field1,\n            field2,\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\nfunction findConflict(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  responseName,\n  field1,\n  field2,\n) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive =\n    parentFieldsAreMutuallyExclusive ||\n    (parentType1 !== parentType2 &&\n      (0, _definition.isObjectType)(parentType1) &&\n      (0, _definition.isObjectType)(parentType2));\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [\n        [responseName, `\"${name1}\" and \"${name2}\" are different fields`],\n        [node1],\n        [node2],\n      ];\n    } // Two field calls must have the same arguments.\n\n    if (stringifyArguments(node1) !== stringifyArguments(node2)) {\n      return [\n        [responseName, 'they have differing arguments'],\n        [node1],\n        [node2],\n      ];\n    }\n  } // The return type for each field.\n\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [\n      [\n        responseName,\n        `they return conflicting types \"${(0, _inspect.inspect)(\n          type1,\n        )}\" and \"${(0, _inspect.inspect)(type2)}\"`,\n      ],\n      [node1],\n      [node2],\n    ];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(\n      context,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      (0, _definition.getNamedType)(type1),\n      selectionSet1,\n      (0, _definition.getNamedType)(type2),\n      selectionSet2,\n    );\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction stringifyArguments(fieldNode) {\n  var _fieldNode$arguments;\n\n  // FIXME https://github.com/graphql/graphql-js/issues/2203\n  const args =\n    /* c8 ignore next */\n    (_fieldNode$arguments = fieldNode.arguments) !== null &&\n    _fieldNode$arguments !== void 0\n      ? _fieldNode$arguments\n      : [];\n  const inputObjectWithArgs = {\n    kind: _kinds.Kind.OBJECT,\n    fields: args.map((argNode) => ({\n      kind: _kinds.Kind.OBJECT_FIELD,\n      name: argNode.name,\n      value: argNode.value,\n    })),\n  };\n  return (0, _printer.print)(\n    (0, _sortValueNode.sortValueNode)(inputObjectWithArgs),\n  );\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\nfunction doTypesConflict(type1, type2) {\n  if ((0, _definition.isListType)(type1)) {\n    return (0, _definition.isListType)(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if ((0, _definition.isListType)(type2)) {\n    return true;\n  }\n\n  if ((0, _definition.isNonNullType)(type1)) {\n    return (0, _definition.isNonNullType)(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if ((0, _definition.isNonNullType)(type2)) {\n    return true;\n  }\n\n  if (\n    (0, _definition.isLeafType)(type1) ||\n    (0, _definition.isLeafType)(type2)\n  ) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\nfunction getFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  parentType,\n  selectionSet,\n) {\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const nodeAndDefs = Object.create(null);\n  const fragmentNames = Object.create(null);\n\n  _collectFieldsAndFragmentNames(\n    context,\n    parentType,\n    selectionSet,\n    nodeAndDefs,\n    fragmentNames,\n  );\n\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\n  return result;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\nfunction getReferencedFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  fragment,\n) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const fragmentType = (0, _typeFromAST.typeFromAST)(\n    context.getSchema(),\n    fragment.typeCondition,\n  );\n  return getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    fragmentType,\n    fragment.selectionSet,\n  );\n}\n\nfunction _collectFieldsAndFragmentNames(\n  context,\n  parentType,\n  selectionSet,\n  nodeAndDefs,\n  fragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case _kinds.Kind.FIELD: {\n        const fieldName = selection.name.value;\n        let fieldDef;\n\n        if (\n          (0, _definition.isObjectType)(parentType) ||\n          (0, _definition.isInterfaceType)(parentType)\n        ) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n\n        const responseName = selection.alias\n          ? selection.alias.value\n          : fieldName;\n\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      }\n\n      case _kinds.Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case _kinds.Kind.INLINE_FRAGMENT: {\n        const typeCondition = selection.typeCondition;\n        const inlineFragmentType = typeCondition\n          ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition)\n          : parentType;\n\n        _collectFieldsAndFragmentNames(\n          context,\n          inlineFragmentType,\n          selection.selectionSet,\n          nodeAndDefs,\n          fragmentNames,\n        );\n\n        break;\n      }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [\n      [responseName, conflicts.map(([reason]) => reason)],\n      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],\n      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()],\n    ];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does not matter.\n */\n\nclass PairSet {\n  constructor() {\n    this._data = new Map();\n  }\n\n  has(a, b, areMutuallyExclusive) {\n    var _this$_data$get;\n\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n    const result =\n      (_this$_data$get = this._data.get(key1)) === null ||\n      _this$_data$get === void 0\n        ? void 0\n        : _this$_data$get.get(key2);\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true, hence if\n    // we want to know if this PairSet \"has\" these two with no exclusivity,\n    // we have to ensure it was added as such.\n\n    return areMutuallyExclusive ? true : areMutuallyExclusive === result;\n  }\n\n  add(a, b, areMutuallyExclusive) {\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n\n    const map = this._data.get(key1);\n\n    if (map === undefined) {\n      this._data.set(key1, new Map([[key2, areMutuallyExclusive]]));\n    } else {\n      map.set(key2, areMutuallyExclusive);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}