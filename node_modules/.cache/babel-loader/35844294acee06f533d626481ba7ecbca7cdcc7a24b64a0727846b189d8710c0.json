{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.KnownTypeNamesRule = KnownTypeNamesRule;\nvar _didYouMean = require('../../jsutils/didYouMean.js');\nvar _suggestionList = require('../../jsutils/suggestionList.js');\nvar _GraphQLError = require('../../error/GraphQLError.js');\nvar _predicates = require('../../language/predicates.js');\nvar _introspection = require('../../type/introspection.js');\nvar _scalars = require('../../type/scalars.js');\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\nfunction KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n  for (const def of context.getDocument().definitions) {\n    if ((0, _predicates.isTypeDefinitionNode)(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n  const typeNames = [...Object.keys(existingTypesMap), ...Object.keys(definedTypes)];\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n        const definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n        const suggestedTypes = (0, _suggestionList.suggestionList)(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);\n        context.reportError(new _GraphQLError.GraphQLError(`Unknown type \"${typeName}\".` + (0, _didYouMean.didYouMean)(suggestedTypes), {\n          nodes: node\n        }));\n      }\n    }\n  };\n}\nconst standardTypeNames = [..._scalars.specifiedScalarTypes, ..._introspection.introspectionTypes].map(type => type.name);\nfunction isSDLNode(value) {\n  return 'kind' in value && ((0, _predicates.isTypeSystemDefinitionNode)(value) || (0, _predicates.isTypeSystemExtensionNode)(value));\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","KnownTypeNamesRule","_didYouMean","require","_suggestionList","_GraphQLError","_predicates","_introspection","_scalars","context","schema","getSchema","existingTypesMap","getTypeMap","create","definedTypes","def","getDocument","definitions","isTypeDefinitionNode","name","typeNames","keys","NamedType","node","_1","parent","_2","ancestors","typeName","_ancestors$","definitionNode","isSDL","isSDLNode","standardTypeNames","includes","suggestedTypes","suggestionList","concat","reportError","GraphQLError","didYouMean","nodes","specifiedScalarTypes","introspectionTypes","map","type","isTypeSystemDefinitionNode","isTypeSystemExtensionNode"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/KnownTypeNamesRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.KnownTypeNamesRule = KnownTypeNamesRule;\n\nvar _didYouMean = require('../../jsutils/didYouMean.js');\n\nvar _suggestionList = require('../../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _predicates = require('../../language/predicates.js');\n\nvar _introspection = require('../../type/introspection.js');\n\nvar _scalars = require('../../type/scalars.js');\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\nfunction KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if ((0, _predicates.isTypeDefinitionNode)(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  const typeNames = [\n    ...Object.keys(existingTypesMap),\n    ...Object.keys(definedTypes),\n  ];\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        const definitionNode =\n          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0\n            ? _ancestors$\n            : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n\n        const suggestedTypes = (0, _suggestionList.suggestionList)(\n          typeName,\n          isSDL ? standardTypeNames.concat(typeNames) : typeNames,\n        );\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Unknown type \"${typeName}\".` +\n              (0, _didYouMean.didYouMean)(suggestedTypes),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nconst standardTypeNames = [\n  ..._scalars.specifiedScalarTypes,\n  ..._introspection.introspectionTypes,\n].map((type) => type.name);\n\nfunction isSDLNode(value) {\n  return (\n    'kind' in value &&\n    ((0, _predicates.isTypeSystemDefinitionNode)(value) ||\n      (0, _predicates.isTypeSystemExtensionNode)(value))\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}