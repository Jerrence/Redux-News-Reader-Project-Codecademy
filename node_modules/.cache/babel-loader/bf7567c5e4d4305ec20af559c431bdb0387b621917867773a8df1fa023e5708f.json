{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;\nvar _GraphQLError = require('../../error/GraphQLError.js');\nvar _printer = require('../../language/printer.js');\nvar _definition = require('../../type/definition.js');\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nfunction FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n      if (typeCondition) {\n        const type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);\n        if (type && !(0, _definition.isCompositeType)(type)) {\n          const typeStr = (0, _printer.print)(typeCondition);\n          context.reportError(new _GraphQLError.GraphQLError(`Fragment cannot condition on non composite type \"${typeStr}\".`, {\n            nodes: typeCondition\n          }));\n        }\n      }\n    },\n    FragmentDefinition(node) {\n      const type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n      if (type && !(0, _definition.isCompositeType)(type)) {\n        const typeStr = (0, _printer.print)(node.typeCondition);\n        context.reportError(new _GraphQLError.GraphQLError(`Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`, {\n          nodes: node.typeCondition\n        }));\n      }\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","FragmentsOnCompositeTypesRule","_GraphQLError","require","_printer","_definition","_typeFromAST","context","InlineFragment","node","typeCondition","type","typeFromAST","getSchema","isCompositeType","typeStr","print","reportError","GraphQLError","nodes","FragmentDefinition","name"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _printer = require('../../language/printer.js');\n\nvar _definition = require('../../type/definition.js');\n\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nfunction FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = (0, _typeFromAST.typeFromAST)(\n          context.getSchema(),\n          typeCondition,\n        );\n\n        if (type && !(0, _definition.isCompositeType)(type)) {\n          const typeStr = (0, _printer.print)(typeCondition);\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              {\n                nodes: typeCondition,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = (0, _typeFromAST.typeFromAST)(\n        context.getSchema(),\n        node.typeCondition,\n      );\n\n      if (type && !(0, _definition.isCompositeType)(type)) {\n        const typeStr = (0, _printer.print)(node.typeCondition);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            {\n              nodes: node.typeCondition,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,6BAA6B,GAAGA,6BAA6B;AAErE,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AAE1D,IAAIC,QAAQ,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AAEnD,IAAIE,WAAW,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAErD,IAAIG,YAAY,GAAGH,OAAO,CAAC,gCAAgC,CAAC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,6BAA6B,CAACM,OAAO,EAAE;EAC9C,OAAO;IACLC,cAAc,CAACC,IAAI,EAAE;MACnB,MAAMC,aAAa,GAAGD,IAAI,CAACC,aAAa;MAExC,IAAIA,aAAa,EAAE;QACjB,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAEL,YAAY,CAACM,WAAW,EACvCL,OAAO,CAACM,SAAS,EAAE,EACnBH,aAAa,CACd;QAED,IAAIC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAEN,WAAW,CAACS,eAAe,EAAEH,IAAI,CAAC,EAAE;UACnD,MAAMI,OAAO,GAAG,CAAC,CAAC,EAAEX,QAAQ,CAACY,KAAK,EAAEN,aAAa,CAAC;UAClDH,OAAO,CAACU,WAAW,CACjB,IAAIf,aAAa,CAACgB,YAAY,CAC3B,oDAAmDH,OAAQ,IAAG,EAC/D;YACEI,KAAK,EAAET;UACT,CAAC,CACF,CACF;QACH;MACF;IACF,CAAC;IAEDU,kBAAkB,CAACX,IAAI,EAAE;MACvB,MAAME,IAAI,GAAG,CAAC,CAAC,EAAEL,YAAY,CAACM,WAAW,EACvCL,OAAO,CAACM,SAAS,EAAE,EACnBJ,IAAI,CAACC,aAAa,CACnB;MAED,IAAIC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAEN,WAAW,CAACS,eAAe,EAAEH,IAAI,CAAC,EAAE;QACnD,MAAMI,OAAO,GAAG,CAAC,CAAC,EAAEX,QAAQ,CAACY,KAAK,EAAEP,IAAI,CAACC,aAAa,CAAC;QACvDH,OAAO,CAACU,WAAW,CACjB,IAAIf,aAAa,CAACgB,YAAY,CAC3B,aAAYT,IAAI,CAACY,IAAI,CAACrB,KAAM,6CAA4Ce,OAAQ,IAAG,EACpF;UACEI,KAAK,EAAEV,IAAI,CAACC;QACd,CAAC,CACF,CACF;MACH;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}