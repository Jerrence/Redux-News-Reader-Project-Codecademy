{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;\nvar _didYouMean = require('../../jsutils/didYouMean.js');\nvar _naturalCompare = require('../../jsutils/naturalCompare.js');\nvar _suggestionList = require('../../jsutils/suggestionList.js');\nvar _GraphQLError = require('../../error/GraphQLError.js');\nvar _definition = require('../../type/definition.js');\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nfunction FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n      if (type) {\n        const fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = (0, _didYouMean.didYouMean)('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = (0, _didYouMean.didYouMean)(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(new _GraphQLError.GraphQLError(`Cannot query field \"${fieldName}\" on type \"${type.name}\".` + suggestion, {\n            nodes: node\n          }));\n        }\n      }\n    }\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!(0, _definition.isAbstractType)(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;\n    }\n  }\n  return [...suggestedTypes].sort((typeA, typeB) => {\n    // Suggest both interface and object types based on how common they are.\n    const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n    if (usageCountDiff !== 0) {\n      return usageCountDiff;\n    } // Suggest super types first followed by subtypes\n\n    if ((0, _definition.isInterfaceType)(typeA) && schema.isSubType(typeA, typeB)) {\n      return -1;\n    }\n    if ((0, _definition.isInterfaceType)(typeB) && schema.isSubType(typeB, typeA)) {\n      return 1;\n    }\n    return (0, _naturalCompare.naturalCompare)(typeA.name, typeB.name);\n  }).map(x => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return (0, _suggestionList.suggestionList)(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","FieldsOnCorrectTypeRule","_didYouMean","require","_naturalCompare","_suggestionList","_GraphQLError","_definition","context","Field","node","type","getParentType","fieldDef","getFieldDef","schema","getSchema","fieldName","name","suggestion","didYouMean","getSuggestedTypeNames","getSuggestedFieldNames","reportError","GraphQLError","nodes","isAbstractType","suggestedTypes","Set","usageCount","create","possibleType","getPossibleTypes","getFields","add","possibleInterface","getInterfaces","_usageCount$possibleI","sort","typeA","typeB","usageCountDiff","isInterfaceType","isSubType","naturalCompare","map","x","isObjectType","possibleFieldNames","keys","suggestionList"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;\n\nvar _didYouMean = require('../../jsutils/didYouMean.js');\n\nvar _naturalCompare = require('../../jsutils/naturalCompare.js');\n\nvar _suggestionList = require('../../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _definition = require('../../type/definition.js');\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nfunction FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = (0, _didYouMean.didYouMean)(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = (0, _didYouMean.didYouMean)(\n              getSuggestedFieldNames(type, fieldName),\n            );\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!(0, _definition.isAbstractType)(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (\n        (0, _definition.isInterfaceType)(typeA) &&\n        schema.isSubType(typeA, typeB)\n      ) {\n        return -1;\n      }\n\n      if (\n        (0, _definition.isInterfaceType)(typeB) &&\n        schema.isSubType(typeB, typeA)\n      ) {\n        return 1;\n      }\n\n      return (0, _naturalCompare.naturalCompare)(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (\n    (0, _definition.isObjectType)(type) ||\n    (0, _definition.isInterfaceType)(type)\n  ) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return (0, _suggestionList.suggestionList)(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB;AAEzD,IAAIC,WAAW,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AAExD,IAAIC,eAAe,GAAGD,OAAO,CAAC,iCAAiC,CAAC;AAEhE,IAAIE,eAAe,GAAGF,OAAO,CAAC,iCAAiC,CAAC;AAEhE,IAAIG,aAAa,GAAGH,OAAO,CAAC,6BAA6B,CAAC;AAE1D,IAAII,WAAW,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,uBAAuB,CAACO,OAAO,EAAE;EACxC,OAAO;IACLC,KAAK,CAACC,IAAI,EAAE;MACV,MAAMC,IAAI,GAAGH,OAAO,CAACI,aAAa,EAAE;MAEpC,IAAID,IAAI,EAAE;QACR,MAAME,QAAQ,GAAGL,OAAO,CAACM,WAAW,EAAE;QAEtC,IAAI,CAACD,QAAQ,EAAE;UACb;UACA,MAAME,MAAM,GAAGP,OAAO,CAACQ,SAAS,EAAE;UAClC,MAAMC,SAAS,GAAGP,IAAI,CAACQ,IAAI,CAAClB,KAAK,CAAC,CAAC;;UAEnC,IAAImB,UAAU,GAAG,CAAC,CAAC,EAAEjB,WAAW,CAACkB,UAAU,EACzC,8BAA8B,EAC9BC,qBAAqB,CAACN,MAAM,EAAEJ,IAAI,EAAEM,SAAS,CAAC,CAC/C,CAAC,CAAC;;UAEH,IAAIE,UAAU,KAAK,EAAE,EAAE;YACrBA,UAAU,GAAG,CAAC,CAAC,EAAEjB,WAAW,CAACkB,UAAU,EACrCE,sBAAsB,CAACX,IAAI,EAAEM,SAAS,CAAC,CACxC;UACH,CAAC,CAAC;;UAEFT,OAAO,CAACe,WAAW,CACjB,IAAIjB,aAAa,CAACkB,YAAY,CAC3B,uBAAsBP,SAAU,cAAaN,IAAI,CAACO,IAAK,IAAG,GACzDC,UAAU,EACZ;YACEM,KAAK,EAAEf;UACT,CAAC,CACF,CACF;QACH;MACF;IACF;EACF,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASW,qBAAqB,CAACN,MAAM,EAAEJ,IAAI,EAAEM,SAAS,EAAE;EACtD,IAAI,CAAC,CAAC,CAAC,EAAEV,WAAW,CAACmB,cAAc,EAAEf,IAAI,CAAC,EAAE;IAC1C;IACA,OAAO,EAAE;EACX;EAEA,MAAMgB,cAAc,GAAG,IAAIC,GAAG,EAAE;EAChC,MAAMC,UAAU,GAAGhC,MAAM,CAACiC,MAAM,CAAC,IAAI,CAAC;EAEtC,KAAK,MAAMC,YAAY,IAAIhB,MAAM,CAACiB,gBAAgB,CAACrB,IAAI,CAAC,EAAE;IACxD,IAAI,CAACoB,YAAY,CAACE,SAAS,EAAE,CAAChB,SAAS,CAAC,EAAE;MACxC;IACF,CAAC,CAAC;;IAEFU,cAAc,CAACO,GAAG,CAACH,YAAY,CAAC;IAChCF,UAAU,CAACE,YAAY,CAACb,IAAI,CAAC,GAAG,CAAC;IAEjC,KAAK,MAAMiB,iBAAiB,IAAIJ,YAAY,CAACK,aAAa,EAAE,EAAE;MAC5D,IAAIC,qBAAqB;MAEzB,IAAI,CAACF,iBAAiB,CAACF,SAAS,EAAE,CAAChB,SAAS,CAAC,EAAE;QAC7C;MACF,CAAC,CAAC;;MAEFU,cAAc,CAACO,GAAG,CAACC,iBAAiB,CAAC;MACrCN,UAAU,CAACM,iBAAiB,CAACjB,IAAI,CAAC,GAChC,CAAC,CAACmB,qBAAqB,GAAGR,UAAU,CAACM,iBAAiB,CAACjB,IAAI,CAAC,MAC1D,IAAI,IAAImB,qBAAqB,KAAK,KAAK,CAAC,GACtCA,qBAAqB,GACrB,CAAC,IAAI,CAAC;IACd;EACF;EAEA,OAAO,CAAC,GAAGV,cAAc,CAAC,CACvBW,IAAI,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;IACtB;IACA,MAAMC,cAAc,GAAGZ,UAAU,CAACW,KAAK,CAACtB,IAAI,CAAC,GAAGW,UAAU,CAACU,KAAK,CAACrB,IAAI,CAAC;IAEtE,IAAIuB,cAAc,KAAK,CAAC,EAAE;MACxB,OAAOA,cAAc;IACvB,CAAC,CAAC;;IAEF,IACE,CAAC,CAAC,EAAElC,WAAW,CAACmC,eAAe,EAAEH,KAAK,CAAC,IACvCxB,MAAM,CAAC4B,SAAS,CAACJ,KAAK,EAAEC,KAAK,CAAC,EAC9B;MACA,OAAO,CAAC,CAAC;IACX;IAEA,IACE,CAAC,CAAC,EAAEjC,WAAW,CAACmC,eAAe,EAAEF,KAAK,CAAC,IACvCzB,MAAM,CAAC4B,SAAS,CAACH,KAAK,EAAED,KAAK,CAAC,EAC9B;MACA,OAAO,CAAC;IACV;IAEA,OAAO,CAAC,CAAC,EAAEnC,eAAe,CAACwC,cAAc,EAAEL,KAAK,CAACrB,IAAI,EAAEsB,KAAK,CAACtB,IAAI,CAAC;EACpE,CAAC,CAAC,CACD2B,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAC5B,IAAI,CAAC;AACvB;AACA;AACA;AACA;AACA;;AAEA,SAASI,sBAAsB,CAACX,IAAI,EAAEM,SAAS,EAAE;EAC/C,IACE,CAAC,CAAC,EAAEV,WAAW,CAACwC,YAAY,EAAEpC,IAAI,CAAC,IACnC,CAAC,CAAC,EAAEJ,WAAW,CAACmC,eAAe,EAAE/B,IAAI,CAAC,EACtC;IACA,MAAMqC,kBAAkB,GAAGnD,MAAM,CAACoD,IAAI,CAACtC,IAAI,CAACsB,SAAS,EAAE,CAAC;IACxD,OAAO,CAAC,CAAC,EAAE5B,eAAe,CAAC6C,cAAc,EAAEjC,SAAS,EAAE+B,kBAAkB,CAAC;EAC3E,CAAC,CAAC;;EAEF,OAAO,EAAE;AACX"},"metadata":{},"sourceType":"script","externalDependencies":[]}