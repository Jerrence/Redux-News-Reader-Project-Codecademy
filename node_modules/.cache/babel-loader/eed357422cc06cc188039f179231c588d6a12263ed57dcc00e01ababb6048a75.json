{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createXMLHttpRequestOverride = void 0;\nvar until_1 = require(\"@open-draft/until\");\nvar headers_polyfill_1 = require(\"headers-polyfill\");\nvar xmldom_1 = require(\"@xmldom/xmldom\");\nvar parseJson_1 = require(\"../../utils/parseJson\");\nvar toIsoResponse_1 = require(\"../../utils/toIsoResponse\");\nvar bufferFrom_1 = require(\"./utils/bufferFrom\");\nvar createEvent_1 = require(\"./utils/createEvent\");\nvar IsomorphicRequest_1 = require(\"../../IsomorphicRequest\");\nvar bufferUtils_1 = require(\"../../utils/bufferUtils\");\nvar InteractiveIsomorphicRequest_1 = require(\"../../InteractiveIsomorphicRequest\");\nvar createXMLHttpRequestOverride = function (options) {\n  var _a;\n  var XMLHttpRequest = options.XMLHttpRequest,\n    emitter = options.emitter,\n    log = options.log;\n  return _a = /** @class */function () {\n    function XMLHttpRequestOverride() {\n      // Collection of events modified by `addEventListener`/`removeEventListener` calls.\n      this._events = [];\n      this.log = log;\n      this.UNSENT = 0;\n      this.OPENED = 1;\n      this.HEADERS_RECEIVED = 2;\n      this.LOADING = 3;\n      this.DONE = 4;\n      this.onreadystatechange = null;\n      /* Events */\n      this.onabort = null;\n      this.onerror = null;\n      this.onload = null;\n      this.onloadend = null;\n      this.onloadstart = null;\n      this.onprogress = null;\n      this.ontimeout = null;\n      this.url = '';\n      this.method = 'GET';\n      this.readyState = this.UNSENT;\n      this.withCredentials = false;\n      this.status = 200;\n      this.statusText = 'OK';\n      this.response = '';\n      this.responseType = 'text';\n      this.responseText = '';\n      this.responseXML = null;\n      this.responseURL = '';\n      this.upload = {};\n      this.timeout = 0;\n      this._requestHeaders = new headers_polyfill_1.Headers();\n      this._responseHeaders = new headers_polyfill_1.Headers();\n    }\n    XMLHttpRequestOverride.prototype.setReadyState = function (nextState) {\n      if (nextState === this.readyState) {\n        return;\n      }\n      this.log('readyState change %d -> %d', this.readyState, nextState);\n      this.readyState = nextState;\n      if (nextState !== this.UNSENT) {\n        this.log('triggering readystate change...');\n        this.trigger('readystatechange');\n      }\n    };\n    /**\n     * Triggers both direct callback and attached event listeners\n     * for the given event.\n     */\n    XMLHttpRequestOverride.prototype.trigger = function (eventName, options) {\n      var e_1, _a;\n      this.log('trigger \"%s\" (%d)', eventName, this.readyState);\n      this.log('resolve listener for event \"%s\"', eventName);\n      // @ts-expect-error XMLHttpRequest class has no index signature.\n      var callback = this[\"on\" + eventName];\n      callback === null || callback === void 0 ? void 0 : callback.call(this, createEvent_1.createEvent(this, eventName, options));\n      try {\n        for (var _b = __values(this._events), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var event_1 = _c.value;\n          if (event_1.name === eventName) {\n            log('calling mock event listener \"%s\" (%d)', eventName, this.readyState);\n            event_1.listener.call(this, createEvent_1.createEvent(this, eventName, options));\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return this;\n    };\n    XMLHttpRequestOverride.prototype.reset = function () {\n      this.log('reset');\n      this.setReadyState(this.UNSENT);\n      this.status = 200;\n      this.statusText = 'OK';\n      this.response = null;\n      this.responseText = null;\n      this.responseXML = null;\n      this._requestHeaders = new headers_polyfill_1.Headers();\n      this._responseHeaders = new headers_polyfill_1.Headers();\n    };\n    XMLHttpRequestOverride.prototype.open = function (method, url, async, user, password) {\n      if (async === void 0) {\n        async = true;\n      }\n      return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          this.log = this.log.extend(\"request \" + method + \" \" + url);\n          this.log('open', {\n            method: method,\n            url: url,\n            async: async,\n            user: user,\n            password: password\n          });\n          this.reset();\n          this.setReadyState(this.OPENED);\n          if (typeof url === 'undefined') {\n            this.url = method;\n            this.method = 'GET';\n          } else {\n            this.url = url;\n            this.method = method;\n            this.async = async;\n            this.user = user;\n            this.password = password;\n          }\n          return [2 /*return*/];\n        });\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.send = function (data) {\n      var _this = this;\n      this.log('send %s %s', this.method, this.url);\n      var buffer;\n      if (typeof data === 'string') {\n        buffer = bufferUtils_1.encodeBuffer(data);\n      } else {\n        buffer = data || new ArrayBuffer(0);\n      }\n      var url;\n      try {\n        url = new URL(this.url);\n      } catch (error) {\n        // Assume a relative URL, if construction of a new `URL` instance fails.\n        // Since `XMLHttpRequest` always executed in a DOM-like environment,\n        // resolve the relative request URL against the current window location.\n        url = new URL(this.url, window.location.href);\n      }\n      this.log('request headers', this._requestHeaders);\n      // Create an intercepted request instance exposed to the request intercepting middleware.\n      var isomorphicRequest = new IsomorphicRequest_1.IsomorphicRequest(url, {\n        body: buffer,\n        method: this.method,\n        headers: this._requestHeaders,\n        credentials: this.withCredentials ? 'include' : 'omit'\n      });\n      var interactiveIsomorphicRequest = new InteractiveIsomorphicRequest_1.InteractiveIsomorphicRequest(isomorphicRequest);\n      this.log('emitting the \"request\" event for %d listener(s)...', emitter.listenerCount('request'));\n      emitter.emit('request', interactiveIsomorphicRequest);\n      this.log('awaiting mocked response...');\n      Promise.resolve(until_1.until(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, mockedResponse;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                return [4 /*yield*/, emitter.untilIdle('request', function (_a) {\n                  var _b = __read(_a.args, 1),\n                    request = _b[0];\n                  return request.id === interactiveIsomorphicRequest.id;\n                })];\n              case 1:\n                _b.sent();\n                this.log('all request listeners have been resolved!');\n                return [4 /*yield*/, interactiveIsomorphicRequest.respondWith.invoked()];\n              case 2:\n                _a = __read.apply(void 0, [_b.sent(), 1]), mockedResponse = _a[0];\n                this.log('event.respondWith called with:', mockedResponse);\n                return [2 /*return*/, mockedResponse];\n            }\n          });\n        });\n      })).then(function (_a) {\n        var _b, _c;\n        var _d = __read(_a, 2),\n          middlewareException = _d[0],\n          mockedResponse = _d[1];\n        // When the request middleware throws an exception, error the request.\n        // This cancels the request and is similar to a network error.\n        if (middlewareException) {\n          _this.log('middleware function threw an exception!', middlewareException);\n          // No way to propagate the actual error message.\n          _this.trigger('error');\n          _this.abort();\n          return;\n        }\n        // Return a mocked response, if provided in the middleware.\n        if (mockedResponse) {\n          _this.log('received mocked response', mockedResponse);\n          // Trigger a loadstart event to indicate the initialization of the fetch.\n          _this.trigger('loadstart');\n          _this.status = (_b = mockedResponse.status) !== null && _b !== void 0 ? _b : 200;\n          _this.statusText = mockedResponse.statusText || 'OK';\n          _this._responseHeaders = mockedResponse.headers ? headers_polyfill_1.objectToHeaders(mockedResponse.headers) : new headers_polyfill_1.Headers();\n          _this.log('set response status', _this.status, _this.statusText);\n          _this.log('set response headers', _this._responseHeaders);\n          // Mark that response headers has been received\n          // and trigger a ready state event to reflect received headers\n          // in a custom `onreadystatechange` callback.\n          _this.setReadyState(_this.HEADERS_RECEIVED);\n          _this.log('response type', _this.responseType);\n          _this.response = _this.getResponseBody(mockedResponse.body);\n          _this.responseURL = _this.url;\n          _this.responseText = mockedResponse.body || '';\n          _this.responseXML = _this.getResponseXML();\n          _this.log('set response body', _this.response);\n          if (mockedResponse.body && _this.response) {\n            _this.setReadyState(_this.LOADING);\n            // Presence of the mocked response implies a response body (not null).\n            // Presence of the coerced `this.response` implies the mocked body is valid.\n            var bodyBuffer = bufferFrom_1.bufferFrom(mockedResponse.body);\n            // Trigger a progress event based on the mocked response body.\n            _this.trigger('progress', {\n              loaded: bodyBuffer.length,\n              total: bodyBuffer.length\n            });\n          }\n          /**\n           * Explicitly mark the request as done so its response never hangs.\n           * @see https://github.com/mswjs/interceptors/issues/13\n           */\n          _this.setReadyState(_this.DONE);\n          // Trigger a load event to indicate the fetch has succeeded.\n          _this.trigger('load');\n          // Trigger a loadend event to indicate the fetch has completed.\n          _this.trigger('loadend');\n          emitter.emit('response', isomorphicRequest, toIsoResponse_1.toIsoResponse(mockedResponse));\n        } else {\n          _this.log('no mocked response received!');\n          // Perform an original request, when the request middleware returned no mocked response.\n          var originalRequest_1 = new XMLHttpRequest();\n          _this.log('opening an original request %s %s', _this.method, _this.url);\n          originalRequest_1.open(_this.method, _this.url, (_c = _this.async) !== null && _c !== void 0 ? _c : true, _this.user, _this.password);\n          // Reflect a successful state of the original request\n          // on the patched instance.\n          originalRequest_1.addEventListener('load', function () {\n            _this.log('original \"onload\"');\n            _this.status = originalRequest_1.status;\n            _this.statusText = originalRequest_1.statusText;\n            _this.responseURL = originalRequest_1.responseURL;\n            _this.responseType = originalRequest_1.responseType;\n            _this.response = originalRequest_1.response;\n            _this.responseText = originalRequest_1.responseText;\n            _this.responseXML = originalRequest_1.responseXML;\n            _this.log('set mock request readyState to DONE');\n            // Explicitly mark the mocked request instance as done\n            // so the response never hangs.\n            /**\n             * @note `readystatechange` listener is called TWICE\n             * in the case of unhandled request.\n             */\n            _this.setReadyState(_this.DONE);\n            _this.log('received original response', _this.status, _this.statusText);\n            _this.log('original response body:', _this.response);\n            var responseHeaders = originalRequest_1.getAllResponseHeaders();\n            _this.log('original response headers:\\n', responseHeaders);\n            _this._responseHeaders = headers_polyfill_1.stringToHeaders(responseHeaders);\n            _this.log('original response headers (normalized)', _this._responseHeaders);\n            _this.log('original response finished');\n            emitter.emit('response', isomorphicRequest, {\n              status: originalRequest_1.status,\n              statusText: originalRequest_1.statusText,\n              headers: _this._responseHeaders,\n              body: originalRequest_1.response\n            });\n          });\n          // Assign callbacks and event listeners from the intercepted XHR instance\n          // to the original XHR instance.\n          _this.propagateCallbacks(originalRequest_1);\n          _this.propagateListeners(originalRequest_1);\n          _this.propagateHeaders(originalRequest_1, _this._requestHeaders);\n          if (_this.async) {\n            originalRequest_1.timeout = _this.timeout;\n          }\n          _this.log('send', data);\n          originalRequest_1.send(data);\n        }\n      });\n    };\n    XMLHttpRequestOverride.prototype.abort = function () {\n      this.log('abort');\n      if (this.readyState > this.UNSENT && this.readyState < this.DONE) {\n        this.setReadyState(this.UNSENT);\n        this.trigger('abort');\n      }\n    };\n    XMLHttpRequestOverride.prototype.dispatchEvent = function () {\n      return false;\n    };\n    XMLHttpRequestOverride.prototype.setRequestHeader = function (name, value) {\n      this.log('set request header \"%s\" to \"%s\"', name, value);\n      this._requestHeaders.append(name, value);\n    };\n    XMLHttpRequestOverride.prototype.getResponseHeader = function (name) {\n      this.log('get response header \"%s\"', name);\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        this.log('cannot return a header: headers not received (state: %s)', this.readyState);\n        return null;\n      }\n      var headerValue = this._responseHeaders.get(name);\n      this.log('resolved response header \"%s\" to \"%s\"', name, headerValue, this._responseHeaders);\n      return headerValue;\n    };\n    XMLHttpRequestOverride.prototype.getAllResponseHeaders = function () {\n      this.log('get all response headers');\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        this.log('cannot return headers: headers not received (state: %s)', this.readyState);\n        return '';\n      }\n      return headers_polyfill_1.headersToString(this._responseHeaders);\n    };\n    XMLHttpRequestOverride.prototype.addEventListener = function (name, listener) {\n      this.log('addEventListener', name, listener);\n      this._events.push({\n        name: name,\n        listener: listener\n      });\n    };\n    XMLHttpRequestOverride.prototype.removeEventListener = function (name, listener) {\n      this.log('removeEventListener', name, listener);\n      this._events = this._events.filter(function (storedEvent) {\n        return storedEvent.name !== name && storedEvent.listener !== listener;\n      });\n    };\n    XMLHttpRequestOverride.prototype.overrideMimeType = function () {};\n    /**\n     * Resolves the response based on the `responseType` value.\n     */\n    XMLHttpRequestOverride.prototype.getResponseBody = function (body) {\n      // Handle an improperly set \"null\" value of the mocked response body.\n      var textBody = body !== null && body !== void 0 ? body : '';\n      this.log('coerced response body to', textBody);\n      switch (this.responseType) {\n        case 'json':\n          {\n            this.log('resolving response body as JSON');\n            return parseJson_1.parseJson(textBody);\n          }\n        case 'blob':\n          {\n            var blobType = this.getResponseHeader('content-type') || 'text/plain';\n            this.log('resolving response body as Blob', {\n              type: blobType\n            });\n            return new Blob([textBody], {\n              type: blobType\n            });\n          }\n        case 'arraybuffer':\n          {\n            this.log('resolving response body as ArrayBuffer');\n            var arrayBuffer = bufferFrom_1.bufferFrom(textBody);\n            return arrayBuffer;\n          }\n        default:\n          return textBody;\n      }\n    };\n    XMLHttpRequestOverride.prototype.getResponseXML = function () {\n      var contentType = this.getResponseHeader('Content-Type');\n      if (contentType === 'application/xml' || contentType === 'text/xml') {\n        return new xmldom_1.DOMParser().parseFromString(this.responseText, contentType);\n      }\n      return null;\n    };\n    /**\n     * Propagates mock XMLHttpRequest instance callbacks\n     * to the given XMLHttpRequest instance.\n     */\n    XMLHttpRequestOverride.prototype.propagateCallbacks = function (request) {\n      var e_2, _a;\n      this.log('propagating request callbacks to the original request');\n      var callbackNames = ['abort', 'onerror', 'ontimeout', 'onload', 'onloadstart', 'onloadend', 'onprogress', 'onreadystatechange'];\n      try {\n        for (var callbackNames_1 = __values(callbackNames), callbackNames_1_1 = callbackNames_1.next(); !callbackNames_1_1.done; callbackNames_1_1 = callbackNames_1.next()) {\n          var callbackName = callbackNames_1_1.value;\n          var callback = this[callbackName];\n          if (callback) {\n            request[callbackName] = this[callbackName];\n            this.log('propagated the \"%s\" callback', callbackName, callback);\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (callbackNames_1_1 && !callbackNames_1_1.done && (_a = callbackNames_1.return)) _a.call(callbackNames_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      request.onabort = this.abort;\n      request.onerror = this.onerror;\n      request.ontimeout = this.ontimeout;\n      request.onload = this.onload;\n      request.onloadstart = this.onloadstart;\n      request.onloadend = this.onloadend;\n      request.onprogress = this.onprogress;\n      request.onreadystatechange = this.onreadystatechange;\n    };\n    /**\n     * Propagates the mock XMLHttpRequest instance listeners\n     * to the given XMLHttpRequest instance.\n     */\n    XMLHttpRequestOverride.prototype.propagateListeners = function (request) {\n      this.log('propagating request listeners (%d) to the original request', this._events.length, this._events);\n      this._events.forEach(function (_a) {\n        var name = _a.name,\n          listener = _a.listener;\n        request.addEventListener(name, listener);\n      });\n    };\n    XMLHttpRequestOverride.prototype.propagateHeaders = function (request, headers) {\n      var _this = this;\n      this.log('propagating request headers to the original request', headers);\n      // Preserve the request headers casing.\n      Object.entries(headers.raw()).forEach(function (_a) {\n        var _b = __read(_a, 2),\n          name = _b[0],\n          value = _b[1];\n        _this.log('setting \"%s\" (%s) header on the original request', name, value);\n        request.setRequestHeader(name, value);\n      });\n    };\n    return XMLHttpRequestOverride;\n  }(), /* Request state */\n  _a.UNSENT = 0, _a.OPENED = 1, _a.HEADERS_RECEIVED = 2, _a.LOADING = 3, _a.DONE = 4, _a;\n};\nexports.createXMLHttpRequestOverride = createXMLHttpRequestOverride;","map":{"version":3,"mappings":"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","names":["createXMLHttpRequestOverride","options","emitter","log","url","method","readyState","UNSENT","withCredentials","status","statusText","response","responseType","responseText","responseXML","responseURL","upload","timeout","_requestHeaders","headers_polyfill_1","_responseHeaders","XMLHttpRequestOverride","nextState","trigger","eventName","callback","call","createEvent_1","_events","event_1","name","listener","setReadyState","async","user","password","extend","reset","OPENED","data","buffer","bufferUtils_1","ArrayBuffer","URL","error","window","location","href","isomorphicRequest","IsomorphicRequest_1","body","headers","credentials","interactiveIsomorphicRequest","InteractiveIsomorphicRequest_1","listenerCount","emit","Promise","resolve","until_1","untilIdle","_a","_b","request","id","respondWith","invoked","mockedResponse","then","_d","middlewareException","_this","abort","HEADERS_RECEIVED","getResponseBody","getResponseXML","LOADING","bodyBuffer","bufferFrom_1","loaded","length","total","DONE","toIsoResponse_1","originalRequest_1","XMLHttpRequest","open","addEventListener","responseHeaders","getAllResponseHeaders","propagateCallbacks","propagateListeners","propagateHeaders","send","value","append","headerValue","get","push","filter","storedEvent","textBody","parseJson_1","blobType","getResponseHeader","type","Blob","arrayBuffer","contentType","xmldom_1","parseFromString","callbackNames","callbackName","onabort","onerror","ontimeout","onload","onloadstart","onloadend","onprogress","onreadystatechange","forEach","Object","entries","raw","setRequestHeader","exports"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/XMLHttpRequestOverride.ts"],"sourcesContent":["/**\n * XMLHttpRequest override class.\n * Inspired by https://github.com/marvinhagemeister/xhr-mocklet.\n */\nimport type { Debugger } from 'debug'\nimport { until } from '@open-draft/until'\nimport {\n  Headers,\n  stringToHeaders,\n  objectToHeaders,\n  headersToString,\n} from 'headers-polyfill'\nimport { DOMParser } from '@xmldom/xmldom'\nimport { parseJson } from '../../utils/parseJson'\nimport { toIsoResponse } from '../../utils/toIsoResponse'\nimport { bufferFrom } from './utils/bufferFrom'\nimport { createEvent } from './utils/createEvent'\nimport type { XMLHttpRequestEmitter } from '.'\nimport { IsomorphicRequest } from '../../IsomorphicRequest'\nimport { encodeBuffer } from '../../utils/bufferUtils'\nimport { InteractiveIsomorphicRequest } from '../../InteractiveIsomorphicRequest'\n\ntype XMLHttpRequestEventHandler = (\n  this: XMLHttpRequest,\n  event: Event | ProgressEvent<any>\n) => void\n\ninterface XMLHttpRequestEvent<EventMap extends any> {\n  name: keyof EventMap\n  listener: XMLHttpRequestEventHandler\n}\n\ninterface CreateXMLHttpRequestOverrideOptions {\n  XMLHttpRequest: typeof window.XMLHttpRequest\n  emitter: XMLHttpRequestEmitter\n  log: Debugger\n}\n\ninterface InternalXMLHttpRequestEventTargetEventMap\n  extends XMLHttpRequestEventTargetEventMap {\n  readystatechange: Event\n}\n\nexport type ExtractCallbacks<Key extends string> = Key extends\n  | 'abort'\n  | `on${infer _CallbackName}`\n  ? Key\n  : never\n\nexport const createXMLHttpRequestOverride = (\n  options: CreateXMLHttpRequestOverrideOptions\n) => {\n  const { XMLHttpRequest, emitter, log } = options\n\n  return class XMLHttpRequestOverride implements XMLHttpRequest {\n    _requestHeaders: Headers\n    _responseHeaders: Headers\n\n    // Collection of events modified by `addEventListener`/`removeEventListener` calls.\n    _events: XMLHttpRequestEvent<InternalXMLHttpRequestEventTargetEventMap>[] =\n      []\n\n    log: Debugger = log\n\n    /* Request state */\n    public static readonly UNSENT = 0\n    public static readonly OPENED = 1\n    public static readonly HEADERS_RECEIVED = 2\n    public static readonly LOADING = 3\n    public static readonly DONE = 4\n    public readonly UNSENT = 0\n    public readonly OPENED = 1\n    public readonly HEADERS_RECEIVED = 2\n    public readonly LOADING = 3\n    public readonly DONE = 4\n\n    /* Custom public properties */\n    public method: string\n    public url: string\n\n    /* XHR public properties */\n    public withCredentials: boolean\n    public status: number\n    public statusText: string\n    public user?: string\n    public password?: string\n    public async?: boolean\n    public response: any\n    public responseText: string\n    public responseType: XMLHttpRequestResponseType\n    public responseXML: Document | null\n    public responseURL: string\n    public upload: XMLHttpRequestUpload\n    public readyState: number\n    public onreadystatechange: (this: XMLHttpRequest, ev: Event) => any =\n      null as any\n    public timeout: number\n\n    /* Events */\n    public onabort: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onerror: (this: XMLHttpRequestEventTarget, event: Event) => any =\n      null as any\n    public onload: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onloadend: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onloadstart: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onprogress: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public ontimeout: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n\n    constructor() {\n      this.url = ''\n      this.method = 'GET'\n      this.readyState = this.UNSENT\n      this.withCredentials = false\n      this.status = 200\n      this.statusText = 'OK'\n      this.response = ''\n      this.responseType = 'text'\n      this.responseText = ''\n      this.responseXML = null\n      this.responseURL = ''\n      this.upload = {} as any\n      this.timeout = 0\n\n      this._requestHeaders = new Headers()\n      this._responseHeaders = new Headers()\n    }\n\n    setReadyState(nextState: number): void {\n      if (nextState === this.readyState) {\n        return\n      }\n\n      this.log('readyState change %d -> %d', this.readyState, nextState)\n      this.readyState = nextState\n\n      if (nextState !== this.UNSENT) {\n        this.log('triggering readystate change...')\n        this.trigger('readystatechange')\n      }\n    }\n\n    /**\n     * Triggers both direct callback and attached event listeners\n     * for the given event.\n     */\n    trigger<\n      K extends keyof (XMLHttpRequestEventTargetEventMap & {\n        readystatechange: ProgressEvent<XMLHttpRequestEventTarget>\n      })\n    >(eventName: K, options?: ProgressEventInit) {\n      this.log('trigger \"%s\" (%d)', eventName, this.readyState)\n      this.log('resolve listener for event \"%s\"', eventName)\n\n      // @ts-expect-error XMLHttpRequest class has no index signature.\n      const callback = this[`on${eventName}`] as XMLHttpRequestEventHandler\n      callback?.call(this, createEvent(this, eventName, options))\n\n      for (const event of this._events) {\n        if (event.name === eventName) {\n          log(\n            'calling mock event listener \"%s\" (%d)',\n            eventName,\n            this.readyState\n          )\n          event.listener.call(this, createEvent(this, eventName, options))\n        }\n      }\n\n      return this\n    }\n\n    reset() {\n      this.log('reset')\n\n      this.setReadyState(this.UNSENT)\n      this.status = 200\n      this.statusText = 'OK'\n      this.response = null as any\n      this.responseText = null as any\n      this.responseXML = null as any\n\n      this._requestHeaders = new Headers()\n      this._responseHeaders = new Headers()\n    }\n\n    public async open(\n      method: string,\n      url: string,\n      async: boolean = true,\n      user?: string,\n      password?: string\n    ) {\n      this.log = this.log.extend(`request ${method} ${url}`)\n      this.log('open', { method, url, async, user, password })\n\n      this.reset()\n      this.setReadyState(this.OPENED)\n\n      if (typeof url === 'undefined') {\n        this.url = method\n        this.method = 'GET'\n      } else {\n        this.url = url\n        this.method = method\n        this.async = async\n        this.user = user\n        this.password = password\n      }\n    }\n\n    public send(data?: string | ArrayBuffer) {\n      this.log('send %s %s', this.method, this.url)\n      let buffer: ArrayBuffer\n      if (typeof data === 'string') {\n        buffer = encodeBuffer(data)\n      } else {\n        buffer = data || new ArrayBuffer(0)\n      }\n\n      let url: URL\n\n      try {\n        url = new URL(this.url)\n      } catch (error) {\n        // Assume a relative URL, if construction of a new `URL` instance fails.\n        // Since `XMLHttpRequest` always executed in a DOM-like environment,\n        // resolve the relative request URL against the current window location.\n        url = new URL(this.url, window.location.href)\n      }\n\n      this.log('request headers', this._requestHeaders)\n\n      // Create an intercepted request instance exposed to the request intercepting middleware.\n      const isomorphicRequest = new IsomorphicRequest(url, {\n        body: buffer,\n        method: this.method,\n        headers: this._requestHeaders,\n        credentials: this.withCredentials ? 'include' : 'omit',\n      })\n\n      const interactiveIsomorphicRequest = new InteractiveIsomorphicRequest(\n        isomorphicRequest\n      )\n\n      this.log(\n        'emitting the \"request\" event for %d listener(s)...',\n        emitter.listenerCount('request')\n      )\n      emitter.emit('request', interactiveIsomorphicRequest)\n\n      this.log('awaiting mocked response...')\n\n      Promise.resolve(\n        until(async () => {\n          await emitter.untilIdle('request', ({ args: [request] }) => {\n            return request.id === interactiveIsomorphicRequest.id\n          })\n          this.log('all request listeners have been resolved!')\n\n          const [mockedResponse] =\n            await interactiveIsomorphicRequest.respondWith.invoked()\n          this.log('event.respondWith called with:', mockedResponse)\n\n          return mockedResponse\n        })\n      ).then(([middlewareException, mockedResponse]) => {\n        // When the request middleware throws an exception, error the request.\n        // This cancels the request and is similar to a network error.\n        if (middlewareException) {\n          this.log(\n            'middleware function threw an exception!',\n            middlewareException\n          )\n\n          // No way to propagate the actual error message.\n          this.trigger('error')\n          this.abort()\n\n          return\n        }\n\n        // Return a mocked response, if provided in the middleware.\n        if (mockedResponse) {\n          this.log('received mocked response', mockedResponse)\n\n          // Trigger a loadstart event to indicate the initialization of the fetch.\n          this.trigger('loadstart')\n\n          this.status = mockedResponse.status ?? 200\n          this.statusText = mockedResponse.statusText || 'OK'\n          this._responseHeaders = mockedResponse.headers\n            ? objectToHeaders(mockedResponse.headers)\n            : new Headers()\n\n          this.log('set response status', this.status, this.statusText)\n          this.log('set response headers', this._responseHeaders)\n\n          // Mark that response headers has been received\n          // and trigger a ready state event to reflect received headers\n          // in a custom `onreadystatechange` callback.\n          this.setReadyState(this.HEADERS_RECEIVED)\n\n          this.log('response type', this.responseType)\n          this.response = this.getResponseBody(mockedResponse.body)\n          this.responseURL = this.url\n          this.responseText = mockedResponse.body || ''\n          this.responseXML = this.getResponseXML()\n\n          this.log('set response body', this.response)\n\n          if (mockedResponse.body && this.response) {\n            this.setReadyState(this.LOADING)\n\n            // Presence of the mocked response implies a response body (not null).\n            // Presence of the coerced `this.response` implies the mocked body is valid.\n            const bodyBuffer = bufferFrom(mockedResponse.body)\n\n            // Trigger a progress event based on the mocked response body.\n            this.trigger('progress', {\n              loaded: bodyBuffer.length,\n              total: bodyBuffer.length,\n            })\n          }\n\n          /**\n           * Explicitly mark the request as done so its response never hangs.\n           * @see https://github.com/mswjs/interceptors/issues/13\n           */\n          this.setReadyState(this.DONE)\n\n          // Trigger a load event to indicate the fetch has succeeded.\n          this.trigger('load')\n          // Trigger a loadend event to indicate the fetch has completed.\n          this.trigger('loadend')\n\n          emitter.emit(\n            'response',\n            isomorphicRequest,\n            toIsoResponse(mockedResponse)\n          )\n        } else {\n          this.log('no mocked response received!')\n\n          // Perform an original request, when the request middleware returned no mocked response.\n          const originalRequest = new XMLHttpRequest()\n\n          this.log('opening an original request %s %s', this.method, this.url)\n          originalRequest.open(\n            this.method,\n            this.url,\n            this.async ?? true,\n            this.user,\n            this.password\n          )\n\n          // Reflect a successful state of the original request\n          // on the patched instance.\n          originalRequest.addEventListener('load', () => {\n            this.log('original \"onload\"')\n\n            this.status = originalRequest.status\n            this.statusText = originalRequest.statusText\n            this.responseURL = originalRequest.responseURL\n            this.responseType = originalRequest.responseType\n            this.response = originalRequest.response\n            this.responseText = originalRequest.responseText\n            this.responseXML = originalRequest.responseXML\n\n            this.log('set mock request readyState to DONE')\n\n            // Explicitly mark the mocked request instance as done\n            // so the response never hangs.\n            /**\n             * @note `readystatechange` listener is called TWICE\n             * in the case of unhandled request.\n             */\n            this.setReadyState(this.DONE)\n\n            this.log('received original response', this.status, this.statusText)\n            this.log('original response body:', this.response)\n\n            const responseHeaders = originalRequest.getAllResponseHeaders()\n            this.log('original response headers:\\n', responseHeaders)\n\n            this._responseHeaders = stringToHeaders(responseHeaders)\n            this.log(\n              'original response headers (normalized)',\n              this._responseHeaders\n            )\n\n            this.log('original response finished')\n\n            emitter.emit('response', isomorphicRequest, {\n              status: originalRequest.status,\n              statusText: originalRequest.statusText,\n              headers: this._responseHeaders,\n              body: originalRequest.response,\n            })\n          })\n\n          // Assign callbacks and event listeners from the intercepted XHR instance\n          // to the original XHR instance.\n          this.propagateCallbacks(originalRequest)\n          this.propagateListeners(originalRequest)\n          this.propagateHeaders(originalRequest, this._requestHeaders)\n\n          if (this.async) {\n            originalRequest.timeout = this.timeout\n          }\n\n          this.log('send', data)\n          originalRequest.send(data)\n        }\n      })\n    }\n\n    public abort() {\n      this.log('abort')\n\n      if (this.readyState > this.UNSENT && this.readyState < this.DONE) {\n        this.setReadyState(this.UNSENT)\n        this.trigger('abort')\n      }\n    }\n\n    dispatchEvent() {\n      return false\n    }\n\n    public setRequestHeader(name: string, value: string) {\n      this.log('set request header \"%s\" to \"%s\"', name, value)\n      this._requestHeaders.append(name, value)\n    }\n\n    public getResponseHeader(name: string): string | null {\n      this.log('get response header \"%s\"', name)\n\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        this.log(\n          'cannot return a header: headers not received (state: %s)',\n          this.readyState\n        )\n        return null\n      }\n\n      const headerValue = this._responseHeaders.get(name)\n\n      this.log(\n        'resolved response header \"%s\" to \"%s\"',\n        name,\n        headerValue,\n        this._responseHeaders\n      )\n\n      return headerValue\n    }\n\n    public getAllResponseHeaders(): string {\n      this.log('get all response headers')\n\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        this.log(\n          'cannot return headers: headers not received (state: %s)',\n          this.readyState\n        )\n        return ''\n      }\n\n      return headersToString(this._responseHeaders)\n    }\n\n    public addEventListener<\n      K extends keyof InternalXMLHttpRequestEventTargetEventMap\n    >(name: K, listener: XMLHttpRequestEventHandler) {\n      this.log('addEventListener', name, listener)\n      this._events.push({\n        name,\n        listener,\n      })\n    }\n\n    public removeEventListener<K extends keyof XMLHttpRequestEventMap>(\n      name: K,\n      listener: (event?: XMLHttpRequestEventMap[K]) => void\n    ): void {\n      this.log('removeEventListener', name, listener)\n      this._events = this._events.filter((storedEvent) => {\n        return storedEvent.name !== name && storedEvent.listener !== listener\n      })\n    }\n\n    public overrideMimeType() {}\n\n    /**\n     * Resolves the response based on the `responseType` value.\n     */\n    getResponseBody(body: string | undefined) {\n      // Handle an improperly set \"null\" value of the mocked response body.\n      const textBody = body ?? ''\n      this.log('coerced response body to', textBody)\n\n      switch (this.responseType) {\n        case 'json': {\n          this.log('resolving response body as JSON')\n          return parseJson(textBody)\n        }\n\n        case 'blob': {\n          const blobType =\n            this.getResponseHeader('content-type') || 'text/plain'\n          this.log('resolving response body as Blob', { type: blobType })\n\n          return new Blob([textBody], {\n            type: blobType,\n          })\n        }\n\n        case 'arraybuffer': {\n          this.log('resolving response body as ArrayBuffer')\n          const arrayBuffer = bufferFrom(textBody)\n          return arrayBuffer\n        }\n\n        default:\n          return textBody\n      }\n    }\n\n    getResponseXML() {\n      const contentType = this.getResponseHeader('Content-Type')\n      if (contentType === 'application/xml' || contentType === 'text/xml') {\n        return new DOMParser().parseFromString(this.responseText, contentType)\n      }\n      return null\n    }\n\n    /**\n     * Propagates mock XMLHttpRequest instance callbacks\n     * to the given XMLHttpRequest instance.\n     */\n    propagateCallbacks(request: XMLHttpRequest) {\n      this.log('propagating request callbacks to the original request')\n      const callbackNames: Array<ExtractCallbacks<keyof XMLHttpRequest>> = [\n        'abort',\n        'onerror',\n        'ontimeout',\n        'onload',\n        'onloadstart',\n        'onloadend',\n        'onprogress',\n        'onreadystatechange',\n      ]\n\n      for (const callbackName of callbackNames) {\n        const callback = this[callbackName]\n\n        if (callback) {\n          request[callbackName] = this[callbackName] as any\n\n          this.log('propagated the \"%s\" callback', callbackName, callback)\n        }\n      }\n\n      request.onabort = this.abort\n      request.onerror = this.onerror\n      request.ontimeout = this.ontimeout\n      request.onload = this.onload\n      request.onloadstart = this.onloadstart\n      request.onloadend = this.onloadend\n      request.onprogress = this.onprogress\n      request.onreadystatechange = this.onreadystatechange\n    }\n\n    /**\n     * Propagates the mock XMLHttpRequest instance listeners\n     * to the given XMLHttpRequest instance.\n     */\n    propagateListeners(request: XMLHttpRequest) {\n      this.log(\n        'propagating request listeners (%d) to the original request',\n        this._events.length,\n        this._events\n      )\n\n      this._events.forEach(({ name, listener }) => {\n        request.addEventListener(name, listener)\n      })\n    }\n\n    propagateHeaders(request: XMLHttpRequest, headers: Headers) {\n      this.log('propagating request headers to the original request', headers)\n\n      // Preserve the request headers casing.\n      Object.entries(headers.raw()).forEach(([name, value]) => {\n        this.log(\n          'setting \"%s\" (%s) header on the original request',\n          name,\n          value\n        )\n        request.setRequestHeader(name, value)\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}