{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.buildASTSchema = buildASTSchema;\nexports.buildSchema = buildSchema;\nvar _devAssert = require('../jsutils/devAssert.js');\nvar _kinds = require('../language/kinds.js');\nvar _parser = require('../language/parser.js');\nvar _directives = require('../type/directives.js');\nvar _schema = require('../type/schema.js');\nvar _validate = require('../validation/validate.js');\nvar _extendSchema = require('./extendSchema.js');\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nfunction buildASTSchema(documentAST, options) {\n  documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.devAssert)(false, 'Must provide valid Document AST.');\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    (0, _validate.assertValidSDL)(documentAST);\n  }\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false\n  };\n  const config = (0, _extendSchema.extendSchemaImpl)(emptySchemaConfig, documentAST, options);\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          // @ts-expect-error validated in `validateSchema`\n          config.query = type;\n          break;\n        case 'Mutation':\n          // @ts-expect-error validated in `validateSchema`\n          config.mutation = type;\n          break;\n        case 'Subscription':\n          // @ts-expect-error validated in `validateSchema`\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n  const directives = [...config.directives,\n  // If specified directives were not explicitly declared, add them.\n  ..._directives.specifiedDirectives.filter(stdDirective => config.directives.every(directive => directive.name !== stdDirective.name))];\n  return new _schema.GraphQLSchema({\n    ...config,\n    directives\n  });\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nfunction buildSchema(source, options) {\n  const document = (0, _parser.parse)(source, {\n    noLocation: options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables: options === null || options === void 0 ? void 0 : options.allowLegacyFragmentVariables\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","buildASTSchema","buildSchema","_devAssert","require","_kinds","_parser","_directives","_schema","_validate","_extendSchema","documentAST","options","kind","Kind","DOCUMENT","devAssert","assumeValid","assumeValidSDL","assertValidSDL","emptySchemaConfig","description","undefined","types","directives","extensions","create","extensionASTNodes","config","extendSchemaImpl","astNode","type","name","query","mutation","subscription","specifiedDirectives","filter","stdDirective","every","directive","GraphQLSchema","source","document","parse","noLocation","allowLegacyFragmentVariables"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/utilities/buildASTSchema.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.buildASTSchema = buildASTSchema;\nexports.buildSchema = buildSchema;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _parser = require('../language/parser.js');\n\nvar _directives = require('../type/directives.js');\n\nvar _schema = require('../type/schema.js');\n\nvar _validate = require('../validation/validate.js');\n\nvar _extendSchema = require('./extendSchema.js');\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nfunction buildASTSchema(documentAST, options) {\n  (documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT) ||\n    (0, _devAssert.devAssert)(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    (0, _validate.assertValidSDL)(documentAST);\n  }\n\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false,\n  };\n  const config = (0, _extendSchema.extendSchemaImpl)(\n    emptySchemaConfig,\n    documentAST,\n    options,\n  );\n\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          // @ts-expect-error validated in `validateSchema`\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          // @ts-expect-error validated in `validateSchema`\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          // @ts-expect-error validated in `validateSchema`\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  const directives = [\n    ...config.directives, // If specified directives were not explicitly declared, add them.\n    ..._directives.specifiedDirectives.filter((stdDirective) =>\n      config.directives.every(\n        (directive) => directive.name !== stdDirective.name,\n      ),\n    ),\n  ];\n  return new _schema.GraphQLSchema({ ...config, directives });\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nfunction buildSchema(source, options) {\n  const document = (0, _parser.parse)(source, {\n    noLocation:\n      options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables:\n      options === null || options === void 0\n        ? void 0\n        : options.allowLegacyFragmentVariables,\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL:\n      options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}