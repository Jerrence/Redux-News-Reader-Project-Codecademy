{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;\nexports.KnownArgumentNamesRule = KnownArgumentNamesRule;\nvar _didYouMean = require('../../jsutils/didYouMean.js');\nvar _suggestionList = require('../../jsutils/suggestionList.js');\nvar _GraphQLError = require('../../error/GraphQLError.js');\nvar _kinds = require('../../language/kinds.js');\nvar _directives = require('../../type/directives.js');\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nfunction KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map(arg => arg.name);\n        const suggestions = (0, _suggestionList.suggestionList)(argName, knownArgsNames);\n        context.reportError(new _GraphQLError.GraphQLError(`Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` + (0, _didYouMean.didYouMean)(suggestions), {\n          nodes: argNode\n        }));\n      }\n    }\n  };\n}\n/**\n * @internal\n */\n\nfunction KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map(arg => arg.name);\n  }\n  const astDefinitions = context.getDocument().definitions;\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n      directiveArgs[def.name.value] = argsNodes.map(arg => arg.name.value);\n    }\n  }\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n          if (!knownArgs.includes(argName)) {\n            const suggestions = (0, _suggestionList.suggestionList)(argName, knownArgs);\n            context.reportError(new _GraphQLError.GraphQLError(`Unknown argument \"${argName}\" on directive \"@${directiveName}\".` + (0, _didYouMean.didYouMean)(suggestions), {\n              nodes: argNode\n            }));\n          }\n        }\n      }\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","KnownArgumentNamesOnDirectivesRule","KnownArgumentNamesRule","_didYouMean","require","_suggestionList","_GraphQLError","_kinds","_directives","context","Argument","argNode","argDef","getArgument","fieldDef","getFieldDef","parentType","getParentType","argName","name","knownArgsNames","args","map","arg","suggestions","suggestionList","reportError","GraphQLError","didYouMean","nodes","directiveArgs","create","schema","getSchema","definedDirectives","getDirectives","specifiedDirectives","directive","astDefinitions","getDocument","definitions","def","kind","Kind","DIRECTIVE_DEFINITION","_def$arguments","argsNodes","arguments","Directive","directiveNode","directiveName","knownArgs","includes"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/KnownArgumentNamesRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;\nexports.KnownArgumentNamesRule = KnownArgumentNamesRule;\n\nvar _didYouMean = require('../../jsutils/didYouMean.js');\n\nvar _suggestionList = require('../../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _directives = require('../../type/directives.js');\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nfunction KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = (0, _suggestionList.suggestionList)(\n          argName,\n          knownArgsNames,\n        );\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              (0, _didYouMean.didYouMean)(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nfunction KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = (0, _suggestionList.suggestionList)(\n              argName,\n              knownArgs,\n            );\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  (0, _didYouMean.didYouMean)(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}