{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.assertValidExecutionArguments = assertValidExecutionArguments;\nexports.buildExecutionContext = buildExecutionContext;\nexports.buildResolveInfo = buildResolveInfo;\nexports.defaultTypeResolver = exports.defaultFieldResolver = void 0;\nexports.execute = execute;\nexports.executeSync = executeSync;\nexports.getFieldDef = getFieldDef;\nvar _devAssert = require('../jsutils/devAssert.js');\nvar _inspect = require('../jsutils/inspect.js');\nvar _invariant = require('../jsutils/invariant.js');\nvar _isIterableObject = require('../jsutils/isIterableObject.js');\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\nvar _isPromise = require('../jsutils/isPromise.js');\nvar _memoize = require('../jsutils/memoize3.js');\nvar _Path = require('../jsutils/Path.js');\nvar _promiseForObject = require('../jsutils/promiseForObject.js');\nvar _promiseReduce = require('../jsutils/promiseReduce.js');\nvar _GraphQLError = require('../error/GraphQLError.js');\nvar _locatedError = require('../error/locatedError.js');\nvar _ast = require('../language/ast.js');\nvar _kinds = require('../language/kinds.js');\nvar _definition = require('../type/definition.js');\nvar _introspection = require('../type/introspection.js');\nvar _validate = require('../type/validate.js');\nvar _collectFields = require('./collectFields.js');\nvar _values = require('./values.js');\n\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\nconst collectSubfields = (0, _memoize.memoize3)((exeContext, returnType, fieldNodes) => (0, _collectFields.collectSubfields)(exeContext.schema, exeContext.fragments, exeContext.variableValues, returnType, fieldNodes));\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nfunction execute(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 || (0, _devAssert.devAssert)(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n  const {\n    schema,\n    document,\n    variableValues,\n    rootValue\n  } = args; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  //\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    const {\n      operation\n    } = exeContext;\n    const result = executeOperation(exeContext, operation, rootValue);\n    if ((0, _isPromise.isPromise)(result)) {\n      return result.then(data => buildResponse(data, exeContext.errors), error => {\n        exeContext.errors.push(error);\n        return buildResponse(null, exeContext.errors);\n      });\n    }\n    return buildResponse(result, exeContext.errors);\n  } catch (error) {\n    exeContext.errors.push(error);\n    return buildResponse(null, exeContext.errors);\n  }\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nfunction executeSync(args) {\n  const result = execute(args); // Assert that the execution was synchronous.\n\n  if ((0, _isPromise.isPromise)(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n  return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(data, errors) {\n  return errors.length === 0 ? {\n    data\n  } : {\n    errors,\n    data\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nfunction assertValidExecutionArguments(schema, document, rawVariableValues) {\n  document || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  (0, _validate.assertValidSchema)(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null || (0, _isObjectLike.isObjectLike)(rawVariableValues) || (0, _devAssert.devAssert)(false, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nfunction buildExecutionContext(args) {\n  var _definition$name, _operation$variableDe;\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues: rawVariableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    subscribeFieldResolver\n  } = args;\n  let operation;\n  const fragments = Object.create(null);\n  for (const definition of document.definitions) {\n    switch (definition.kind) {\n      case _kinds.Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [new _GraphQLError.GraphQLError('Must provide operation name if query contains multiple operations.')];\n          }\n          operation = definition;\n        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {\n          operation = definition;\n        }\n        break;\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n      default: // ignore non-executable definitions\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new _GraphQLError.GraphQLError(`Unknown operation named \"${operationName}\".`)];\n    }\n    return [new _GraphQLError.GraphQLError('Must provide an operation.')];\n  } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];\n  const coercedVariableValues = (0, _values.getVariableValues)(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {\n    maxErrors: 50\n  });\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n  return {\n    schema,\n    fragments,\n    rootValue,\n    contextValue,\n    operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,\n    typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,\n    subscribeFieldResolver: subscribeFieldResolver !== null && subscribeFieldResolver !== void 0 ? subscribeFieldResolver : defaultFieldResolver,\n    errors: []\n  };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  const rootType = exeContext.schema.getRootType(operation.operation);\n  if (rootType == null) {\n    throw new _GraphQLError.GraphQLError(`Schema is not configured to execute ${operation.operation} operation.`, {\n      nodes: operation\n    });\n  }\n  const rootFields = (0, _collectFields.collectFields)(exeContext.schema, exeContext.fragments, exeContext.variableValues, rootType, operation.selectionSet);\n  const path = undefined;\n  switch (operation.operation) {\n    case _ast.OperationTypeNode.QUERY:\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n    case _ast.OperationTypeNode.MUTATION:\n      return executeFieldsSerially(exeContext, rootType, rootValue, path, rootFields);\n    case _ast.OperationTypeNode.SUBSCRIPTION:\n      // TODO: deprecate `subscribe` and move all logic here\n      // Temporary solution until we finish merging execute and subscribe together\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n  }\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return (0, _promiseReduce.promiseReduce)(fields.entries(), (results, _ref) => {\n    let [responseName, fieldNodes] = _ref;\n    const fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);\n    const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    if ((0, _isPromise.isPromise)(result)) {\n      return result.then(resolvedResult => {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  const results = Object.create(null);\n  let containsPromise = false;\n  for (const [responseName, fieldNodes] of fields.entries()) {\n    const fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);\n    const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result !== undefined) {\n      results[responseName] = result;\n      if ((0, _isPromise.isPromise)(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return (0, _promiseForObject.promiseForObject)(results);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\n\nfunction executeField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n  if (!fieldDef) {\n    return;\n  }\n  const returnType = fieldDef.type;\n  const resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;\n  const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    const args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue;\n    const result = resolveFn(source, args, contextValue, info);\n    let completed;\n    if ((0, _isPromise.isPromise)(result)) {\n      completed = result.then(resolved => completeValue(exeContext, returnType, fieldNodes, info, path, resolved));\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n    if ((0, _isPromise.isPromise)(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, rawError => {\n        const error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n    return completed;\n  } catch (rawError) {\n    const error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nfunction buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes,\n    returnType: fieldDef.type,\n    parentType,\n    path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if ((0, _definition.isNonNullType)(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if ((0, _definition.isNonNullType)(returnType)) {\n    const completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n    if (completed === null) {\n      throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);\n    }\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if ((0, _definition.isListType)(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if ((0, _definition.isLeafType)(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if ((0, _definition.isAbstractType)(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n  if ((0, _definition.isObjectType)(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n  /* c8 ignore next 6 */\n  // Not reachable, all possible output types have been considered.\n\n  false || (0, _invariant.invariant)(false, 'Cannot complete value of unexpected output type: ' + (0, _inspect.inspect)(returnType));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  if (!(0, _isIterableObject.isIterableObject)(result)) {\n    throw new _GraphQLError.GraphQLError(`Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`);\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  const itemType = returnType.ofType;\n  let containsPromise = false;\n  const completedResults = Array.from(result, (item, index) => {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    const itemPath = (0, _Path.addPath)(path, index, undefined);\n    try {\n      let completedItem;\n      if ((0, _isPromise.isPromise)(item)) {\n        completedItem = item.then(resolved => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved));\n      } else {\n        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);\n      }\n      if ((0, _isPromise.isPromise)(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, rawError => {\n          const error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n      return completedItem;\n    } catch (rawError) {\n      const error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  const serializedResult = returnType.serialize(result);\n  if (serializedResult == null) {\n    throw new Error(`Expected \\`${(0, _inspect.inspect)(returnType)}.serialize(${(0, _inspect.inspect)(result)})\\` to ` + `return non-nullable value, returned: ${(0, _inspect.inspect)(serializedResult)}`);\n  }\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var _returnType$resolveTy;\n  const resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;\n  const contextValue = exeContext.contextValue;\n  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n  if ((0, _isPromise.isPromise)(runtimeType)) {\n    return runtimeType.then(resolvedRuntimeType => completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result));\n  }\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\nfunction ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {\n  if (runtimeTypeName == null) {\n    throw new _GraphQLError.GraphQLError(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`, fieldNodes);\n  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n  // TODO: remove in 17.0.0 release\n\n  if ((0, _definition.isObjectType)(runtimeTypeName)) {\n    throw new _GraphQLError.GraphQLError('Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.');\n  }\n  if (typeof runtimeTypeName !== 'string') {\n    throw new _GraphQLError.GraphQLError(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` + `value ${(0, _inspect.inspect)(result)}, received \"${(0, _inspect.inspect)(runtimeTypeName)}\".`);\n  }\n  const runtimeType = exeContext.schema.getType(runtimeTypeName);\n  if (runtimeType == null) {\n    throw new _GraphQLError.GraphQLError(`Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`, {\n      nodes: fieldNodes\n    });\n  }\n  if (!(0, _definition.isObjectType)(runtimeType)) {\n    throw new _GraphQLError.GraphQLError(`Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`, {\n      nodes: fieldNodes\n    });\n  }\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new _GraphQLError.GraphQLError(`Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`, {\n      nodes: fieldNodes\n    });\n  }\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n\n  if (returnType.isTypeOf) {\n    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n    if ((0, _isPromise.isPromise)(isTypeOf)) {\n      return isTypeOf.then(resolvedIsTypeOf => {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n        return executeFields(exeContext, returnType, result, path, subFieldNodes);\n      });\n    }\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new _GraphQLError.GraphQLError(`Expected value of type \"${returnType.name}\" but got: ${(0, _inspect.inspect)(result)}.`, {\n    nodes: fieldNodes\n  });\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nconst defaultTypeResolver = function (value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if ((0, _isObjectLike.isObjectLike)(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n      if ((0, _isPromise.isPromise)(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(isTypeOfResults => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexports.defaultTypeResolver = defaultTypeResolver;\nconst defaultFieldResolver = function (source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if ((0, _isObjectLike.isObjectLike)(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexports.defaultFieldResolver = defaultFieldResolver;\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const fieldName = fieldNode.name.value;\n  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.SchemaMetaFieldDef;\n  } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.TypeMetaFieldDef;\n  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n  return parentType.getFields()[fieldName];\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","defaultTypeResolver","defaultFieldResolver","execute","executeSync","getFieldDef","_devAssert","require","_inspect","_invariant","_isIterableObject","_isObjectLike","_isPromise","_memoize","_Path","_promiseForObject","_promiseReduce","_GraphQLError","_locatedError","_ast","_kinds","_definition","_introspection","_validate","_collectFields","_values","collectSubfields","memoize3","exeContext","returnType","fieldNodes","schema","fragments","variableValues","args","arguments","length","devAssert","document","rootValue","errors","operation","result","executeOperation","isPromise","then","data","buildResponse","error","push","Error","rawVariableValues","assertValidSchema","isObjectLike","_definition$name","_operation$variableDe","contextValue","operationName","fieldResolver","typeResolver","subscribeFieldResolver","create","definition","definitions","kind","Kind","OPERATION_DEFINITION","undefined","GraphQLError","name","FRAGMENT_DEFINITION","variableDefinitions","coercedVariableValues","getVariableValues","maxErrors","coerced","rootType","getRootType","nodes","rootFields","collectFields","selectionSet","path","OperationTypeNode","QUERY","executeFields","MUTATION","executeFieldsSerially","SUBSCRIPTION","parentType","sourceValue","fields","promiseReduce","entries","results","responseName","fieldPath","addPath","executeField","resolvedResult","containsPromise","promiseForObject","source","_fieldDef$resolve","fieldDef","type","resolveFn","resolve","info","getArgumentValues","completed","resolved","completeValue","rawError","locatedError","pathToArray","handleFieldError","fieldName","isNonNullType","ofType","isListType","completeListValue","isLeafType","completeLeafValue","isAbstractType","completeAbstractValue","isObjectType","completeObjectValue","invariant","inspect","isIterableObject","itemType","completedResults","Array","from","item","index","itemPath","completedItem","Promise","all","serializedResult","serialize","_returnType$resolveTy","resolveTypeFn","resolveType","runtimeType","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeName","getType","isSubType","subFieldNodes","isTypeOf","resolvedIsTypeOf","invalidReturnTypeError","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","i","isTypeOfResult","isTypeOfResults","property","fieldNode","SchemaMetaFieldDef","getQueryType","TypeMetaFieldDef","TypeNameMetaFieldDef","getFields"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/execution/execute.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.assertValidExecutionArguments = assertValidExecutionArguments;\nexports.buildExecutionContext = buildExecutionContext;\nexports.buildResolveInfo = buildResolveInfo;\nexports.defaultTypeResolver = exports.defaultFieldResolver = void 0;\nexports.execute = execute;\nexports.executeSync = executeSync;\nexports.getFieldDef = getFieldDef;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _isIterableObject = require('../jsutils/isIterableObject.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _isPromise = require('../jsutils/isPromise.js');\n\nvar _memoize = require('../jsutils/memoize3.js');\n\nvar _Path = require('../jsutils/Path.js');\n\nvar _promiseForObject = require('../jsutils/promiseForObject.js');\n\nvar _promiseReduce = require('../jsutils/promiseReduce.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _locatedError = require('../error/locatedError.js');\n\nvar _ast = require('../language/ast.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _definition = require('../type/definition.js');\n\nvar _introspection = require('../type/introspection.js');\n\nvar _validate = require('../type/validate.js');\n\nvar _collectFields = require('./collectFields.js');\n\nvar _values = require('./values.js');\n\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\nconst collectSubfields = (0, _memoize.memoize3)(\n  (exeContext, returnType, fieldNodes) =>\n    (0, _collectFields.collectSubfields)(\n      exeContext.schema,\n      exeContext.fragments,\n      exeContext.variableValues,\n      returnType,\n      fieldNodes,\n    ),\n);\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nfunction execute(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    (0, _devAssert.devAssert)(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const { schema, document, variableValues, rootValue } = args; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  //\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    const { operation } = exeContext;\n    const result = executeOperation(exeContext, operation, rootValue);\n\n    if ((0, _isPromise.isPromise)(result)) {\n      return result.then(\n        (data) => buildResponse(data, exeContext.errors),\n        (error) => {\n          exeContext.errors.push(error);\n          return buildResponse(null, exeContext.errors);\n        },\n      );\n    }\n\n    return buildResponse(result, exeContext.errors);\n  } catch (error) {\n    exeContext.errors.push(error);\n    return buildResponse(null, exeContext.errors);\n  }\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nfunction executeSync(args) {\n  const result = execute(args); // Assert that the execution was synchronous.\n\n  if ((0, _isPromise.isPromise)(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(data, errors) {\n  return errors.length === 0\n    ? {\n        data,\n      }\n    : {\n        errors,\n        data,\n      };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nfunction assertValidExecutionArguments(schema, document, rawVariableValues) {\n  document || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  (0, _validate.assertValidSchema)(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null ||\n    (0, _isObjectLike.isObjectLike)(rawVariableValues) ||\n    (0, _devAssert.devAssert)(\n      false,\n      'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.',\n    );\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nfunction buildExecutionContext(args) {\n  var _definition$name, _operation$variableDe;\n\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues: rawVariableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    subscribeFieldResolver,\n  } = args;\n  let operation;\n  const fragments = Object.create(null);\n\n  for (const definition of document.definitions) {\n    switch (definition.kind) {\n      case _kinds.Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [\n              new _GraphQLError.GraphQLError(\n                'Must provide operation name if query contains multiple operations.',\n              ),\n            ];\n          }\n\n          operation = definition;\n        } else if (\n          ((_definition$name = definition.name) === null ||\n          _definition$name === void 0\n            ? void 0\n            : _definition$name.value) === operationName\n        ) {\n          operation = definition;\n        }\n\n        break;\n\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [\n        new _GraphQLError.GraphQLError(\n          `Unknown operation named \"${operationName}\".`,\n        ),\n      ];\n    }\n\n    return [new _GraphQLError.GraphQLError('Must provide an operation.')];\n  } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const variableDefinitions =\n    (_operation$variableDe = operation.variableDefinitions) !== null &&\n    _operation$variableDe !== void 0\n      ? _operation$variableDe\n      : [];\n  const coercedVariableValues = (0, _values.getVariableValues)(\n    schema,\n    variableDefinitions,\n    rawVariableValues !== null && rawVariableValues !== void 0\n      ? rawVariableValues\n      : {},\n    {\n      maxErrors: 50,\n    },\n  );\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema,\n    fragments,\n    rootValue,\n    contextValue,\n    operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver:\n      fieldResolver !== null && fieldResolver !== void 0\n        ? fieldResolver\n        : defaultFieldResolver,\n    typeResolver:\n      typeResolver !== null && typeResolver !== void 0\n        ? typeResolver\n        : defaultTypeResolver,\n    subscribeFieldResolver:\n      subscribeFieldResolver !== null && subscribeFieldResolver !== void 0\n        ? subscribeFieldResolver\n        : defaultFieldResolver,\n    errors: [],\n  };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  const rootType = exeContext.schema.getRootType(operation.operation);\n\n  if (rootType == null) {\n    throw new _GraphQLError.GraphQLError(\n      `Schema is not configured to execute ${operation.operation} operation.`,\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = (0, _collectFields.collectFields)(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const path = undefined;\n\n  switch (operation.operation) {\n    case _ast.OperationTypeNode.QUERY:\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n\n    case _ast.OperationTypeNode.MUTATION:\n      return executeFieldsSerially(\n        exeContext,\n        rootType,\n        rootValue,\n        path,\n        rootFields,\n      );\n\n    case _ast.OperationTypeNode.SUBSCRIPTION:\n      // TODO: deprecate `subscribe` and move all logic here\n      // Temporary solution until we finish merging execute and subscribe together\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n  }\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\n\nfunction executeFieldsSerially(\n  exeContext,\n  parentType,\n  sourceValue,\n  path,\n  fields,\n) {\n  return (0, _promiseReduce.promiseReduce)(\n    fields.entries(),\n    (results, [responseName, fieldNodes]) => {\n      const fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result === undefined) {\n        return results;\n      }\n\n      if ((0, _isPromise.isPromise)(result)) {\n        return result.then((resolvedResult) => {\n          results[responseName] = resolvedResult;\n          return results;\n        });\n      }\n\n      results[responseName] = result;\n      return results;\n    },\n    Object.create(null),\n  );\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  const results = Object.create(null);\n  let containsPromise = false;\n\n  for (const [responseName, fieldNodes] of fields.entries()) {\n    const fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);\n    const result = executeField(\n      exeContext,\n      parentType,\n      sourceValue,\n      fieldNodes,\n      fieldPath,\n    );\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if ((0, _isPromise.isPromise)(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return (0, _promiseForObject.promiseForObject)(results);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\n\nfunction executeField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  const returnType = fieldDef.type;\n  const resolveFn =\n    (_fieldDef$resolve = fieldDef.resolve) !== null &&\n    _fieldDef$resolve !== void 0\n      ? _fieldDef$resolve\n      : exeContext.fieldResolver;\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    parentType,\n    path,\n  ); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    const args = (0, _values.getArgumentValues)(\n      fieldDef,\n      fieldNodes[0],\n      exeContext.variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue;\n    const result = resolveFn(source, args, contextValue, info);\n    let completed;\n\n    if ((0, _isPromise.isPromise)(result)) {\n      completed = result.then((resolved) =>\n        completeValue(exeContext, returnType, fieldNodes, info, path, resolved),\n      );\n    } else {\n      completed = completeValue(\n        exeContext,\n        returnType,\n        fieldNodes,\n        info,\n        path,\n        result,\n      );\n    }\n\n    if ((0, _isPromise.isPromise)(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, (rawError) => {\n        const error = (0, _locatedError.locatedError)(\n          rawError,\n          fieldNodes,\n          (0, _Path.pathToArray)(path),\n        );\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (rawError) {\n    const error = (0, _locatedError.locatedError)(\n      rawError,\n      fieldNodes,\n      (0, _Path.pathToArray)(path),\n    );\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nfunction buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes,\n    returnType: fieldDef.type,\n    parentType,\n    path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues,\n  };\n}\n\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if ((0, _definition.isNonNullType)(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if ((0, _definition.isNonNullType)(returnType)) {\n    const completed = completeValue(\n      exeContext,\n      returnType.ofType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n\n    if (completed === null) {\n      throw new Error(\n        `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,\n      );\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if ((0, _definition.isListType)(returnType)) {\n    return completeListValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if ((0, _definition.isLeafType)(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if ((0, _definition.isAbstractType)(returnType)) {\n    return completeAbstractValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is Object, execute and complete all sub-selections.\n\n  if ((0, _definition.isObjectType)(returnType)) {\n    return completeObjectValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  }\n  /* c8 ignore next 6 */\n  // Not reachable, all possible output types have been considered.\n\n  false ||\n    (0, _invariant.invariant)(\n      false,\n      'Cannot complete value of unexpected output type: ' +\n        (0, _inspect.inspect)(returnType),\n    );\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  if (!(0, _isIterableObject.isIterableObject)(result)) {\n    throw new _GraphQLError.GraphQLError(\n      `Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`,\n    );\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  const itemType = returnType.ofType;\n  let containsPromise = false;\n  const completedResults = Array.from(result, (item, index) => {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    const itemPath = (0, _Path.addPath)(path, index, undefined);\n\n    try {\n      let completedItem;\n\n      if ((0, _isPromise.isPromise)(item)) {\n        completedItem = item.then((resolved) =>\n          completeValue(\n            exeContext,\n            itemType,\n            fieldNodes,\n            info,\n            itemPath,\n            resolved,\n          ),\n        );\n      } else {\n        completedItem = completeValue(\n          exeContext,\n          itemType,\n          fieldNodes,\n          info,\n          itemPath,\n          item,\n        );\n      }\n\n      if ((0, _isPromise.isPromise)(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, (rawError) => {\n          const error = (0, _locatedError.locatedError)(\n            rawError,\n            fieldNodes,\n            (0, _Path.pathToArray)(itemPath),\n          );\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n\n      return completedItem;\n    } catch (rawError) {\n      const error = (0, _locatedError.locatedError)(\n        rawError,\n        fieldNodes,\n        (0, _Path.pathToArray)(itemPath),\n      );\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  const serializedResult = returnType.serialize(result);\n\n  if (serializedResult == null) {\n    throw new Error(\n      `Expected \\`${(0, _inspect.inspect)(returnType)}.serialize(${(0,\n      _inspect.inspect)(result)})\\` to ` +\n        `return non-nullable value, returned: ${(0, _inspect.inspect)(\n          serializedResult,\n        )}`,\n    );\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  var _returnType$resolveTy;\n\n  const resolveTypeFn =\n    (_returnType$resolveTy = returnType.resolveType) !== null &&\n    _returnType$resolveTy !== void 0\n      ? _returnType$resolveTy\n      : exeContext.typeResolver;\n  const contextValue = exeContext.contextValue;\n  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if ((0, _isPromise.isPromise)(runtimeType)) {\n    return runtimeType.then((resolvedRuntimeType) =>\n      completeObjectValue(\n        exeContext,\n        ensureValidRuntimeType(\n          resolvedRuntimeType,\n          exeContext,\n          returnType,\n          fieldNodes,\n          info,\n          result,\n        ),\n        fieldNodes,\n        info,\n        path,\n        result,\n      ),\n    );\n  }\n\n  return completeObjectValue(\n    exeContext,\n    ensureValidRuntimeType(\n      runtimeType,\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      result,\n    ),\n    fieldNodes,\n    info,\n    path,\n    result,\n  );\n}\n\nfunction ensureValidRuntimeType(\n  runtimeTypeName,\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  result,\n) {\n  if (runtimeTypeName == null) {\n    throw new _GraphQLError.GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`,\n      fieldNodes,\n    );\n  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n  // TODO: remove in 17.0.0 release\n\n  if ((0, _definition.isObjectType)(runtimeTypeName)) {\n    throw new _GraphQLError.GraphQLError(\n      'Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.',\n    );\n  }\n\n  if (typeof runtimeTypeName !== 'string') {\n    throw new _GraphQLError.GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n        `value ${(0, _inspect.inspect)(result)}, received \"${(0,\n        _inspect.inspect)(runtimeTypeName)}\".`,\n    );\n  }\n\n  const runtimeType = exeContext.schema.getType(runtimeTypeName);\n\n  if (runtimeType == null) {\n    throw new _GraphQLError.GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!(0, _definition.isObjectType)(runtimeType)) {\n    throw new _GraphQLError.GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new _GraphQLError.GraphQLError(\n      `Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  // Collect sub-fields to execute to complete this value.\n  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n\n  if (returnType.isTypeOf) {\n    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if ((0, _isPromise.isPromise)(isTypeOf)) {\n      return isTypeOf.then((resolvedIsTypeOf) => {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return executeFields(\n          exeContext,\n          returnType,\n          result,\n          path,\n          subFieldNodes,\n        );\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new _GraphQLError.GraphQLError(\n    `Expected value of type \"${returnType.name}\" but got: ${(0,\n    _inspect.inspect)(result)}.`,\n    {\n      nodes: fieldNodes,\n    },\n  );\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nconst defaultTypeResolver = function (value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (\n    (0, _isObjectLike.isObjectLike)(value) &&\n    typeof value.__typename === 'string'\n  ) {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if ((0, _isPromise.isPromise)(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexports.defaultTypeResolver = defaultTypeResolver;\n\nconst defaultFieldResolver = function (source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if ((0, _isObjectLike.isObjectLike)(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexports.defaultFieldResolver = defaultFieldResolver;\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const fieldName = fieldNode.name.value;\n\n  if (\n    fieldName === _introspection.SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return _introspection.SchemaMetaFieldDef;\n  } else if (\n    fieldName === _introspection.TypeMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return _introspection.TypeMetaFieldDef;\n  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}