{"ast":null,"code":"// Import createAsyncThunk and createSlice here.\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\n// Create loadCommentsForArticleId here.\nexport const loadCommentsForArticleId = createAsyncThunk('comments/loadComments', async id => {\n  const response = await fetch(`api/articles/${id}/comments`);\n  const json = await response.json();\n  return json;\n});\n\n// Create postCommentForArticleId here.\nexport const postCommentForArticleId = createAsyncThunk('comments/postComment', async _ref => {\n  let {\n    articleId,\n    comment\n  } = _ref;\n  const requestBody = JSON.stringify({\n    comment: comment\n  });\n  const response = await fetch(`api/articles/${articleId}/comments`, {\n    method: 'POST',\n    body: requestBody\n  });\n  const json = await response.json();\n  return json;\n});\nexport const commentsSlice = createSlice({\n  name: 'comments',\n  initialState: {\n    // Add initial state properties here.\n    // loadCommentsForArticleId\n    byArticleId: {},\n    isLoadingComments: false,\n    failedToLoadComments: false,\n    // postCommmentForArticleId\n    createCommentIsPending: false,\n    failedToCreateComment: false\n  },\n  // Add extraReducers here.\n  // loadCommentsForArticleId\n  extraReducers: {\n    [loadCommentsForArticleId.pending]: (state, action) => {\n      state.isLoadingComments = true;\n      state.failedToLoadComments = false;\n    },\n    [loadCommentsForArticleId.fulfilled]: (state, action) => {\n      state.byArticleId = {\n        [action.payload.articleId]: action.payload.comments\n      };\n      state.isLoadingComments = false;\n      state.failedToLoadComments = false;\n    },\n    [loadCommentsForArticleId.rejected]: (state, action) => {\n      state.isLoadingComments = false;\n      state.failedToLoadComments = true;\n    },\n    // postCommmentForArticleId\n    [postCommentForArticleId.pending]: (state, action) => {\n      state.createCommentIsPending = true;\n      state.failedToCreateComment = false;\n    },\n    [postCommentForArticleId.fulfilled]: (state, action) => {\n      const articleId = action.payload.articleId;\n      state.byArticleId[articleId].push(action.payload);\n      state.createCommentIsPending = false;\n      state.failedToCreateComment = false;\n    },\n    [postCommentForArticleId.rejected]: (state, action) => {\n      state.createCommentIsPending = false;\n      state.failedToCreateComment = true;\n    }\n  }\n});\nexport const selectComments = state => state.comments.byArticleId;\nexport const isLoadingComments = state => state.comments.isLoadingComments;\nexport const createCommentIsPending = state => state.comments.createCommentIsPending;\nexport default commentsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","loadCommentsForArticleId","id","response","fetch","json","postCommentForArticleId","articleId","comment","requestBody","JSON","stringify","method","body","commentsSlice","name","initialState","byArticleId","isLoadingComments","failedToLoadComments","createCommentIsPending","failedToCreateComment","extraReducers","pending","state","action","fulfilled","payload","comments","rejected","push","selectComments","reducer"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/src/features/comments/commentsSlice.js"],"sourcesContent":["// Import createAsyncThunk and createSlice here.\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\n// Create loadCommentsForArticleId here.\nexport const loadCommentsForArticleId = createAsyncThunk(\n  'comments/loadComments',\n  async (id) => {\n    const response = await fetch(`api/articles/${id}/comments`);\n    const json = await response.json();\n    return json;\n  }\n);\n\n// Create postCommentForArticleId here.\nexport const postCommentForArticleId = createAsyncThunk(\n  'comments/postComment',\n  async ({ articleId, comment }) => {\n    const requestBody = JSON.stringify({comment: comment});\n    const response = await fetch(`api/articles/${articleId}/comments`, {\n      method: 'POST',\n      body: requestBody\n    });\n\n    const json = await response.json();\n    return json;\n  }\n);\n\nexport const commentsSlice = createSlice({\n  name: 'comments',\n  initialState: {\n    // Add initial state properties here.\n    // loadCommentsForArticleId\n    byArticleId: {},\n    isLoadingComments: false,\n    failedToLoadComments: false,\n\n    // postCommmentForArticleId\n    createCommentIsPending: false,\n    failedToCreateComment: false\n  },\n  // Add extraReducers here.\n  // loadCommentsForArticleId\n  extraReducers: {\n    [loadCommentsForArticleId.pending]: (state, action) => {\n      state.isLoadingComments = true;\n      state.failedToLoadComments = false;\n    },\n\n    [loadCommentsForArticleId.fulfilled]: (state, action) => {\n      state.byArticleId = {[action.payload.articleId]: action.payload.comments};\n      state.isLoadingComments = false;\n      state.failedToLoadComments = false;\n    },\n\n    [loadCommentsForArticleId.rejected]: (state, action) => {\n      state.isLoadingComments = false;\n      state.failedToLoadComments = true;\n    },\n\n    // postCommmentForArticleId\n    [postCommentForArticleId.pending]: (state, action) => {\n      state.createCommentIsPending = true;\n      state.failedToCreateComment = false;\n    },\n\n    [postCommentForArticleId.fulfilled]: (state, action) => {\n      const articleId = action.payload.articleId\n      state.byArticleId[articleId].push(action.payload);\n\n      state.createCommentIsPending = false;\n      state.failedToCreateComment = false;\n    },\n\n[postCommentForArticleId.rejected]: (state, action) => {\n      state.createCommentIsPending = false;\n      state.failedToCreateComment = true;\n    }\n  }\n});\n\nexport const selectComments = (state) => state.comments.byArticleId;\nexport const isLoadingComments = (state) => state.comments.isLoadingComments;\nexport const createCommentIsPending = (state) => state.comments.createCommentIsPending;\n\nexport default commentsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}