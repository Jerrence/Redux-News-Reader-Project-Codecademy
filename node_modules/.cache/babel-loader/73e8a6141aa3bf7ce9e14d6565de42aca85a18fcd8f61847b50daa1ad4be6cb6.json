{"ast":null,"code":"import { rest } from '../mockServiceWorker.js';\nimport articlesData from './articles.json';\nimport commentsData from './comments.json';\nconst userComments = {};\nfunction mockDelay(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\nexport const handlers = [rest.get('/api/articles', (req, res, ctx) => {\n  mockDelay(500);\n  return res(ctx.status(200), ctx.json(articlesData.map(article => ({\n    id: article.id,\n    title: article.title,\n    preview: article.preview,\n    image: article.image\n  }))));\n}), rest.get('/api/articles/:articleId', (req, res, ctx) => {\n  mockDelay(500);\n  const {\n    articleId\n  } = req.params;\n  return res(ctx.status(200), ctx.json(articlesData.find(article => article.id === parseInt(articleId))));\n}), rest.get('/api/articles/:articleId/comments', (req, res, ctx) => {\n  mockDelay(500);\n  const {\n    articleId\n  } = req.params;\n  const userCommentsForArticle = userComments[articleId] || [];\n  return res(ctx.status(200), ctx.json({\n    articleId: parseInt(articleId),\n    comments: commentsData.filter(comment => comment.articleId === parseInt(articleId)).concat(userCommentsForArticle)\n  }));\n}), rest.post('/api/articles/:articleId/comments', (req, res, ctx) => {\n  mockDelay(500);\n  const {\n    articleId\n  } = req.params;\n  const commentResponse = {\n    id: commentsData.length,\n    articleId: parseInt(articleId),\n    text: JSON.parse(req.body).comment\n  };\n  if (userComments[articleId]) {\n    userComments[articleId].push(commentResponse);\n  } else {\n    userComments[articleId] = [commentResponse];\n  }\n  return res(ctx.status(200), ctx.json(commentResponse));\n})];","map":{"version":3,"names":["rest","articlesData","commentsData","userComments","mockDelay","milliseconds","date","Date","now","currentDate","handlers","get","req","res","ctx","status","json","map","article","id","title","preview","image","articleId","params","find","parseInt","userCommentsForArticle","comments","filter","comment","concat","post","commentResponse","length","text","JSON","parse","body","push"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/src/mocks/handlers.js"],"sourcesContent":["import { rest } from '../mockServiceWorker.js';\nimport articlesData from './articles.json';\nimport commentsData from './comments.json';\n\nconst userComments = {};\n\nfunction mockDelay(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nexport const handlers = [\n  rest.get('/api/articles', (req, res, ctx) => {\n    mockDelay(500);\n    return res(\n      ctx.status(200),\n      ctx.json(\n        articlesData.map((article) => ({\n          id: article.id,\n          title: article.title,\n          preview: article.preview,\n          image: article.image,\n        }))\n      )\n    );\n  }),\n  rest.get('/api/articles/:articleId', (req, res, ctx) => {\n    mockDelay(500);\n    const { articleId } = req.params;\n    return res(\n      ctx.status(200),\n      ctx.json(\n        articlesData.find((article) => article.id === parseInt(articleId))\n      )\n    );\n  }),\n  rest.get('/api/articles/:articleId/comments', (req, res, ctx) => {\n    mockDelay(500);\n    const { articleId } = req.params;\n    const userCommentsForArticle = userComments[articleId] || [];\n    return res(\n      ctx.status(200),\n      ctx.json({\n        articleId: parseInt(articleId),\n        comments: commentsData\n          .filter((comment) => comment.articleId === parseInt(articleId))\n          .concat(userCommentsForArticle),\n      })\n    );\n  }),\n  rest.post('/api/articles/:articleId/comments', (req, res, ctx) => {\n    mockDelay(500);\n    const { articleId } = req.params;\n    const commentResponse = {\n      id: commentsData.length,\n      articleId: parseInt(articleId),\n      text: JSON.parse(req.body).comment,\n    };\n\n    if (userComments[articleId]) {\n      userComments[articleId].push(commentResponse);\n    } else {\n      userComments[articleId] = [commentResponse];\n    }\n\n    return res(ctx.status(200), ctx.json(commentResponse));\n  }),\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}