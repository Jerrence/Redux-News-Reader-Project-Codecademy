{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;\nvar _GraphQLError = require('../../error/GraphQLError.js');\nvar _printer = require('../../language/printer.js');\nvar _definition = require('../../type/definition.js');\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nfunction VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);\n      if (type !== undefined && !(0, _definition.isInputType)(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = (0, _printer.print)(node.type);\n        context.reportError(new _GraphQLError.GraphQLError(`Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`, {\n          nodes: node.type\n        }));\n      }\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","VariablesAreInputTypesRule","_GraphQLError","require","_printer","_definition","_typeFromAST","context","VariableDefinition","node","type","typeFromAST","getSchema","undefined","isInputType","variableName","variable","name","typeName","print","reportError","GraphQLError","nodes"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _printer = require('../../language/printer.js');\n\nvar _definition = require('../../type/definition.js');\n\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nfunction VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = (0, _typeFromAST.typeFromAST)(\n        context.getSchema(),\n        node.type,\n      );\n\n      if (type !== undefined && !(0, _definition.isInputType)(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = (0, _printer.print)(node.type);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            {\n              nodes: node.type,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,0BAA0B,GAAGA,0BAA0B;AAE/D,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AAE1D,IAAIC,QAAQ,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AAEnD,IAAIE,WAAW,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAErD,IAAIG,YAAY,GAAGH,OAAO,CAAC,gCAAgC,CAAC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,0BAA0B,CAACM,OAAO,EAAE;EAC3C,OAAO;IACLC,kBAAkB,CAACC,IAAI,EAAE;MACvB,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAEJ,YAAY,CAACK,WAAW,EACvCJ,OAAO,CAACK,SAAS,EAAE,EACnBH,IAAI,CAACC,IAAI,CACV;MAED,IAAIA,IAAI,KAAKG,SAAS,IAAI,CAAC,CAAC,CAAC,EAAER,WAAW,CAACS,WAAW,EAAEJ,IAAI,CAAC,EAAE;QAC7D,MAAMK,YAAY,GAAGN,IAAI,CAACO,QAAQ,CAACC,IAAI,CAACjB,KAAK;QAC7C,MAAMkB,QAAQ,GAAG,CAAC,CAAC,EAAEd,QAAQ,CAACe,KAAK,EAAEV,IAAI,CAACC,IAAI,CAAC;QAC/CH,OAAO,CAACa,WAAW,CACjB,IAAIlB,aAAa,CAACmB,YAAY,CAC3B,cAAaN,YAAa,+BAA8BG,QAAS,IAAG,EACrE;UACEI,KAAK,EAAEb,IAAI,CAACC;QACd,CAAC,CACF,CACF;MACH;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}