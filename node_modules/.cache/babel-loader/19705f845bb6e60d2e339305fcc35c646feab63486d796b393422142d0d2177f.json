{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.assertValidSDL = assertValidSDL;\nexports.assertValidSDLExtension = assertValidSDLExtension;\nexports.validate = validate;\nexports.validateSDL = validateSDL;\nvar _devAssert = require('../jsutils/devAssert.js');\nvar _GraphQLError = require('../error/GraphQLError.js');\nvar _visitor = require('../language/visitor.js');\nvar _validate = require('../type/validate.js');\nvar _TypeInfo = require('../utilities/TypeInfo.js');\nvar _specifiedRules = require('./specifiedRules.js');\nvar _ValidationContext = require('./ValidationContext.js');\n\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\nfunction validate(schema, documentAST) {\n  let rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedRules;\n  let options = arguments.length > 3 ? arguments[3] : undefined;\n  let typeInfo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _TypeInfo.TypeInfo(schema);\n  var _options$maxErrors;\n  const maxErrors = (_options$maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors) !== null && _options$maxErrors !== void 0 ? _options$maxErrors : 100;\n  documentAST || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  (0, _validate.assertValidSchema)(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new _ValidationContext.ValidationContext(schema, documentAST, typeInfo, error => {\n    if (errors.length >= maxErrors) {\n      errors.push(new _GraphQLError.GraphQLError('Too many validation errors, error limit reached. Validation aborted.')); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n      throw abortObj;\n    }\n    errors.push(error);\n  }); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = (0, _visitor.visitInParallel)(rules.map(rule => rule(context))); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    (0, _visitor.visit)(documentAST, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n  return errors;\n}\n/**\n * @internal\n */\n\nfunction validateSDL(documentAST, schemaToExtend) {\n  let rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedSDLRules;\n  const errors = [];\n  const context = new _ValidationContext.SDLValidationContext(documentAST, schemaToExtend, error => {\n    errors.push(error);\n  });\n  const visitors = rules.map(rule => rule(context));\n  (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nfunction assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n  if (errors.length !== 0) {\n    throw new Error(errors.map(error => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nfunction assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n  if (errors.length !== 0) {\n    throw new Error(errors.map(error => error.message).join('\\n\\n'));\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","assertValidSDL","assertValidSDLExtension","validate","validateSDL","_devAssert","require","_GraphQLError","_visitor","_validate","_TypeInfo","_specifiedRules","_ValidationContext","schema","documentAST","rules","specifiedRules","options","typeInfo","TypeInfo","_options$maxErrors","maxErrors","devAssert","assertValidSchema","abortObj","freeze","errors","context","ValidationContext","error","length","push","GraphQLError","visitor","visitInParallel","map","rule","visit","visitWithTypeInfo","e","schemaToExtend","specifiedSDLRules","SDLValidationContext","visitors","Error","message","join"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/validate.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.assertValidSDL = assertValidSDL;\nexports.assertValidSDLExtension = assertValidSDLExtension;\nexports.validate = validate;\nexports.validateSDL = validateSDL;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _visitor = require('../language/visitor.js');\n\nvar _validate = require('../type/validate.js');\n\nvar _TypeInfo = require('../utilities/TypeInfo.js');\n\nvar _specifiedRules = require('./specifiedRules.js');\n\nvar _ValidationContext = require('./ValidationContext.js');\n\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\nfunction validate(\n  schema,\n  documentAST,\n  rules = _specifiedRules.specifiedRules,\n  options,\n  /** @deprecated will be removed in 17.0.0 */\n  typeInfo = new _TypeInfo.TypeInfo(schema),\n) {\n  var _options$maxErrors;\n\n  const maxErrors =\n    (_options$maxErrors =\n      options === null || options === void 0 ? void 0 : options.maxErrors) !==\n      null && _options$maxErrors !== void 0\n      ? _options$maxErrors\n      : 100;\n  documentAST || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  (0, _validate.assertValidSchema)(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new _ValidationContext.ValidationContext(\n    schema,\n    documentAST,\n    typeInfo,\n    (error) => {\n      if (errors.length >= maxErrors) {\n        errors.push(\n          new _GraphQLError.GraphQLError(\n            'Too many validation errors, error limit reached. Validation aborted.',\n          ),\n        ); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n        throw abortObj;\n      }\n\n      errors.push(error);\n    },\n  ); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = (0, _visitor.visitInParallel)(\n    rules.map((rule) => rule(context)),\n  ); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    (0, _visitor.visit)(\n      documentAST,\n      (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor),\n    );\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nfunction validateSDL(\n  documentAST,\n  schemaToExtend,\n  rules = _specifiedRules.specifiedSDLRules,\n) {\n  const errors = [];\n  const context = new _ValidationContext.SDLValidationContext(\n    documentAST,\n    schemaToExtend,\n    (error) => {\n      errors.push(error);\n    },\n  );\n  const visitors = rules.map((rule) => rule(context));\n  (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nfunction assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nfunction assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}