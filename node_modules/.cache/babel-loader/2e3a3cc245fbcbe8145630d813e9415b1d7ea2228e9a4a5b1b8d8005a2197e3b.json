{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;\nvar _GraphQLError = require('../../error/GraphQLError.js');\nvar _definition = require('../../type/definition.js');\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nfunction UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n    const typeName = node.name.value;\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n    const fieldNames = knownFieldNames[typeName];\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(new _GraphQLError.GraphQLError(`Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`, {\n          nodes: fieldDef.name\n        }));\n      } else if (fieldNames[fieldName]) {\n        context.reportError(new _GraphQLError.GraphQLError(`Field \"${typeName}.${fieldName}\" can only be defined once.`, {\n          nodes: [fieldNames[fieldName], fieldDef.name]\n        }));\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n    return false;\n  }\n}\nfunction hasField(type, fieldName) {\n  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type) || (0, _definition.isInputObjectType)(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n  return false;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","UniqueFieldDefinitionNamesRule","_GraphQLError","require","_definition","context","schema","getSchema","existingTypeMap","getTypeMap","create","knownFieldNames","InputObjectTypeDefinition","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","node","_node$fields","typeName","name","fieldNodes","fields","fieldNames","fieldDef","fieldName","hasField","reportError","GraphQLError","nodes","type","isObjectType","isInterfaceType","isInputObjectType","getFields"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _definition = require('../../type/definition.js');\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nfunction UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: fieldDef.name,\n            },\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            {\n              nodes: [fieldNames[fieldName], fieldDef.name],\n            },\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (\n    (0, _definition.isObjectType)(type) ||\n    (0, _definition.isInterfaceType)(type) ||\n    (0, _definition.isInputObjectType)(type)\n  ) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,8BAA8B,GAAGA,8BAA8B;AAEvE,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AAE1D,IAAIC,WAAW,GAAGD,OAAO,CAAC,0BAA0B,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA,SAASF,8BAA8B,CAACI,OAAO,EAAE;EAC/C,MAAMC,MAAM,GAAGD,OAAO,CAACE,SAAS,EAAE;EAClC,MAAMC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAU,EAAE,GAAGZ,MAAM,CAACa,MAAM,CAAC,IAAI,CAAC;EAC1E,MAAMC,eAAe,GAAGd,MAAM,CAACa,MAAM,CAAC,IAAI,CAAC;EAC3C,OAAO;IACLE,yBAAyB,EAAEC,oBAAoB;IAC/CC,wBAAwB,EAAED,oBAAoB;IAC9CE,uBAAuB,EAAEF,oBAAoB;IAC7CG,sBAAsB,EAAEH,oBAAoB;IAC5CI,oBAAoB,EAAEJ,oBAAoB;IAC1CK,mBAAmB,EAAEL;EACvB,CAAC;EAED,SAASA,oBAAoB,CAACM,IAAI,EAAE;IAClC,IAAIC,YAAY;IAEhB,MAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAI,CAACtB,KAAK;IAEhC,IAAI,CAACW,eAAe,CAACU,QAAQ,CAAC,EAAE;MAC9BV,eAAe,CAACU,QAAQ,CAAC,GAAGxB,MAAM,CAACa,MAAM,CAAC,IAAI,CAAC;IACjD,CAAC,CAAC;;IAEF;;IAEA,MAAMa,UAAU,GACd,CAACH,YAAY,GAAGD,IAAI,CAACK,MAAM,MAAM,IAAI,IAAIJ,YAAY,KAAK,KAAK,CAAC,GAC5DA,YAAY,GACZ,EAAE;IACR,MAAMK,UAAU,GAAGd,eAAe,CAACU,QAAQ,CAAC;IAE5C,KAAK,MAAMK,QAAQ,IAAIH,UAAU,EAAE;MACjC,MAAMI,SAAS,GAAGD,QAAQ,CAACJ,IAAI,CAACtB,KAAK;MAErC,IAAI4B,QAAQ,CAACpB,eAAe,CAACa,QAAQ,CAAC,EAAEM,SAAS,CAAC,EAAE;QAClDtB,OAAO,CAACwB,WAAW,CACjB,IAAI3B,aAAa,CAAC4B,YAAY,CAC3B,UAAST,QAAS,IAAGM,SAAU,mFAAkF,EAClH;UACEI,KAAK,EAAEL,QAAQ,CAACJ;QAClB,CAAC,CACF,CACF;MACH,CAAC,MAAM,IAAIG,UAAU,CAACE,SAAS,CAAC,EAAE;QAChCtB,OAAO,CAACwB,WAAW,CACjB,IAAI3B,aAAa,CAAC4B,YAAY,CAC3B,UAAST,QAAS,IAAGM,SAAU,6BAA4B,EAC5D;UACEI,KAAK,EAAE,CAACN,UAAU,CAACE,SAAS,CAAC,EAAED,QAAQ,CAACJ,IAAI;QAC9C,CAAC,CACF,CACF;MACH,CAAC,MAAM;QACLG,UAAU,CAACE,SAAS,CAAC,GAAGD,QAAQ,CAACJ,IAAI;MACvC;IACF;IAEA,OAAO,KAAK;EACd;AACF;AAEA,SAASM,QAAQ,CAACI,IAAI,EAAEL,SAAS,EAAE;EACjC,IACE,CAAC,CAAC,EAAEvB,WAAW,CAAC6B,YAAY,EAAED,IAAI,CAAC,IACnC,CAAC,CAAC,EAAE5B,WAAW,CAAC8B,eAAe,EAAEF,IAAI,CAAC,IACtC,CAAC,CAAC,EAAE5B,WAAW,CAAC+B,iBAAiB,EAAEH,IAAI,CAAC,EACxC;IACA,OAAOA,IAAI,CAACI,SAAS,EAAE,CAACT,SAAS,CAAC,IAAI,IAAI;EAC5C;EAEA,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"script","externalDependencies":[]}