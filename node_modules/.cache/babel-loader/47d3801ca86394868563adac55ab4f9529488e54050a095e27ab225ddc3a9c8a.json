{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nfunction UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n      if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {\n        context.reportError(new _GraphQLError.GraphQLError(`Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`, {\n          nodes: node.name\n        }));\n        return;\n      }\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(new _GraphQLError.GraphQLError(`There can be only one directive named \"@${directiveName}\".`, {\n          nodes: [knownDirectiveNames[directiveName], node.name]\n        }));\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","UniqueDirectiveNamesRule","_GraphQLError","require","context","knownDirectiveNames","create","schema","getSchema","DirectiveDefinition","node","directiveName","name","getDirective","reportError","GraphQLError","nodes"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nfunction UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n\n      if (\n        schema !== null &&\n        schema !== void 0 &&\n        schema.getDirective(directiveName)\n      ) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`,\n            {\n              nodes: node.name,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one directive named \"@${directiveName}\".`,\n            {\n              nodes: [knownDirectiveNames[directiveName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,wBAAwB,GAAGA,wBAAwB;AAE3D,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAA6B,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA,SAASF,wBAAwB,CAACG,OAAO,EAAE;EACzC,MAAMC,mBAAmB,GAAGR,MAAM,CAACS,MAAM,CAAC,IAAI,CAAC;EAC/C,MAAMC,MAAM,GAAGH,OAAO,CAACI,SAAS,EAAE;EAClC,OAAO;IACLC,mBAAmB,CAACC,IAAI,EAAE;MACxB,MAAMC,aAAa,GAAGD,IAAI,CAACE,IAAI,CAACZ,KAAK;MAErC,IACEO,MAAM,KAAK,IAAI,IACfA,MAAM,KAAK,KAAK,CAAC,IACjBA,MAAM,CAACM,YAAY,CAACF,aAAa,CAAC,EAClC;QACAP,OAAO,CAACU,WAAW,CACjB,IAAIZ,aAAa,CAACa,YAAY,CAC3B,eAAcJ,aAAc,yDAAwD,EACrF;UACEK,KAAK,EAAEN,IAAI,CAACE;QACd,CAAC,CACF,CACF;QACD;MACF;MAEA,IAAIP,mBAAmB,CAACM,aAAa,CAAC,EAAE;QACtCP,OAAO,CAACU,WAAW,CACjB,IAAIZ,aAAa,CAACa,YAAY,CAC3B,2CAA0CJ,aAAc,IAAG,EAC5D;UACEK,KAAK,EAAE,CAACX,mBAAmB,CAACM,aAAa,CAAC,EAAED,IAAI,CAACE,IAAI;QACvD,CAAC,CACF,CACF;MACH,CAAC,MAAM;QACLP,mBAAmB,CAACM,aAAa,CAAC,GAAGD,IAAI,CAACE,IAAI;MAChD;MAEA,OAAO,KAAK;IACd;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}