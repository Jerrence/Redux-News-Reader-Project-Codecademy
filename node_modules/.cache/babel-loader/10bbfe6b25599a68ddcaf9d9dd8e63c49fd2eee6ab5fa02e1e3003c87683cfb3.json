{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.NoFragmentCyclesRule = NoFragmentCyclesRule;\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * No fragment cycles\n *\n * The graph of fragment spreads must not form any cycles including spreading itself.\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\n */\nfunction NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n    if (spreadNodes.length === 0) {\n      return;\n    }\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath.slice(0, -1).map(s => '\"' + s.name.value + '\"').join(', ');\n        context.reportError(new _GraphQLError.GraphQLError(`Cannot spread fragment \"${spreadName}\" within itself` + (viaPath !== '' ? ` via ${viaPath}.` : '.'), {\n          nodes: cyclePath\n        }));\n      }\n      spreadPath.pop();\n    }\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","NoFragmentCyclesRule","_GraphQLError","require","context","visitedFrags","create","spreadPath","spreadPathIndexByName","OperationDefinition","FragmentDefinition","node","detectCycleRecursive","fragment","name","fragmentName","spreadNodes","getFragmentSpreads","selectionSet","length","spreadNode","spreadName","cycleIndex","push","undefined","spreadFragment","getFragment","cyclePath","slice","viaPath","map","s","join","reportError","GraphQLError","nodes","pop"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/validation/rules/NoFragmentCyclesRule.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.NoFragmentCyclesRule = NoFragmentCyclesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * No fragment cycles\n *\n * The graph of fragment spreads must not form any cycles including spreading itself.\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\n */\nfunction NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    },\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath\n          .slice(0, -1)\n          .map((s) => '\"' + s.name.value + '\"')\n          .join(', ');\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Cannot spread fragment \"${spreadName}\" within itself` +\n              (viaPath !== '' ? ` via ${viaPath}.` : '.'),\n            {\n              nodes: cyclePath,\n            },\n          ),\n        );\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,oBAAoB,GAAGA,oBAAoB;AAEnD,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAA6B,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,oBAAoB,CAACG,OAAO,EAAE;EACrC;EACA;EACA,MAAMC,YAAY,GAAGR,MAAM,CAACS,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,MAAMC,qBAAqB,GAAGX,MAAM,CAACS,MAAM,CAAC,IAAI,CAAC;EACjD,OAAO;IACLG,mBAAmB,EAAE,MAAM,KAAK;IAEhCC,kBAAkB,CAACC,IAAI,EAAE;MACvBC,oBAAoB,CAACD,IAAI,CAAC;MAC1B,OAAO,KAAK;IACd;EACF,CAAC,CAAC,CAAC;EACH;EACA;;EAEA,SAASC,oBAAoB,CAACC,QAAQ,EAAE;IACtC,IAAIR,YAAY,CAACQ,QAAQ,CAACC,IAAI,CAACd,KAAK,CAAC,EAAE;MACrC;IACF;IAEA,MAAMe,YAAY,GAAGF,QAAQ,CAACC,IAAI,CAACd,KAAK;IACxCK,YAAY,CAACU,YAAY,CAAC,GAAG,IAAI;IACjC,MAAMC,WAAW,GAAGZ,OAAO,CAACa,kBAAkB,CAACJ,QAAQ,CAACK,YAAY,CAAC;IAErE,IAAIF,WAAW,CAACG,MAAM,KAAK,CAAC,EAAE;MAC5B;IACF;IAEAX,qBAAqB,CAACO,YAAY,CAAC,GAAGR,UAAU,CAACY,MAAM;IAEvD,KAAK,MAAMC,UAAU,IAAIJ,WAAW,EAAE;MACpC,MAAMK,UAAU,GAAGD,UAAU,CAACN,IAAI,CAACd,KAAK;MACxC,MAAMsB,UAAU,GAAGd,qBAAqB,CAACa,UAAU,CAAC;MACpDd,UAAU,CAACgB,IAAI,CAACH,UAAU,CAAC;MAE3B,IAAIE,UAAU,KAAKE,SAAS,EAAE;QAC5B,MAAMC,cAAc,GAAGrB,OAAO,CAACsB,WAAW,CAACL,UAAU,CAAC;QAEtD,IAAII,cAAc,EAAE;UAClBb,oBAAoB,CAACa,cAAc,CAAC;QACtC;MACF,CAAC,MAAM;QACL,MAAME,SAAS,GAAGpB,UAAU,CAACqB,KAAK,CAACN,UAAU,CAAC;QAC9C,MAAMO,OAAO,GAAGF,SAAS,CACtBC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACZE,GAAG,CAAEC,CAAC,IAAK,GAAG,GAAGA,CAAC,CAACjB,IAAI,CAACd,KAAK,GAAG,GAAG,CAAC,CACpCgC,IAAI,CAAC,IAAI,CAAC;QACb5B,OAAO,CAAC6B,WAAW,CACjB,IAAI/B,aAAa,CAACgC,YAAY,CAC3B,2BAA0Bb,UAAW,iBAAgB,IACnDQ,OAAO,KAAK,EAAE,GAAI,QAAOA,OAAQ,GAAE,GAAG,GAAG,CAAC,EAC7C;UACEM,KAAK,EAAER;QACT,CAAC,CACF,CACF;MACH;MAEApB,UAAU,CAAC6B,GAAG,EAAE;IAClB;IAEA5B,qBAAqB,CAACO,YAAY,CAAC,GAAGS,SAAS;EACjD;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}