{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AsyncEventEmitter = exports.AsyncEventEmitterReadyState = void 0;\nvar debug_1 = require(\"debug\");\nvar strict_event_emitter_1 = require(\"strict-event-emitter\");\nvar nextTick_1 = require(\"./nextTick\");\nvar AsyncEventEmitterReadyState;\n(function (AsyncEventEmitterReadyState) {\n  AsyncEventEmitterReadyState[\"ACTIVE\"] = \"ACTIVE\";\n  AsyncEventEmitterReadyState[\"DEACTIVATED\"] = \"DEACTIVATED\";\n})(AsyncEventEmitterReadyState = exports.AsyncEventEmitterReadyState || (exports.AsyncEventEmitterReadyState = {}));\nvar AsyncEventEmitter = /** @class */function (_super) {\n  __extends(AsyncEventEmitter, _super);\n  function AsyncEventEmitter() {\n    var _this = _super.call(this) || this;\n    _this.log = debug_1.debug('async-event-emitter');\n    _this.queue = new Map();\n    _this.readyState = AsyncEventEmitterReadyState.ACTIVE;\n    return _this;\n  }\n  AsyncEventEmitter.prototype.on = function (event, listener) {\n    var _this = this;\n    var log = this.log.extend('on');\n    log('adding \"%s\" listener...', event);\n    if (this.readyState === AsyncEventEmitterReadyState.DEACTIVATED) {\n      log('the emitter is destroyed, skipping!');\n      return this;\n    }\n    return _super.prototype.on.call(this, event, function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return __awaiter(_this, void 0, void 0, function () {\n        var queue;\n        var _this = this;\n        return __generator(this, function (_a) {\n          queue = this.openListenerQueue(event);\n          log('awaiting the \"%s\" listener...', event);\n          // Whenever a listener is called, create a new Promise\n          // that resolves when that listener function completes its execution.\n          queue.push({\n            args: args,\n            done: new Promise(function (resolve, reject) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var error_1;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n                      // Treat listeners as potentially asynchronous functions\n                      // so they could be awaited.\n                      return [4 /*yield*/, listener.apply(void 0, __spreadArray([], __read(args)))];\n                    case 1:\n                      // Treat listeners as potentially asynchronous functions\n                      // so they could be awaited.\n                      _a.sent();\n                      resolve();\n                      log('\"%s\" listener has resolved!', event);\n                      return [3 /*break*/, 3];\n                    case 2:\n                      error_1 = _a.sent();\n                      log('\"%s\" listener has rejected!', error_1);\n                      reject(error_1);\n                      return [3 /*break*/, 3];\n                    case 3:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            })\n          });\n\n          return [2 /*return*/];\n        });\n      });\n    });\n  };\n\n  AsyncEventEmitter.prototype.emit = function (event) {\n    var _this = this;\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var log = this.log.extend('emit');\n    log('emitting \"%s\" event...', event);\n    if (this.readyState === AsyncEventEmitterReadyState.DEACTIVATED) {\n      log('the emitter is destroyed, skipping!');\n      return false;\n    }\n    // Establish the Promise queue for this particular event.\n    this.openListenerQueue(event);\n    log('appending a one-time cleanup \"%s\" listener...', event);\n    // Append a one-time clean up listener.\n    this.once(event, function () {\n      // Clear the Promise queue for this particular event\n      // in the next tick so the Promise in \"untilIdle\" has\n      // time to properly resolve.\n      nextTick_1.nextTick(function () {\n        _this.queue.delete(event);\n        log('cleaned up \"%s\" listeners queue!', event);\n      });\n    });\n    return _super.prototype.emit.apply(this, __spreadArray([event], __read(args)));\n  };\n  /**\n   * Returns a promise that resolves when all the listeners for the given event\n   * has been called. Awaits asynchronous listeners.\n   * If the event has no listeners, resolves immediately.\n   */\n  AsyncEventEmitter.prototype.untilIdle = function (event, filter) {\n    if (filter === void 0) {\n      filter = function () {\n        return true;\n      };\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var listenersQueue;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            listenersQueue = this.queue.get(event) || [];\n            return [4 /*yield*/, Promise.all(listenersQueue.filter(filter).map(function (_a) {\n              var done = _a.done;\n              return done;\n            })).finally(function () {\n              // Clear the queue one the promise settles\n              // so that different events don't share the same queue.\n              _this.queue.delete(event);\n            })];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncEventEmitter.prototype.openListenerQueue = function (event) {\n    var log = this.log.extend('openListenerQueue');\n    log('opening \"%s\" listeners queue...', event);\n    var queue = this.queue.get(event);\n    if (!queue) {\n      log('no queue found, creating one...');\n      this.queue.set(event, []);\n      return [];\n    }\n    log('returning an exising queue:', queue);\n    return queue;\n  };\n  AsyncEventEmitter.prototype.removeAllListeners = function (event) {\n    var log = this.log.extend('removeAllListeners');\n    log('event:', event);\n    if (event) {\n      this.queue.delete(event);\n      log('cleared the \"%s\" listeners queue!', event, this.queue.get(event));\n    } else {\n      this.queue.clear();\n      log('cleared the listeners queue!', this.queue);\n    }\n    return _super.prototype.removeAllListeners.call(this, event);\n  };\n  AsyncEventEmitter.prototype.activate = function () {\n    var log = this.log.extend('activate');\n    this.readyState = AsyncEventEmitterReadyState.ACTIVE;\n    log('set state to:', this.readyState);\n  };\n  /**\n   * Deactivate this event emitter.\n   * Deactivated emitter can no longer emit and listen to events\n   * and needs to be activated again in order to do so.\n   */\n  AsyncEventEmitter.prototype.deactivate = function () {\n    var log = this.log.extend('deactivate');\n    log('removing all listeners...');\n    this.removeAllListeners();\n    this.readyState = AsyncEventEmitterReadyState.DEACTIVATED;\n    log('set state to:', this.readyState);\n  };\n  return AsyncEventEmitter;\n}(strict_event_emitter_1.StrictEventEmitter);\nexports.AsyncEventEmitter = AsyncEventEmitter;","map":{"version":3,"mappings":"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","names":["AsyncEventEmitterReadyState","exports","__extends","_super","_this","log","debug_1","queue","Map","readyState","ACTIVE","AsyncEventEmitter","event","listener","extend","DEACTIVATED","on","_i","args","openListenerQueue","push","done","Promise","resolve","reject","_a","error_1","once","nextTick_1","delete","emit","filter","listenersQueue","get","all","map","finally","set","clear","removeAllListeners","strict_event_emitter_1"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/@mswjs/interceptors/src/utils/AsyncEventEmitter.ts"],"sourcesContent":["import { Debugger, debug } from 'debug'\nimport { StrictEventEmitter, EventMapType } from 'strict-event-emitter'\nimport { nextTick } from './nextTick'\n\nexport interface QueueItem<Args extends any[]> {\n  args: Args\n  done: Promise<void>\n}\n\nexport enum AsyncEventEmitterReadyState {\n  ACTIVE = 'ACTIVE',\n  DEACTIVATED = 'DEACTIVATED',\n}\n\nexport class AsyncEventEmitter<\n  EventMap extends EventMapType\n> extends StrictEventEmitter<EventMap> {\n  public readyState: AsyncEventEmitterReadyState\n\n  private log: Debugger\n  protected queue: Map<\n    keyof EventMap,\n    QueueItem<Parameters<EventMap[keyof EventMap]>>[]\n  >\n\n  constructor() {\n    super()\n\n    this.log = debug('async-event-emitter')\n    this.queue = new Map()\n\n    this.readyState = AsyncEventEmitterReadyState.ACTIVE\n  }\n\n  public on<Event extends keyof EventMap>(\n    event: Event,\n    listener: EventMap[Event]\n  ) {\n    const log = this.log.extend('on')\n\n    log('adding \"%s\" listener...', event)\n\n    if (this.readyState === AsyncEventEmitterReadyState.DEACTIVATED) {\n      log('the emitter is destroyed, skipping!')\n      return this\n    }\n\n    return super.on(event, (async (...args: Parameters<EventMap[Event]>) => {\n      // Event queue is always established when calling \".emit()\".\n      const queue = this.openListenerQueue(event)\n\n      log('awaiting the \"%s\" listener...', event)\n\n      // Whenever a listener is called, create a new Promise\n      // that resolves when that listener function completes its execution.\n      queue.push({\n        args,\n        done: new Promise<void>(async (resolve, reject) => {\n          try {\n            // Treat listeners as potentially asynchronous functions\n            // so they could be awaited.\n            await listener(...args)\n            resolve()\n\n            log('\"%s\" listener has resolved!', event)\n          } catch (error) {\n            log('\"%s\" listener has rejected!', error)\n            reject(error)\n          }\n        }),\n      })\n    }) as EventMap[Event])\n  }\n\n  public emit<Event extends keyof EventMap>(\n    event: Event,\n    ...args: Parameters<EventMap[Event]>\n  ): boolean {\n    const log = this.log.extend('emit')\n\n    log('emitting \"%s\" event...', event)\n\n    if (this.readyState === AsyncEventEmitterReadyState.DEACTIVATED) {\n      log('the emitter is destroyed, skipping!')\n      return false\n    }\n\n    // Establish the Promise queue for this particular event.\n    this.openListenerQueue(event)\n\n    log('appending a one-time cleanup \"%s\" listener...', event)\n\n    // Append a one-time clean up listener.\n    this.once(event, (() => {\n      // Clear the Promise queue for this particular event\n      // in the next tick so the Promise in \"untilIdle\" has\n      // time to properly resolve.\n      nextTick(() => {\n        this.queue.delete(event)\n        log('cleaned up \"%s\" listeners queue!', event)\n      })\n    }) as EventMap[Event])\n\n    return super.emit(event, ...args)\n  }\n\n  /**\n   * Returns a promise that resolves when all the listeners for the given event\n   * has been called. Awaits asynchronous listeners.\n   * If the event has no listeners, resolves immediately.\n   */\n  public async untilIdle<Event extends keyof EventMap>(\n    event: Event,\n    filter: (item: QueueItem<Parameters<EventMap[Event]>>) => boolean = () =>\n      true\n  ): Promise<void> {\n    const listenersQueue = this.queue.get(event) || []\n\n    await Promise.all(\n      listenersQueue.filter(filter).map(({ done }) => done)\n    ).finally(() => {\n      // Clear the queue one the promise settles\n      // so that different events don't share the same queue.\n      this.queue.delete(event)\n    })\n  }\n\n  private openListenerQueue<Event extends keyof EventMap>(\n    event: Event\n  ): QueueItem<Parameters<EventMap[Event]>>[] {\n    const log = this.log.extend('openListenerQueue')\n\n    log('opening \"%s\" listeners queue...', event)\n\n    const queue = this.queue.get(event)\n\n    if (!queue) {\n      log('no queue found, creating one...')\n\n      this.queue.set(event, [])\n      return []\n    }\n\n    log('returning an exising queue:', queue)\n    return queue\n  }\n\n  public removeAllListeners<Event extends keyof EventMap>(event?: Event) {\n    const log = this.log.extend('removeAllListeners')\n    log('event:', event)\n\n    if (event) {\n      this.queue.delete(event)\n      log('cleared the \"%s\" listeners queue!', event, this.queue.get(event))\n    } else {\n      this.queue.clear()\n      log('cleared the listeners queue!', this.queue)\n    }\n\n    return super.removeAllListeners(event)\n  }\n\n  public activate(): void {\n    const log = this.log.extend('activate')\n    this.readyState = AsyncEventEmitterReadyState.ACTIVE\n    log('set state to:', this.readyState)\n  }\n\n  /**\n   * Deactivate this event emitter.\n   * Deactivated emitter can no longer emit and listen to events\n   * and needs to be activated again in order to do so.\n   */\n  public deactivate(): void {\n    const log = this.log.extend('deactivate')\n\n    log('removing all listeners...')\n    this.removeAllListeners()\n\n    this.readyState = AsyncEventEmitterReadyState.DEACTIVATED\n    log('set state to:', this.readyState)\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}