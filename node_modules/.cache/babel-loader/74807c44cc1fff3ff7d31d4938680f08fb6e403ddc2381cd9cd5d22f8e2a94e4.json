{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.introspectionFromSchema = introspectionFromSchema;\nvar _invariant = require('../jsutils/invariant.js');\nvar _parser = require('../language/parser.js');\nvar _execute = require('../execution/execute.js');\nvar _getIntrospectionQuery = require('./getIntrospectionQuery.js');\n\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\nfunction introspectionFromSchema(schema, options) {\n  const optionsWithDefaults = {\n    specifiedByUrl: true,\n    directiveIsRepeatable: true,\n    schemaDescription: true,\n    inputValueDeprecation: true,\n    ...options\n  };\n  const document = (0, _parser.parse)((0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults));\n  const result = (0, _execute.executeSync)({\n    schema,\n    document\n  });\n  !result.errors && result.data || (0, _invariant.invariant)(false);\n  return result.data;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","introspectionFromSchema","_invariant","require","_parser","_execute","_getIntrospectionQuery","schema","options","optionsWithDefaults","specifiedByUrl","directiveIsRepeatable","schemaDescription","inputValueDeprecation","document","parse","getIntrospectionQuery","result","executeSync","errors","data","invariant"],"sources":["/Users/lawrence/Documents/Codecademy/Redux News Reader (project)/node_modules/graphql/utilities/introspectionFromSchema.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.introspectionFromSchema = introspectionFromSchema;\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _parser = require('../language/parser.js');\n\nvar _execute = require('../execution/execute.js');\n\nvar _getIntrospectionQuery = require('./getIntrospectionQuery.js');\n\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\nfunction introspectionFromSchema(schema, options) {\n  const optionsWithDefaults = {\n    specifiedByUrl: true,\n    directiveIsRepeatable: true,\n    schemaDescription: true,\n    inputValueDeprecation: true,\n    ...options,\n  };\n  const document = (0, _parser.parse)(\n    (0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults),\n  );\n  const result = (0, _execute.executeSync)({\n    schema,\n    document,\n  });\n  (!result.errors && result.data) || (0, _invariant.invariant)(false);\n  return result.data;\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB;AAEzD,IAAIC,UAAU,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAEnD,IAAIC,OAAO,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAE9C,IAAIE,QAAQ,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AAEjD,IAAIG,sBAAsB,GAAGH,OAAO,CAAC,4BAA4B,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,uBAAuB,CAACM,MAAM,EAAEC,OAAO,EAAE;EAChD,MAAMC,mBAAmB,GAAG;IAC1BC,cAAc,EAAE,IAAI;IACpBC,qBAAqB,EAAE,IAAI;IAC3BC,iBAAiB,EAAE,IAAI;IACvBC,qBAAqB,EAAE,IAAI;IAC3B,GAAGL;EACL,CAAC;EACD,MAAMM,QAAQ,GAAG,CAAC,CAAC,EAAEV,OAAO,CAACW,KAAK,EAChC,CAAC,CAAC,EAAET,sBAAsB,CAACU,qBAAqB,EAAEP,mBAAmB,CAAC,CACvE;EACD,MAAMQ,MAAM,GAAG,CAAC,CAAC,EAAEZ,QAAQ,CAACa,WAAW,EAAE;IACvCX,MAAM;IACNO;EACF,CAAC,CAAC;EACD,CAACG,MAAM,CAACE,MAAM,IAAIF,MAAM,CAACG,IAAI,IAAK,CAAC,CAAC,EAAElB,UAAU,CAACmB,SAAS,EAAE,KAAK,CAAC;EACnE,OAAOJ,MAAM,CAACG,IAAI;AACpB"},"metadata":{},"sourceType":"script","externalDependencies":[]}